(function () {

  'use strict';

  angular.module('foneClub', [

    /* public modules */
    'ionic',
    'firebase',
    'ngCordova',
    'ngMask',
    'LocalStorageModule',
    'ui.bootstrap',
    'ngDialog',
    'ui.router',
    'ui.toggle',
    'autoCompleteModule'

  ]);

  angular.module('foneClub').controller('globalCtrl', globalCtrl);

  globalCtrl.$inject = ['$interval', 'DataFactory', 'FoneclubeService', '$location'];

  function globalCtrl($interval, DataFactory, FoneclubeService, $location) {
    var vm = this;
    vm.data = DataFactory;

    function init() {
      FoneclubeService.getCustomers().then(function(result) {
          vm.data.customers = result.map(function(user) {
            user.Phones = user.Phones.map(function(phone) {
              phone.phoneFull = phone.DDD.concat(phone.Number);
              return phone;
            })
            return user;
          })
        console.log('getCustomers')
        console.log(result)
        //post realizado com sucesso
      })
      .catch(function(error){
          console.log('catch error');
          console.log(error);
          console.log(error.statusText); // mensagem de erro para tela, caso precise
      });
    }

    init();

    $interval(function() {
      FoneclubeService.getCustomers().then(function(result) {
        vm.data.customersCache = result.map(function(user) {
          user.Phones = user.Phones.map(function(phone) {
            phone.phoneFull = phone.DDD.concat(phone.Number);
            return phone;
          })
          return user;
        })
        if ($location.$$path !== '/tab/customers') {
          vm.data.customers = angular.copy(vm.data.customersCache);
        }
        console.log('getCustomers')
        console.log(result)
        //post realizado com sucesso
      })
      .catch(function(error){
          console.log('catch error');
          console.log(error);
          console.log(error.statusText); // mensagem de erro para tela, caso precise
      });
    }, 300000);
  }

})();






(function () {

  'use strict';

  angular.module('foneClub')
    .config(masterConfiguration);

  function masterConfiguration($urlRouterProvider,$ionicConfigProvider,$provide, $stateProvider){

      configRouteProvider($ionicConfigProvider)

      $stateProvider.state('master', {
        url: '/',
        templateUrl: 'index.html',
        controller: 'MasterController as vm'
      })
      .state('login', {
        url: '/login',
        templateUrl: 'modules/login/login.html',
        controller: 'LoginController as vm'
      })
      .state('tabs', {
        url: "/tab",
        abstract: true,
        templateUrl: "modules/menu-tabs/menu-tabs.html",
        controller:"MenuController as vm"
      })
      .state('tabs.checkout-view', {
        url: "/checkout-view",
        views: {
          'menu-tab': {
            templateUrl: "modules/checkout/checkout.html",
            controller: 'CheckoutController as vm'
          }
        }
      })
      .state('tabs.home', {
        url: "/home",
        views: {
          'menu-tab': {
            templateUrl: "modules/home/home.html",
            controller: 'HomeController as vm'
          }
        }
      })
      .state('tabs.cadastro', {
        url: "/cadastro",
        views: {
          'menu-tab': {
            templateUrl: "modules/cadastro/cadastro.html",
            controller: 'CadastroController as vm'
          }
        }
      })
      .state('tabs.list-customer', {
        url: "/list-customer",
        views: {
          'menu-tab': {
            templateUrl: "modules/lista-customer/lista-customer.html",
            controller: 'CustomerListController as vm'
          }
        }
      })
      .state('tabs.customers', {
        url: "/customers",
        views: {
          'menu-tab': {
            templateUrl: "modules/customers/customers.html",
            controller: 'CustomersController as vm'
          }
        }
      })
      .state('tabs.status-charging', {
        url: "/status-charging",
        views: {
          'menu-tab': {
            templateUrl: "modules/status-charging/status-charging.html",
            controller: 'StatusChargingController as vm'
          }
        }
      })
      .state('tabs.edicao', {
        url: "/edicao", 
        views: {      
          'menu-tab': {
            templateUrl: "modules/customers/edicao/edicao.html",
            controller: 'EdicaoController as vm'
          }
        },
        params: {data: null}
      })
      .state('tabs.ordemservico', {
        url: "/ordemservico",       
        templateUrl: "modules/customers/ordem-servico/ordemservico.html",
        controller: 'OrdemServico as vm',
        params: { data: null }      
      })
      .state('tabs.mass-charging', {
        url: "/mass-charging",
        views: {
          'menu-tab': {
            templateUrl: "modules/mass-charging/mass-charging.html",
            controller: 'MassChargingController as vm'
          }
        }
      })
      .state('tabs.allphone-lines',{
        url: "/allphone-lines",
        views: {
          'menu-tab': {
            templateUrl: "modules/allphonelines/allphonelines.html",
            controller: 'AllPhoneLinesController as vm'
          }
        }
      })

      $urlRouterProvider.otherwise('/');
      configErrorHandler($provide);
  }

  function configRouteProvider($ionicConfigProvider){
      $ionicConfigProvider.views.maxCache(0);
      $ionicConfigProvider.tabs.position('bottom');
      //$ionicConfigProvider.views.transition('android');
  }

  function configErrorHandler($provide){
    $provide.decorator("$exceptionHandler", function($delegate) {
        return function(exception, cause) {
          $delegate(exception, cause);
          //alert(exception.name + ' - ' + exception.message);
        };
      });
  }


})();

(function () {
  'use strict';

  angular.module('foneClub')
    .run(function($ionicPlatform) {
        $ionicPlatform.ready(function() {
            if(window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
            // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
            // for form inputs)
            cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);

            // Don't remove this line unless you know what you are doing. It stops the viewport
            // from snapping when text inputs are focused. Ionic handles this internally for
            // a much nicer keyboard experience.
            cordova.plugins.Keyboard.disableScroll(true);
            }
            if(window.StatusBar) {
            StatusBar.styleDefault();
            }
        });
        })

})();
(function () {
    'use strict';

    angular
        .module('foneClub')
        .controller('AllPhoneLinesController', AllPhoneLinesController)
        .directive('ngPrism', function () {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    element.ready(function () {
                        Prism.highlightElement(element[0]);
                    });
                }
            };
        });


    AllPhoneLinesController.inject = ['$scope', 'DataFactory', 'ViewModelUtilsService', 'FoneclubeService', 'MainUtils', '$stateParams', 'FlowManagerService', '$timeout', 'HubDevService', '$q', '$ionicScrollDelegate', 'UtilsService', 'DialogFactory', 'ngDialog', '$http', '$sce', '$rootScope'];
    function AllPhoneLinesController($scope, DataFactory, ViewModelUtilsService, FoneclubeService, MainUtils, $stateParams, FlowManagerService, $timeout, HubDevService, $q, $ionicScrollDelegate, UtilsService, DialogFactory, ngDialog, $http, $sce, $rootScope) {
        var vm = this;
        vm.data = DataFactory;
        vm.showLoader = true;

        vm.search = "";
        vm.showall = false;
        vm.linhaAtiva = false;
        vm.claro = true;
        vm.vivo = true;
        vm.history = [];
        vm.sp = 1;
        vm.Phones = [];
        vm.tempPhones = [];
        vm.parentlist = [];
        vm.totalDisplayed = 50;
        vm.showAllText = "Show More 50";

        vm.ignoreAccents = function (item) {
            if (vm.showall) {
                return true;
            } else {
                var text = removeAccents(item.NovoFormatoNumero.toLowerCase());
                //alert(text);
                var search_text = removeAccents(vm.search.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, ''));
                var flag1 = text.indexOf(search_text) > -1;
                var flag2 = true;
                if (vm.linhaAtiva && !item.LinhaAtiva) {
                    flag2 = false;
                }
                var flag3 = true;
                if (!vm.claro) {
                    var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
                    if (!itm) {
                        flag3 = false;
                    } else {
                        text = removeAccents(itm.Description.toLowerCase());
                        flag3 = !(text.indexOf('claro') > -1);
                    }
                }
                var flag4 = true;
                if (!vm.vivo) {
                    var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
                    if (!itm) {
                        flag4 = false;
                    } else {
                        text = removeAccents(itm.Description.toLowerCase());
                        flag4 = !(text.indexOf('vivo') > -1);
                    }
                }

                return flag1 && flag2 && flag3 && flag4;

            }
        };

        function getNumberString(param) {
            return param.DDD.concat(param.Number);
        }

        var getCustomers = $scope.$watch(function () {

            $scope.clientList = vm.data.customers;
            return $scope.clientList;
        }, function (data) {
            if (data && data.length > 0) {
                vm.showLoader = false;
                getCustomers();
                init();
                if (vm.data.customersCache) {
                    vm.data.customers = angular.copy(vm.data.customersCache);
                }
            }
        })


        function init() {
            FoneclubeService.getPlans().then(function (result) {
                vm.plans = result;
                var size = vm.data.customers.length;
                for (var i = 0; i < size; i++) {
                    var customer = vm.data.customers[i];
                    var psize = customer.Phones.length;
                    for (var j = 0; j < psize; j++) {
                        var tmpPhone = customer.Phones[j];
                        if(tmpPhone.IdPlanOption==''){
                        tmpPhone.price = 0;
                        } else {
                            tmpPhone.price = vm.plans.find(x => x.Id == tmpPhone.IdPlanOption).Value / 100                            
                        }
                        vm.Phones.push(tmpPhone);
                        vm.parentlist.push({'parent':i,'child':j});
                        customer.Phones[j].key = Math.random();

                        customer.Phones[j].StatusOperator = { 'background-color': 'grey' }
                        customer.Phones[j].StatusDescription = 'C'

                        if (customer.Phones[j].Portability) {
                            customer.Phones[j].Portability = 'true';
                        } else {
                            customer.Phones[j].Portability = 'false';
                        }
                        customer.Phones[j].NovoFormatoNumero = getNumberString(customer.Phones[j]); //popula o novo campo vm.<telefone>
                        for (var plan in vm.plans) {
                            if (vm.plans[plan].Id == customer.Phones[j].IdPlanOption) {
                                if (vm.plans[plan].Description.endsWith('VIVO')) {
                                    customer.Phones[j].operadora = '1'; //seta a operadora local
                                    customer.Phones[j].StatusOperator = { 'background-color': 'green' }
                                    customer.Phones[j].StatusDescription = 'A'
                                } else {
                                    customer.Phones[j].operadora = '2'; //seta a operadora local

                                    console.log('tentando coletar')
                                    /*
                                    FoneclubeService.getStatusBlockedClaro(customer.Phones[j].DDD, customer.Phones[j].Number).then(function (result) {
                                        console.log('retorno ' + result)
                                        if (!result) {
                                            customer.Phones[j].StatusOperator = { 'background-color': 'green' }
                                            customer.Phones[j].StatusDescription = 'A'
                                        }
                                        else {
                                            customer.Phones[j].StatusOperator = { 'background-color': 'red' }
                                            customer.Phones[j].StatusDescription = 'B'
                                        }

                                    });
                                    */
                                }
                            }
                        }

                    }
                }

                vm.pricelist = [];
                for (var i = 0; i < vm.Phones.length; i++) {
                    var phoneNumber = vm.Phones[i];
                    if (phoneNumber.IdPlanOption == '') {
                        vm.pricelist.push(0);
                    } else {
                        vm.pricelist.push(vm.plans.find(x => x.Id == phoneNumber.IdPlanOption).Value / 100);
                    }
                }
                vm.tempPhones = angular.copy(vm.Phones);
                vm.sp = 1;
                addHistory();
                vm.showLoader = false;
            })

                //post realizado com sucesso

                .catch(function (error) {
                    console.log('catch error');
                    console.log(error);
                    console.log(error.statusText); // mensagem de erro para tela, caso precise
                });

        }

        vm.onchecked = onchecked;
        function onchecked(position) {
            vm.Phones[position] = angular.copy(vm.tempPhones[position]);
            vm.data.customers[vm.parentlist[position].parent].Phones[vm.parentlist[position].child] =angular.copy( vm.Phones[position]);
            vm.showLoader = true;
            onTapSendUser(vm.data.customers[vm.parentlist[position].parent]);
        }

        vm.onunchecked = onunchecked;
        function onunchecked(position) {
            vm.tempPhones[position] = angular.copy(vm.Phones[position]);
            var id = vm.tempPhones[position].IdPlanOption;
            if (id == '' || id == null)
                vm.pricelist[position] = 0;
            else
                vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;

        }

        vm.onallchecked = onallchecked;
        function onallchecked() {
            vm.Phones = angular.copy(vm.tempPhones);
            for(var position=0;position<vm.Phones.length;position++){
                vm.data.customers[vm.parentlist[position].parent].Phones[vm.parentlist[position].child] =angular.copy( vm.Phones[position]);
            }
            vm.count = 0;
            vm.showLoader = true;
            onTapAllusers(vm.data.customers);
        }

        vm.onallunchecked = onallunchecked;
        function onallunchecked() {
            vm.tempPhones = angular.copy(vm.Phones);
            for (var position = 0; position < vm.tempPhones.length; position++) {
                var id = vm.tempPhones[position].IdPlanOption;
                if (id == '' || id == null)
                    vm.pricelist[position] = 0;
                else
                    vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
            }
        }

        vm.onedit = onedit;
        function onedit(position) {
            ViewModelUtilsService.showModalCustomer(vm.data.customers[vm.parentlist[position].parent], -1);
        }


        vm.changedFilterAll = changedFilterAll;
        function changedFilterAll() {
            if (vm.showall) {
                vm.search = "";
                vm.linhaAtiva = false;
                vm.claro = true;
                vm.vivo = true;
            }
        }

        vm.onUndo = onUndo;
        function onUndo() {
            vm.sp--;
            var tmp = angular.copy(vm.history[vm.sp - 1]);
            vm.tempPhones = tmp.phones;
            vm.pricelist = tmp.pricelist;
            for (var position = 0; position < vm.tempPhones.length; position++) {
                var id = vm.tempPhones[position].IdPlanOption;
      /*          if (id == '' || id == null)
                    vm.pricelist[position] = 0;
                else
                    vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
                    */
            }
        }

        vm.onRedo = onRedo;
        function onRedo() {
            vm.sp++;
            var tmp = angular.copy(vm.history[vm.sp - 1]);
            vm.tempPhones = tmp.phones;
            vm.pricelist = tmp.pricelist;
            for (var position = 0; position < vm.tempPhones.length; position++) {
                var id = vm.tempPhones[position].IdPlanOption;
                /*
                if (id == '' || id == null)
                    vm.pricelist[position] = 0;
                else
                    vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
                    */
            }
        }

        vm.addHistory = addHistory;
        function addHistory() {
            if (vm.history.length > vm.sp) {
                vm.history.splice(vm.sp, vm.history.length - vm.sp);
            }
            var tmpPhones = angular.copy(vm.tempPhones);
            var tmpPricelist = angular.copy(vm.pricelist);
            vm.history.push({ 'phones': tmpPhones, 'pricelist': tmpPricelist });
            vm.sp = vm.history.length;
        }

        vm.telephonechanged = telephonechanged;
        function telephonechanged($index) {
            //addHistory();
        }

        vm.activechanged = activechanged;
        function activechanged($index) {
            addHistory();
        }


        vm.changedPlano = changedPlano;
        function changedPlano(position, id) {
            if (id == '' || id == null){
                vm.pricelist[position] = 0;
                vm.tempPhones[position].price = 0;
            } else {
                vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
                vm.tempPhones[position].price = vm.plans.find(x => x.Id == id).Value / 100;
            }
            addHistory();
            autmaticSum();
        }

        vm.pricechanged = pricechanged;
        function pricechanged($index) {
            autmaticSum();
        }

        vm.nicknamechanged = nicknamechanged;
        function nicknamechanged($index) {
            addHistory();
        }

        vm.changedAutoSum = changedAutoSum;
        function changedAutoSum() {
            if (vm.autoSum) {
                //       autmaticSum();
            }
        }

        function autmaticSum() {
            if (vm.autoSum) {
                vm.singlePriceLocal = 0;
                for (var i = 0; i < vm.pricelist.length; i++) {
                    vm.singlePriceLocal += vm.pricelist[i] * 100;
                }
                vm.singlePriceLocal = vm.singlePriceLocal / 100;
            }
        }

        vm.onShowMore = onShowMore;
        function onShowMore() {
            if(vm.totalDisplayed<vm.tempPhones.length){
                vm.totalDisplayed+=50;
            }
        }

        vm.onfocusPreco = onfocusPreco;
        function onfocusPreco(position){
            vm.tempPrice = vm.pricelist[position];
        }

        vm.onBlurPreco = onBlurPreco;
        function onBlurPreco(position){
            if(vm.tempPrice != vm.pricelist[position]){
                addHistory();
            }
        }

        vm.PhonesAsc = PhonesAsc;
        function PhonesAsc(type) {
            if (type == 'NovoFormatoNumero') {
                $scope.sortType = 'NovoFormatoNumero';
                $scope.sortReverse = false;
            } else if (type == 'IdPlanOption') {
                $scope.sortType = 'IdPlanOption';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.IdPlanOption != '');
            } else if (type == 'NickName') {
                $scope.sortType = 'NickName';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.NickName != undefined);
            } else if (type == 'price'){
                $scope.sortType = 'price';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.price != '');
            }
        }

        vm.PhonesDesc = PhonesDesc;
        function PhonesDesc(type) {
            if (type == 'NovoFormatoNumero') {
                $scope.sortType = '-NovoFormatoNumero';
                $scope.sortReverse = false;
            } else if (type == 'IdPlanOption') {
                $scope.sortType = '-IdPlanOption';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.IdPlanOption != '');
            } else if (type == 'NickName') {
                $scope.sortType = '-NickName';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.NickName != undefined);
            } else if (type == 'price'){
                $scope.sortType = '-price';
                $scope.sortReverse = false;
                vm.tempPhones = vm.Phones.filter(x => x.price != '');
            }
        }

        vm.onTapSendUser = onTapSendUser;
        function onTapSendUser(customer) {

            var customerSend = {
                "Id": customer.Id,
                "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
                "Register": customer.Register,
                "Name": customer.Name,
                "NickName": customer.NickName,
                "Email": customer.Email,
                "Born": customer.Born,
                "Gender": customer.Gender,
                "IdPlanOption": customer.IdPlanOption,
                "IdPagarme": customer.IdPagarme,
                "IdRole": customer.IdRole,
                "Adresses": customer.Adresses,
                "Phones": customer.Phones,
                "Photos": customer.Photos,
                "IdParent": customer.IdParent,
                "NameContactParent": customer.NameContactParent,
                "IdCommissionLevel": customer.IdCommissionLevel,
                "SinglePrice": vm.singlePriceLocal,
                "DescriptionSinglePrice": customer.DescriptionSinglePrice
            }

            FoneclubeService.postUpdateCustomer(customerSend).then(function(result){
                vm.showLoader = false;
            })
        };

        vm.onTapAllusers = onTapAllusers;
        function onTapAllusers(customers){
            for(var i =0;i<customers.length;i++){
                var customer = customers[i];
                var customerSend = {
                    "Id": customer.Id,
                    "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
                    "Register": customer.Register,
                    "Name": customer.Name,
                    "NickName": customer.NickName,
                    "Email": customer.Email,
                    "Born": customer.Born,
                    "Gender": customer.Gender,
                    "IdPlanOption": customer.IdPlanOption,
                    "IdPagarme": customer.IdPagarme,
                    "IdRole": customer.IdRole,
                    "Adresses": customer.Adresses,
                    "Phones": customer.Phones,
                    "Photos": customer.Photos,
                    "IdParent": customer.IdParent,
                    "NameContactParent": customer.NameContactParent,
                    "IdCommissionLevel": customer.IdCommissionLevel,
                    "SinglePrice": vm.singlePriceLocal,
                    "DescriptionSinglePrice": customer.DescriptionSinglePrice
                }
    
                FoneclubeService.postUpdateCustomer(customerSend).then(function(result){
                    vm.count++;
                    if(vm.count==vm.data.customers.length){
                        vm.showLoader = false;                        
                    }
                })
            }
        }
    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CadastroController', CadastroController);

    CadastroController.inject = [
        '$scope',
        'PagarmeService',        
        'HubDevService',
        'FoneclubeService',        
        'MainUtils',
        '$q',
        '$timeout',        
        'FlowManagerService',
        'ViewModelUtilsService',
        '$ionicScrollDelegate',
        'UtilsService',
        'DialogFactory',
        'ngDialog'
    ];

    function CadastroController(
        $scope,
        PagarmeService,          
        HubDevService, 
        FoneclubeService,
        MainUtils, 
        $q, 
        $timeout,          
        FlowManagerService, 
        ViewModelUtilsService,
        $ionicScrollDelegate,
        UtilsService,
        DialogFactory,
        ngDialog
    ) {
            
        var vm = this;
        vm.viewName = 'Cadastro Foneclube';
        vm.requesting = false;        
        vm.cpf = '';
        vm.birthdate = '';
        vm.zipcode = '';
        vm.street = '';
        vm.complement = '';
        vm.street_number = '';
        vm.neighborhood = '';
        vm.city = '';
        vm.uf = '';
        vm.email = '';
        vm.personalNumber = '';
        vm.phoneNumbersView =[ ];
        onTapNewPhoneNumber();        
        vm.onTapSearchDocument = onTapSearchDocument;
        vm.onTapSendDocument = onTapSendDocument;

        vm.validarCEP = validarCEP;
        vm.onTapSendAddress = onTapSendAddress;

        vm.onTapSendPersonalData = onTapSendPersonalData;

        vm.onTapNewPhoneNumber = onTapNewPhoneNumber;
        vm.onTapRemoveNewNumber = onTapRemoveNewNumber;
        vm.setPlansList = setPlansList;
        vm.changePhoneNumber = changePhoneNumber;
        vm.getContactParentName = getContactParentName;
        vm.showAddNewPhone = showAddNewPhone;
        
        // vm.enter = enter;
        vm.onTapCancel = onTapCancel;

        vm.onCheckCNPJ = onCheckCNPJ
        vm.CNPJField = false;
        vm.CPFField = true;

        function onCheckCNPJ(){
            console.log("andando " + vm.checkboxCNPJ)

            if(vm.checkboxCNPJ)
            {
                onShowCNPJField();
            }
            else
            {
                onShowCPFField();
            }
            
        }

        function onShowCPFField(){
            vm.CNPJField = false;
            vm.CPFField = true;
        }

        function onShowCNPJField(){
            vm.CNPJField = true;
            vm.CPFField = false;
        }
           
        init();

        function init(){
            vm.hasCPF = false;
            etapaDocumento();            
            vm.allOperatorOptions = MainUtils.operatorOptions();
            FoneclubeService.getPlans().then(function(result){
                console.log(result)
                vm.plans = result;
                vm.selectedPlansList = [];
            })
            .catch(function(error){
                console.log(error.statusText);
            });
           FoneclubeService.getOperators().then(function(result){
                vm.operators = result;
            })
            .catch(function(error){
                console.log(error.statusText);
            });                 
        }

        //Busca o cpf na base foneclube, se existir envia pra edição senão consulta na API de cpfs e retorna o nome;
        function onTapSearchDocument() {            
            vm.requesting = true;            
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            FoneclubeService.getCustomerByCPF(cpf).then(function(existentClient){
                if (existentClient.Id == 0) {
                    HubDevService.validaCPF(cpf).then(function(result){
                        if(result.status){
                           vm.name = result.nome;
                        }
                        etapaDocumentoFaseNome();
                        showLoader.close();
                    }, function(error){
                        etapaDocumentoFaseNome();
                        showLoader.close();
                    });
                } else {
                    showLoader.close();
                    DialogFactory.dialogConfirm({titulo:'Cliente já cadastrado', mensagem:'Deseja acrescentar novas linhas a este CPF?'})
                    .then(function(res){
                        if(res) {
                            FlowManagerService.changeEdicaoView(existentClient);
                        } else {
                            FlowManagerService.changeHomeView();
                        }
                    })                    
                }
            }, function (result) {
                FlowManagerService.changeHomeView();
            }).catch(function (error) {
                FlowManagerService.changeHomeView();
            });
        }

        //envia o CPF com os dados basico para cadastro no Foneclube
        function onTapSendDocument(){
            vm.requesting = true;
            var personCheckout = {
                'DocumentNumber': UtilsService.clearDocumentNumber(vm.cpf),
                'Name': vm.name,
                'Born': '12/12/1950',
                'Email': vm.email,
                'Phones' : [{
                    'DDD': UtilsService.getPhoneNumberFromStringToJson(vm.personalNumber).DDD,
                    'Number': UtilsService.getPhoneNumberFromStringToJson(vm.personalNumber).Number,
                    'IsFoneclube': null,
                    'Id': null,
                    'IdOperator': vm.operator
                }]
            };
            FoneclubeService.postBasePerson(personCheckout).then(function(result){
                if(result) {
                    etapaEndereco();
                    DialogFactory.showMessageConfirm({titulo:'Andamento', mensagem:'Documento enviado, agora preencha os dados de Endereço.'})
                    .then(function() {
                        $timeout(function(){
                            document.getElementById('cep').focus();
                        }, 200);
                    });
                }
            }).catch(function(error){
                vm.requesting = false;
                DialogFactory.showMessageDialog({mensagem:error.statusText});                
            });
        }
            
        
        function validarCEP() {
            if (vm.zipcode.length < 9) return;
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
            HubDevService.validaCEP(vm.zipcode.replace(/[-.]/g , '')).then(function(result){
                if (!result.erro) {
                    vm.street = result.logradouro;
                    vm.neighborhood = result.bairro;
                    vm.city = result.localidade;
                    vm.uf = result.uf;
                    $timeout(function(){
                        document.getElementById('numero').focus();
                    }, 200);
                } else {
                    DialogFactory.showMessageDialog({mensagem: "CEP incorreto."});
                }
                showLoader.close();
            }, function(error){
                showLoader.close();
            });
        }

        function onTapSendAddress() {
            vm.requesting = true;
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            var personCheckout = {
                'DocumentNumber': cpf,
                'Adresses': [
                    {
                        'Street': vm.street,
                        'Complement': vm.complement,
                        'StreetNumber': vm.street_number,
                        'Neighborhood': vm.neighborhood,
                        'City': vm.city,
                        'State': vm.uf,
                        'Cep': vm.zipcode
                    }
                ]
            };

            FoneclubeService.postUpdatePersonAdress(personCheckout).then(function(result){
                if(result) {
                    etapaDadosPessoais();
                    DialogFactory.showMessageConfirm({titulo:'Andamento',mensagem:'Endereço enviado, agora preencha os dados pessoais.'});                    
                }
            })
            .catch(function(error){
                DialogFactory.showMessageDialog({mensagem:error.statusText});
                vm.requesting = false;
            });
        }

        // ETAPA IMAGENS
        vm.imageSelf;
        vm.base64Self;
        vm.imageFrente;
        vm.base64Frente;
        vm.imageVerso;
        vm.base64Verso;        
        vm.uploadImg = uploadImg;
        vm.viewImg = viewImg;
        function viewImg(img) {            
            ngDialog.open({
                template: '<div class="popup-lista-imagens ngdialog-close"><img ng-src="{{img}}"/></div>',
                controller: ['$scope', 'DataFactory', function($scope, DataFactory) {                    
                    $scope.img = $scope.ngDialogData.img;            
                }],
                className: 'ngDialog-custom-width popup-lista-imagens',
                plain: true,
                closeByDocument: true,
                data: {
                    img: img
                }
            });
        }
        function uploadImg(param) {
            document.getElementById(param).click();
        }
        function onTapSendPersonalData() {
            var showLoader = DialogFactory.showLoader('Enviando Imagens...');
            vm.requesting = true;
            UtilsService.sendImageToUpload(vm.imageSelf, vm.imageFrente, vm.imageVerso).then(function(result) {
                var personCheckout = {
                    'DocumentNumber': UtilsService.clearDocumentNumber(vm.cpf),
                    'Photos': []
                };
                for(var i in result) {
                    personCheckout.Photos.push({Name:result[i].filename, Tipo: result[i].tipo});
                }
                FoneclubeService.postUpdatePerson(personCheckout).then(function(result){
                    showLoader.close();
                    if(result) {
                        etapaComplementar();
                        DialogFactory.showMessageConfirm({titulo:'Andamento',mensagem:'Dados pessoais enviados, agora preencha os dados Foneclube.'})
                        .then(function() {
                            $timeout(function(){
                                document.getElementById('telefoneConvidou').focus();
                            }, 200); 
                        })
                    }
                })
                .catch(function(error){
                    DialogFactory.showMessageDialog({mensagem:error.statusText}); //TODO
                    vm.requesting = false;
                    showLoader.close();

                });
            }, function(result) {
                showLoader.close();
                DialogFactory.showMessageDialog({mensagem: 'fazer validações para mensagens de erro;'}); //TODO
            });
        }
        // ETAPA IMAGENS
        function etapaDocumentoFaseNome(){
            vm.hasCPF = true;            
            vm.requesting = false;
            $timeout(function(){
                document.getElementById('nome').focus();
            }, 200);            
        }
        function etapaDocumento(){
            limpaEtapas();
            vm.etapaDocumento = true;
        }
        function etapaEndereco(){
            limpaEtapas();
            vm.etapaBuscarCEP = true;
            vm.etapaEndereco = true;                          
        }
        function etapaDadosPessoais(){
            limpaEtapas();
            vm.etapaDadosPessoais = true;
        }
        function etapaComplementar(){
            limpaEtapas();
            vm.etapaComplementar = true;           
            
        }
        function limpaEtapas(){
            vm.etapaDocumento = false;
            vm.etapaEndereco = false;
            vm.etapaDadosPessoais = false;
            vm.etapaComplementar = false;
            vm.requesting = false;
        }

        /////////////////////////
        /////FOTOS FASE
        //MOVER PRA CONSTATNS
        // var PHOTO_SELFIE = 1;
        // var PHOTO_FRONT = 2;
        // var PHOTO_VERSE = 3;
        // var interval;
        // vm.currentPhoto;

        // function onTapPhotoSelfie(){
        //     console.log('onTapPhotoSelfie');
        //     if(!vm.selfieSended)
        //         launchModal(PHOTO_SELFIE);
        // }

        // function onTapPhotoFront(){
        //     console.log('onTapPhotoFront');
        //     if(!vm.frontSended)
        //         launchModal(PHOTO_FRONT);
        // }

        // function onTapPhotoVerse(){
        //     console.log('onTapPhotoVerse');
        //     if(!vm.verseSended)
        //         launchModal(PHOTO_VERSE);
        //         //deseja trocar imagem?
        // }

        // function launchModal(photoType){
        //     console.log('launchModal ' + photoType);
        //     vm.currentPhoto = photoType;
        //     //limpa seleção de arquivo em variável local e em variável global
        //     vm.hasFileSelected = false;
        //     FileListUtil.set(undefined);
        //     vm.hasPhotoCaptured = false;
        //     vm.modal.show();            
        //     validadeFile();

        // }

        // function validadeFile(){
        //     try{
        //         $interval.cancel(interval);
        //     }
        //     catch(error){ }
        //     interval = $interval(function() {
        //         //console.log('say hello');
        //         //console.log(FileListUtil.get())
        //         if(FileListUtil.get())
        //         {
        //             vm.hasFileSelected = true;
        //         }
        //     }, 500);
        // }

        // vm.onTapPhotoGalley = onTapPhotoGalley;
        // vm.onTapPhotoCamera = onTapPhotoCamera;
        // function onTapPhotoGalley(){
        //     console.log('onTapPhotoGalley');
        //     //não precisu file upload abre direto do DOM
        // }
        // function onTapPhotoCamera(){
        //     console.log('onTapPhotoCamera');
        //     //startCameraPhoto(); não precisa file upload abre direto do DOM
        // }

        ////PHOTO PROCCESS
        /////////////////////////////////////
        /////////////////////////////////////

        ///GALERIA
        
        
        // var personCheckout = {};
        // personCheckout.Images = [];
        // var selfiePhotoName = '';
        // var frontPhotoName = '';
        // var versePhotoName = '';
        // var listaImagens = [];
        // var cameraPhotoName;
        // vm.fotos = [];
        // vm.images = []
        // vm.onTapSendImage = onTapSendImage;
        // function uploadIdentidadeGaleria(){
        //     console.log('uploadIdentidadeGaleria')
        //     var file = FileListUtil.get();
        //     if(!file)
        //      return;
        //     uploadFile(file).then(function(result){
        //         console.log('result')
        //         console.log(result.filename);
        //         setImageReleaseView(result);
        //         //https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/lsUbxLxh-IMG_20170420_162617843.jpg
        //     });

        // }

        // function setImageReleaseView(result){
        //     switch(vm.currentPhoto) {
        //             case PHOTO_SELFIE:
        //                 console.log('PHOTO_SELFIE');
        //                 vm.selfieSended = true;
        //                 vm.showSelfiePhoto = true;
        //                 selfiePhotoName = result.filename;
        //                 vm.selfiePhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + selfiePhotoName;
        //                 vm.modal.hide();
        //                 //code
        //                 break;

        //             case PHOTO_FRONT:
        //                 console.log('PHOTO_FRONT');
        //                 vm.frontSended = true;
        //                 vm.showFrontPhoto = true;
        //                 frontPhotoName = result.filename;
        //                 vm.frontPhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + frontPhotoName;
        //                 vm.modal.hide();
        //                 //code
        //                 break;

        //             case PHOTO_VERSE:
        //                 console.log('PHOTO_VERSE');
        //                 versePhotoName = result.filename;
        //                 vm.verseSended = true;
        //                 vm.showVersePhoto = true;
        //                 vm.versePhotoURL = 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + versePhotoName;
        //                 vm.modal.hide();
        //                 //code
        //                 break;
        //         }
        // }




        // function uploadFile(file){
        //     var q = $q.defer();

        //     if(isInvalidName(file.name)){
        //         vm.file = null;
        //         vm.msg = "Não foi possivel enviar sua imagem, por favor envie uma imagem sem espaço no nome do arquivo"
        //         q.reject();
        //         return q.promise;
        //     }
        //     var showLoader = DialogFactory.showLoader('Enviando...');
        //     var imageUploader = new ImageUploader();
        //     imageUploader.push(file)
        //     .then((data) => {
        //         showLoader.close();
        //          q.resolve(data);
        //     })
        //     .catch((err) => {
        //         DialogFactory.showMessageDialog({mensagem:'Não foi possível enviar imagens'});
        //         showLoader.close();
        //         q.reject(error);
        //     });
        //     return q.promise;
        // }

        // function onTapSendImage(){
        //     vm.msg = "";
        //     console.log('onTapSendImage ');
        //     if(vm.hasPhotoCaptured)
        //         startListUpload(vm.fotos);
        //     if(vm.hasFileSelected)
        //         uploadIdentidadeGaleria();
        // }

        // /////////////////////////////////////
        // ///foto de camera
        // //extrair
        // function startCameraPhoto() {
        //     console.log('fotoIdentidadeCamera')
        //     // 2
        //     var options = {
        //         destinationType : Camera.DestinationType.FILE_URI,
        //         sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
        //         allowEdit : false,
        //         encodingType: Camera.EncodingType.JPEG,
        //         popoverOptions: CameraPopoverOptions,
        //     };

        //     // 3
        //     $cordovaCamera.getPicture(options).then(function(imageData) {
        //         console.log('cordovaCamera.getPicture')
        //         console.log(imageData)
        //         // 4
        //         onImageSuccess(imageData);

        //         function onImageSuccess(fileURI) {
        //             createFileEntry(fileURI);
        //         }
        //         function createFileEntry(fileURI) {
        //             window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
        //         }
        //         // 5
        //         function copyFile(fileEntry) {
        //             var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png
        //             window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
        //                 fileEntry.copyTo(
        //                     fileSystem2,
        //                     newName,
        //                     onCopySuccess,
        //                     fail
        //                 );
        //             },
        //             fail);
        //         }

        //         // 6
        //         function onCopySuccess(entry) {
        //             console.log('onCopySuccess ' );
        //             console.log(entry);
        //             console.log(entry.nativeURL);
        //             var listName = entry.nativeURL.split('/');
        //             vm.fotos.push(entry.nativeURL);
        //             listaImagens.push(listName[listName.length - 1]);
        //             $scope.$apply(function () {
        //                 vm.images.push(entry.nativeURL);
        //             });
        //             vm.hasPhotoCaptured = true;
        //             //startListUpload(vm.fotos);
        //         }

        //         function fail(error) {
        //             console.log("fail: " + error.code);
        //         }

        //         function makeid() {
        //             var text = "";
        //             var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        //             for (var i=0; i < 5; i++) {
        //                 text += possible.charAt(Math.floor(Math.random() * possible.length));
        //             }
        //             return text;
        //         }

        //     }, function(err) {
        //         console.log(err);
        //     });
        // }

        // function startListUpload(photos){
        //     var showLoader = DialogFactory.showLoader('Enviando...');
        //     if(photos.length > 0) {
        //         var lastItemIndex = photos[photos.length - 1];
        //         uploadImagePath(lastItemIndex).then(function(result){
        //             if(result)
        //                 continueListUpload(vm.fotos);
        //         });
        //     } else {
        //         showLoader.close();                
        //         console.log(listaImagens)
        //         //conclusão de foto auqi
        //         setImageReleaseView(cameraPhotoName)
        //     }
        // }

        // function continueListUpload(photos){
        //     photos.pop();
        //     startListUpload(vm.fotos);
        // }

        // function uploadImagePath(path){
        //     var q = $q.defer();
        //     var guidName = MainUtils.guid();
        //     MainUtils.pathToDataURI(path, function(dataUri) {
        //         var blob = MainUtils.dataURIToBlob(dataUri);
        //         blob.name = guidName.concat('.jpg');
        //         MainUtils.uploadFile(blob).then(function(result){
        //             console.log(' MainUtils.uploadFile(blob)')
        //             console.log(result)
        //             personCheckout.Images.push(blob.name);
        //             setImageReleaseView(result);
        //             q.resolve(true);
        //         }).catch(function(result){
        //             q.resolve(false);
        //         });
        //     });
        //     return q.promise;
        // }


        /////////////////////////////////////
        /////////////////////////////////////

        function getFoneclubePhonesOnly(array) {
            return array.filter(function (number) {
                return number.IsFoneclube == true && number.DDD.length == 2 && number.Number.length >= 8 && number.LinhaAtiva;
            });
        }

        function validadeMinInfos() {
            for (var number in vm.phoneNumbersView) {
                if(!vm.phoneNumbersView[number].Nickname || vm.phoneNumbersView[number].Nickname == '') {
                    DialogFactory.showMessageDialog({titulo:'Linha ' + (number + 1), mensagem:'Nickname é um campo obrigario'});
                    return false;
                }
                if(vm.phoneNumbersView[number].IdPlanOption == '') {
                    DialogFactory.showMessageDialog({titulo:'Linha ' + (number + 1), mensagem:'A escolha do plano é obrigatória.'});
                    return false;
                }
                if (vm.phoneNumbersView[number].NovoFormatoNumero.length < 14 && vm.phoneNumbersView[number].NovoFormatoNumero.length > 0) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'O telefone: '.concat(vm.phoneNumbersView[number].NovoFormatoNumero).concat(', não pode ficar incompleto, mas pode ficar em branco.')});
                    return false;
                }
            }
            return true;
        }

        function validateUniquePriceLessThanPhones() {
            if (!vm.singlePrice) return true;
            var totalPriceValidade = 0;
            for (var number in vm.phoneNumbersView) {
                vm.plans.find(function (element, index, array) {
                    if (element.Id == vm.phoneNumbersView[number].IdPlanOption) {
                        totalPriceValidade = totalPriceValidade + element.Value / 100;
                    }
                });
            }
            var price = parseFloat(vm.singlePrice) / 100;
            if (price > totalPriceValidade) {
                DialogFactory.showMessageDialog({mensagem:'Preço único não pode ser maior do que o preço de todos os planos somados.'});
                return false;
            }
            return true;
        }

        function dontLetAddTheSameNumberTwice(arrayFiltered) {
            for(var x in arrayFiltered) {
                var twiceNumber = arrayFiltered.filter(function (element, index, array) {
                    return element.DDD == arrayFiltered[x].DDD && element.Number == arrayFiltered[x].Number;
                });
                if (twiceNumber.length > 1) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.'});
                    return false;
                }
            }
            return true;
        }

        vm.onTapSendFoneclubeData = onTapSendFoneclubeData;
        function onTapSendFoneclubeData(){
            vm.requesting = true;
            
            var cpf = UtilsService.clearDocumentNumber(vm.cpf);
            var phones = [];
            
            //valida se nickname e apelido está preenchido
            if (!validadeMinInfos()) {
                vm.requesting = false;
                //showLoader.close();
                return;
            }
            
            //valida se a soma dos planos não é maior do que o preço unico;
            if (!validateUniquePriceLessThanPhones()) {
                vm.requesting = false;
                //showLoader.close();
                return;
            }

            vm.phoneNumbersView.forEach(function (element, index, array) {
                phones.push({
                    'DDD': UtilsService.getPhoneNumberFromStringToJson(element.NovoFormatoNumero).DDD,
                    'Number': UtilsService.getPhoneNumberFromStringToJson(element.NovoFormatoNumero).Number,
                    'Portability': element.Portability,
                    'IsFoneclube': true,
                    'Nickname': element.Nickname,
                    'IdPlanOption': element.IdPlanOption
                });
            });

            var personCheckout = {
                'DocumentNumber': UtilsService.clearDocumentNumber(vm.cpf),  
                // 'NameContactParent': vm.whoinvite,
                //'IdParent': vm.IdParent, //se passar um que não existe api não guarda indicação, atualmente não retornamos erro, validar com cliente, cardozo
                //'IdContactParent': vm.IdParent, //se passar um que não existe api não guarda indicação, atualmente não retornamos erro, validar com cliente, cardozo
                'Phones': phones,
                'SinglePrice': vm.singlePrice,
                'DescriptionSinglePrice': vm.descriptionSinglePrice
            };

            // debugger;

            
            
            if (vm.IdParent) {
                personCheckout.IdParent = vm.IdParent;
                personCheckout.IdContactParent = vm.IdParent;
            }

            //busca apenas telefones foneclube e que estão ativos
            var arrayFiltered = getFoneclubePhonesOnly(phones);

            //Não deixa adicionar o mesmo numero duas vezes;
            if (!dontLetAddTheSameNumberTwice(arrayFiltered)) {
                vm.requesting = false;
                //showLoader.close();
                return;
            }
            var showLoader = DialogFactory.showLoader('Enviando dados...');
            // if (personCheckout.IdParent == 0) {
            //     delete personCheckout.IdParent;
            // }
            if (arrayFiltered.length == 0) {
                FoneclubeService.postUpdatePerson(personCheckout).then(postUpdatePersonSucess).catch(postUpdatePersonError);
            } else {
                validadeNumbers(arrayFiltered).then(function(result) {
                    var right = true;
                    for (var item in result) {
                        if (result[item].DocumentNumber && result[item].DocumentNumber != UtilsService.clearDocumentNumber(vm.cpf)) {
                            var msg = 'Você não pode cadastrar o mesmo telefone para dois clientes.</br>O número <strong>'
                                .concat(getNumberComMascara(arrayFiltered[item])).concat('</strong>, pertence ao cliente ')
                                .concat(result[item].DocumentNumber).concat(', ').concat(result[item].Name).concat('.');
                            DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: msg});
                            right = false;
                            vm.requesting = false;
                            showLoader.close();
                            break;
                        }
                    }
                    if (right) {
                        FoneclubeService.postUpdatePerson(personCheckout).then(postUpdatePersonSucess).catch(postUpdatePersonError);
                    }
                });
            }
            
            function postUpdatePersonSucess(result) {

                FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                    
                    debugger
                    try{
                        var parentDDD = vm.phoneContactParent.replace('(', '').replace(')','').replace('-', '').replace(' ', '').trim().substring(0,2);
                        var parentNumber = vm.phoneContactParent.replace('(', '').replace(')','').replace('-', '').replace(' ', '').trim().substring(2,11);
                    }
                    catch(erro){
                        var parentDDD = '';
                        var parentNumber = '';
                    }
                    
                    debugger;
                    var customerObj = {
                        'NameParent':vm.whoinvite,
                        'Id': result.Id,
                        'PhoneDDDParent':parentDDD,
                        'PhoneNumberParent':parentNumber
                    }
    
                    FoneclubeService.postCustomerParent(customerObj).then(function(result){
                        var avisopai = '';
                        if(!result)
                        {
                            avisopai = '(menos o pai)'
                        }
 
                        
                        showLoader.close();
                        if(result) { 
                            DialogFactory.dialogConfirm({title:'Cadastro Realizado', mensagem: 'Todos dados pessoais enviados, cadastro Foneclube feito com sucesso.' + avisopai, btn1: 'Ir para Home', btn2: 'Realizar Cobrança'}).then(function(result) {
                                if(result) {
                                    FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                                        if(vm.singlePrice) {
                                            result.CacheIn = vm.singlePrice;
                                            ViewModelUtilsService.showModalCustomer(result);
                                        } else {
                                            FoneclubeService.getCustomerPlans(UtilsService.clearDocumentNumber(vm.cpf)).then(function(customerPlans){
                                                var valueTotal = 0;
                                                if(customerPlans.length > 0) {
                                                    for(var i=0; i<customerPlans.length;i++){
                                                        valueTotal = valueTotal + customerPlans[i].Value;
                                                    }
                                                }
                                                result.CacheIn = valueTotal;
                                                ViewModelUtilsService.showModalCustomer(result);
                                            });
                                        }
                                    });
                                } else {
                                    FlowManagerService.changeHomeView();
                                }
                            })                    
                        }

                    }).catch(function(erro){
                        

                        showLoader.close();
                        if(result) { 
                            DialogFactory.dialogConfirm({title:'Cadastro Realizado', mensagem: 'Todos dados pessoais enviados (menos o pai), cadastro Foneclube feito com sucesso.', btn1: 'Ir para Home', btn2: 'Realizar Cobrança'}).then(function(result) {
                                if(result) {
                                    FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function(result){
                                        if(vm.singlePrice) {
                                            result.CacheIn = vm.singlePrice;
                                            ViewModelUtilsService.showModalCustomer(result);
                                        } else {
                                            FoneclubeService.getCustomerPlans(UtilsService.clearDocumentNumber(vm.cpf)).then(function(customerPlans){
                                                var valueTotal = 0;
                                                if(customerPlans.length > 0) {
                                                    for(var i=0; i<customerPlans.length;i++){
                                                        valueTotal = valueTotal + customerPlans[i].Value;
                                                    }
                                                }
                                                result.CacheIn = valueTotal;
                                                ViewModelUtilsService.showModalCustomer(result);
                                            });
                                        }
                                    });
                                } else {
                                    FlowManagerService.changeHomeView();
                                }
                            })                    
                        }
                    });
                });

                
            }
            
            function postUpdatePersonError(error) {
                vm.requesting = false;
                showLoader.close();
                DialogFactory.showMessageDialog({mensagem:error.statusText});
            }
        }
        
        function validadeNumbers(numbers){
            var promises = numbers.map(function(number) {
                return FoneclubeService.getCustomerByPhoneNumber({
                    ddd: UtilsService.clearPhoneNumber(number.DDD),
                    numero: UtilsService.clearPhoneNumber(number.Number)
                });
            });
            return $q.all(promises);
        }
        
        function setPlansList(operadora) {
            vm.selectedPlansList = [];
            for (var item in vm.plans) {
                if (operadora == 1 && vm.plans[item].Description.endsWith('VIVO')) {
                    vm.selectedPlansList.push(vm.plans[item]);
                } else if (operadora == 2 && vm.plans[item].Description.endsWith('CLARO')){
                    vm.selectedPlansList.push(vm.plans[item]);
                }
            }
        }
            
        //adiciona telefone do array que é exibido na view
        function onTapNewPhoneNumber() {
            vm.phoneNumbersView.push(
                {
                    'Id': null,
                    'DDD': '',
                    'Number': '',
                    'IsFoneclube': true,
                    'IdOperator': 0,
                    'Portability': 'false',
                    'NickName': '',
                    'IdPlanOption': 0,
                    'Inative': false,
                    'Delete': false,
                    'NovoFormatoNumero': '',
                    'operadora': '1',
                    'LinhaAtiva': true
                }
            );
        }
        //remove telefone do array que é exibido na view
        function onTapRemoveNewNumber(position) {
            DialogFactory.dialogConfirm({title:'Excluir Número', mensagem: 'Deseja realmente remover este número?'})       
            .then(function(result) {
                if (result) {
                    vm.phoneNumbersView.splice(position, 1);
                }
            })                 
        }
        
        function changePhoneNumber(position) {
            if (vm.phoneNumbersView[position].NovoFormatoNumero.length < 14) {
                return
            }
            var param = {
                ddd: UtilsService.getPhoneNumberFromStringToJson(vm.phoneNumbersView[position].NovoFormatoNumero).DDD,
                numero: UtilsService.getPhoneNumberFromStringToJson(vm.phoneNumbersView[position].NovoFormatoNumero).Number
            }
                //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
                var twiceNumber = vm.phoneNumbersView.filter(function (element, index, array) {
                    return element.NovoFormatoNumero == vm.phoneNumbersView[position].NovoFormatoNumero;
                });
                if (twiceNumber.length > 1) {
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem:'Você não pode cadastrar o mesmo telefone duas vezes para o mesmo cliente.'});
                    return;
                }
            FoneclubeService.getCustomerByPhoneNumber(param).then(function(res) {
                if (res.DocumentNumber && res.DocumentNumber != UtilsService.clearDocumentNumber(vm.cpf)) {
                    var msg = 'Este telefone já pertence ao cliente '.concat(UtilsService.getDocumentNumerWithMask(res.DocumentNumber)).concat(', ').concat(res.Name).concat('.');
                    DialogFactory.showMessageDialog({titulo:'Aviso', mensagem: msg});
                }
            });
        }
        
        function getContactParentName() {
            //TODO
            //preenchimento automatico
            // if (vm.phoneContactParent.length < 13) { 
            //     vm.IdParent = "";
            //     return 
            // }
            // var param = {
            //     ddd: UtilsService.getPhoneNumberFromStringToJson(vm.phoneContactParent).DDD,
            //     numero: UtilsService.getPhoneNumberFromStringToJson(vm.phoneContactParent).Number
            // }
            // FoneclubeService.getCustomerByPhoneNumber(param).then(function(result) {
            //     vm.IdParent = result.Id;
            //     vm.whoinvite = result.Name;
            // })
        }

        function onTapCancel(){
            vm.modal.hide();
        }
               
        function showAddNewPhone() {
            function filterPhones(number){
                return number.IsFoneclube == true;
            }
            return personCheckout.Phones.filter(filterPhones);
        }
    }

    angular.module('foneClub').directive("fileread", [function () {
        return {
            scope: {
                fileread: "=",
                base64: "="
            },
            link: function (scope, element, attributes) {
                element.bind("change", function (changeEvent) {
                    scope.$apply(function () {
                        scope.fileread = changeEvent.target.files[0];
                    });
                    var reader = new FileReader();
                    reader.onload = function (loadEvent) {
                        scope.$apply(function () {
                            scope.base64 = loadEvent.target.result;
                        });
                    }
                    reader.readAsDataURL(changeEvent.target.files[0]);
                });
            }
        }
    }]);

})();



(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CheckoutController', CheckoutController);

    CheckoutController.inject = ['$scope','PagarmeService', 'HubDevService', 'FoneclubeService', 'FileListUtil', 'MainUtils', '$q', '$cordovaCamera', '$cordovaFile', '$timeout', 'DialogFactory'];
    function CheckoutController($scope,PagarmeService, HubDevService, FoneclubeService, FileListUtil, MainUtils, $q, $cordovaCamera, $cordovaFile, $timeout, DialogFactory) {
        var vm = this;
        var personCheckout = {};
        personCheckout.Images = [];
        vm.images = [];
        vm.fotos = [];
        var listaImagens = [];
        console.log('=== CheckoutController Controller ===');

        vm.onTapPagar = onTapPagar;
        vm.statusTransaction = ''
        vm.validarCEP = validaCEP;
        vm.validarCPF = validaCPF;
        vm.fotoIdentidadeCamera = fotoIdentidadeCamera;
        vm.uploadIdentidadeGaleria = uploadIdentidadeGaleria;
        vm.uploadIdentidadeCamera = uploadIdentidadeCamera;
        vm.OperatorsSelecteds = [];
        vm.addCheckout = addCheckout;
        vm.onRegisterTap = onRegisterTap;        

        init();

        function init(){

            faseCadastro();

            FoneclubeService.getPlans().then(function(result){
                vm.plans = result;
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
           FoneclubeService.getOperators().then(function(result){
                vm.operators = result;
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                DialogFactory.showMessageDialog({mensagem:error.statusText})                
            });
        }

        function onRegisterTap(){

                //limpando, assim chega na api

                //todo fix temp
                try{
                    var cellNumber = vm.UserCellphone.replace('-', '').replace(' ', '');
                }
                catch(e){
                    DialogFactory.showMessageDialog({mensagem:'Informações pendentes'})                       
                }

                var personCheckout = {
                    'DocumentNumber': vm.register,
                    'Name': vm.name,
                    'Nickname':vm.Nickname,
                    'Email': vm.email,
                    'Born': vm.birthdate,
                    'Gender': 1,
                    'IdPagarme': 100,
                    'IdPlanOption': 4,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': vm.street,
                    'Complement': vm.complement,
                    'StreetNumber': vm.street_number,
                    'Neighborhood': vm.neighborhood,
                    'City': vm.city,
                    'State': vm.uf,
                    'Cep': vm.zipcode
                    }
                ],
                "Images": listaImagens,
                'Phones': [
                    {
                    // 'Id': 1,
                    'DDD': vm.UserDDD,
                    'Number': cellNumber
                    }
                ]
                };

                console.log(personCheckout)
            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
                DialogFactory.showMessageDialog({mensagem:'Cadastro realizado'})                    

                if(result)
                    fasePagamento();
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                DialogFactory.showMessageDialog({mensagem:error.statusText})                    
            });

        }

        /*
        function onRegisterTap(){

                personCheckout.DocumentNumber = vm.register;
                personCheckout.Name = vm.name;
                personCheckout.Email = vm.email;
                personCheckout.Born = vm.birthdate;
                personCheckout.Gender = 1; // todo
                personCheckout.IdPagarme = vm.register; //vai ser limado
                personCheckout.IdPlanOption = parseInt(vm.plan);
                personCheckout.IdContactParent = 21999999999; //vm.contactParent, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou

                personCheckout.Adresses = [
                    {
                        'Street': vm.street,
                        'Complement': vm.complement,
                        'StreetNumber': vm.street_number,
                        'Neighborhood': vm.neighborhood,
                        'City': vm.city,
                        'State': vm.uf,
                        'Cep': vm.zipcode
                    }
                ];

                personCheckout.Phones = [
                    {
                    'DDD': vm.ddd,
                    'Number': vm.number
                    }
                ];


                console.log(personCheckout)

                if(!personCheckout.DocumentNumber || !personCheckout.Name || !personCheckout.Email
                || !personCheckout.Born || !personCheckout.IdPlanOption || !personCheckout.IdContactParent
                || !personCheckout.Adresses[0].Street || !personCheckout.Adresses[0].StreetNumber
                || !personCheckout.Adresses[0].City || !personCheckout.Adresses[0].Cep || !personCheckout.Adresses[0].State
                || !personCheckout.Phones[0].DDD || !personCheckout.Phones[0].Number)
                {
                    //trocar forma de aviso
                    vm.statusTransaction = "Existe pendência de campo a ser preenchido";
                    return;
                }

            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
                vm.statusTransaction = result;
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
                vm.statusTransaction = error.statusText;
            });

        }
        */

        function uploadIdentidadeGaleria(){
            console.log('uploadIdentidadeGaleria')
            var file = FileListUtil.get();

            if(!file)
             return;

            uploadFile(file).then(function(result){
                personCheckout.Images.push(result.filename);
                listaImagens.push(result.filename);
            });

        }

        function uploadIdentidadeCamera(param){
            if(vm.fotos.length > 0)
            {
                startListUpload(vm.fotos);
            }
            else
            {
                alert('não tem foto tirada')
            }
        }


        function addCheckout(){

        console.log('addCheckout');

        //esse ´o objeto checkout que vamos montar a partir do form
        //se o document number for repetido não funciona ( ver catch )
           var personCheckout = {
                    'DocumentNumber': vm.register,
                    'Name': vm.name,
                    'Email': vm.email,
                    'Born': vm.birthdate,
                    'Gender': 1, //??
                    'IdPagarme': 100, //??
                    'IdPlanOption': vm.plan,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': vm.street,
                    'Complement': vm.complement,
                    'StreetNumber': vm.street_number,
                    'Neighborhood': vm.neighborhood,
                    'City': vm.city,
                    'State': vm.uf,
                    'Cep': vm.zipcode
                    }
                ],
                // "Images": [
                //    vm.HoldingRg.url, //aqui vão os guids
                //    vm.rg.url
                // ],
                'Phones': [
                    {
                    'DDD': vm.ddd,
                    'Number': vm.number
                    }
                ]
                };

                debugger;
            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
        }



        function validaCEP(cepInput){
            var cep = cepInput.replace(/[-.]/g , '');
            if(cep.length < 8)
                return;
            var showLoader = DialogFactory.showLoader('Tentando preencher dados...');            

            HubDevService.validaCEP(cep)
            .then(function(result){
             vm.street = result.info.logradouro;
             vm.neighborhood = result.info.bairro;
             vm.city = result.info.cidade;
             vm.uf = result.info.uf;
            showLoader.close();
             console.log(result);

            },
            function(error){
                showLoader.close();
            });
        }

         function validaCPF(cpfInput, birthdate){

                console.log(cpfInput.length)
                if(cpfInput.length <= 6)
                    return;


                var patternValidaData =/^([0-9]{2})\/([0-9]{2})\/([0-9]{4})$/;
                if(!patternValidaData.test(birthdate)){
                    DialogFactory.showMessageDialog({mensagem: 'Data Inválida'});                    
                    return;
                }


                var showLoader = DialogFactory.showLoader('Tentando preencher dados...');                

                var cpf = cpfInput.replace(/[-.,]/g , '');
                HubDevService.validaCPF(cpf,birthdate)
                .then(function(result){
                   if(result.status){
                       vm.name = result.result.nome_da_pf;
                   }
                     showLoader.close();
                },
            function(error){
            showLoader.close();
            });
        }

        function onTapPagar(){


            console.log(' --- onTapPagar ');
            vm.statusTransaction = 'Iniciando transação';



            try
            {

                var expirationMonth = vm.cardExpirationMonth;

                if(vm.cardExpirationMonth < 10)
                {
                    expirationMonth = '0' + vm.cardExpirationMonth;
                }

                var cardData = {
                    cardHolderName: vm.cardHolderName.toUpperCase(),
                    cardExpirationMonth: expirationMonth,
                    cardExpirationYear: vm.cardExpirationYear,
                    cardNumber: vm.cardNumber,
                    cardCVV:vm.cardCVV
                }
            }
            catch(erro){
                DialogFactory.showMessageDialog({mensagem: 'Existe campo vazio'});                
                return;
            }

            try
            {
                var customer = {
                    'name' : vm.name,
                    'document_number' : vm.register.toString(),
                    'email' : vm.email,
                    'birthdate' : vm.birthdate,
                    'nickname': vm.Nickname,
                    'user_cellphone': vm.UserCellphone,
                    'plan': vm.plan,
                    'actual_mobile_operators': {
                        'vivo': vm.Vivo,
                        'tim': vm.Tim,
                        'nextel': vm.Nextel,
                        'claro': vm.Claro,
                        'oi': vm.Oi,
                        'other': vm.Other
                    },
                    'front_and_back': vm.Yes == undefined ? false : vm.Yes
                    ,
                    'sugestions': vm.sugestions,
                    'foneClub_new_operators': {
                        'vivo': vm.VivoActual,
                        'claro': vm.ClaroActual
                    },
                    'invite' : {
                        'name': vm.whoinvite,
                        'number': vm.contactParent
                    },
                    'address' : {
                        'street' : vm.street,
                        'street_number' : vm.street_number,
                        'neighborhood' : vm.neighborhood,
                        'zipcode' : vm.zipcode,
                        'city': vm.city,
                        'uf': vm.uf

                    },
                    'phone' : {
                        'ddd' : vm.ddd.toString(),
                        'number' : vm.number.toString()
                    }

                }

                console.log(customer);

                var patternValidaData =/^([0-9]{2})\/([0-9]{2})\/([0-9]{4})$/;
                if(!patternValidaData.test(customer.birthdate)){
                    DialogFactory.showMessageDialog({mensagem: 'Data inválida'});                        
                    return;
                }

                var cpf = customer.document_number.replace(/[-.,]/g , '');
                HubDevService.validaCPF(cpf,customer.birthdate)
                .then(function(result){
                    console.log(result);
                    if(result.status){
                        var validaCamposReturn = {
                            success: true,
                            msg: 'Cpf válido'
                        }
                    }else{
                        DialogFactory.showMessageDialog({mensagem: 'CPF inválido'});                                       
                       return;
                    }
                });


            }
            catch(erro){
                console.log(erro)
                DialogFactory.showMessageDialog({mensagem: 'Existe campo vazio'});                        

                return;
            }

            PagarmeService.generateCardHash(cardData).then(function(cardHash){

                vm.statusTransaction = 'Criptografando dados cartão';

                PagarmeService.postTransactionCard(vm.amount, cardHash, customer)
                .then(function(result){


                    vm.statusTransaction = 'Transação em andamento';


                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                        vm.statusTransaction = 'Transação concluída';
                    })
                    .catch(function(error){
                        try{
                            DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação' + error.status});                                
                        }
                        catch(erro){
                            DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação'});                              
                        }
                        console.log(error);

                    });


                })
                .catch(function(error){
                    try{
                        DialogFactory.showMessageDialog({mensagem: 'Erro na transação'});                            
                        console.log(error.data.errors)

                        error.data.errors.forEach(function(erro) {
                            DialogFactory.showMessageDialog({mensagem: 'Erro na transação: ' + erro.message});                                
                        }, this);

                    }
                    catch(erro){
                        DialogFactory.showMessageDialog({mensagem: 'Erro na transação'});                                
                    }

                    console.log(error);
                });


            })
            .catch(function(error){
                var erro;
                for(var i in error)
                {

                    erro = error[i];
                }
                DialogFactory.showMessageDialog({mensagem: 'Erro na transação: ' + erro});      

            });

        }

         function uploadFile(file){
             console.log('-- uploadFile')
            var q = $q.defer();
            console.log(file)
            var showLoader = DialogFactory.showLoader('Enviando...');            

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                console.debug('Upload complete. Data:', data);
                DialogFactory.showMessageDialog({mensagem: 'Imagem enviada com sucesso.'});                      
                showLoader.close();
                 q.resolve(data);
            })
            .catch((err) => {
                console.error(err);
                DialogFactory.showMessageDialog({mensagem: 'Não foi possivel enviar imagens'});                
                showLoader.close();
                q.reject(error);
            });
            return q.promise;
        }

        function faseCadastro(){
            vm.faseCadastro = true;
            vm.fasePagamento = false;
        }

        function fasePagamento(){
            vm.faseCadastro = false;
            vm.fasePagamento = true;
        }

        function fotoIdentidadeCamera() {

            console.log('fotoIdentidadeCamera')
            // 2
            var options = {
                destinationType : Camera.DestinationType.FILE_URI,
                sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
                allowEdit : false,
                encodingType: Camera.EncodingType.JPEG,
                popoverOptions: CameraPopoverOptions,
            };

            // 3
            $cordovaCamera.getPicture(options).then(function(imageData) {

                console.log('cordovaCamera.getPicture')
                console.log(imageData)
                // 4
                onImageSuccess(imageData);

                function onImageSuccess(fileURI) {
                    createFileEntry(fileURI);
                }

                function createFileEntry(fileURI) {
                    window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
                }

                // 5
                function copyFile(fileEntry) {
                    var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png

                    window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
                        fileEntry.copyTo(
                            fileSystem2,
                            newName,
                            onCopySuccess,
                            fail
                        );
                    },
                    fail);
                }

                // 6
                function onCopySuccess(entry) {
                    console.log('onCopySuccess ' );
                    console.log(entry.nativeURL);
                    var listName = entry.nativeURL.split('/');

                    vm.fotos.push(entry.nativeURL);
                    listaImagens.push(listName[listName.length - 1]);

                    $scope.$apply(function () {
                        vm.images.push(entry.nativeURL);
                    });

                    startListUpload(vm.fotos);

                }

                function fail(error) {
                    console.log("fail: " + error.code);
                }

                function makeid() {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                    for (var i=0; i < 5; i++) {
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    }
                    return text;
                }

            }, function(err) {
                console.log(err);
            });


        }

        function startListUpload(photos){

            var showLoader = DialogFactory.showLoader('Enviando...');            

            if(photos.length > 0)
            {
                var lastItemIndex = photos[photos.length - 1];
                uploadImagePath(lastItemIndex).then(function(result){
                    if(result)
                        continueListUpload(vm.fotos);

                });
            }
            else
            {

                showLoader.close();
                DialogFactory.showMessageDialog({mensagem: 'Imagem enviada com sucesso'});                
            }
        }

        function continueListUpload(photos){
            photos.pop();
            startListUpload(vm.fotos);
        }

        function uploadImagePath(path){

            var q = $q.defer();

            var guidName = MainUtils.guid();

            MainUtils.pathToDataURI(path, function(dataUri) {

                var blob = MainUtils.dataURIToBlob(dataUri);
                blob.name = guidName.concat('.jpg');

                MainUtils.uploadFile(blob).then(function(result){
                    personCheckout.Images.push(blob.name);
                    q.resolve(true);
                }).catch(function(result){
                    q.resolve(false);
                });
            });

            return q.promise;
        }       


    }
})();
(function () {
    'use strict';

    angular
        .module('foneClub')
        .controller('CustomersController', CustomersController);

    // <<<<<<< HEAD
    CustomersController.inject = ['PagarmeService', 'DialogFactory', '$scope', 'ViewModelUtilsService', 'FoneclubeService', 'MainUtils', 'DataFactory', 'FlowManagerService'];
    function CustomersController(PagarmeService, DialogFactory, $scope, ViewModelUtilsService, FoneclubeService, MainUtils, DataFactory, FlowManagerService) {
        var vm = this;
        vm.data = DataFactory;
        vm.onTapCustomer = onTapCustomer;
        vm.onTapCustomerEdit = onTapCustomerEdit;
        vm.showLoader = true;
        vm.onTapRepeatLastCharge = onTapRepeatLastCharge;
        vm.onTapBoleto = onTapBoleto;
        vm.onTapBoletoPayment = onTapBoletoPayment;
        vm.onTapNewCardPayment = onTapNewCardPayment;
        vm.onTapExcluir = onTapExcluir;
        vm.CustomerAsc = CustomerAsc;
        vm.CustomerDesc = CustomerDesc;
        // =======
        //     CustomersController.inject = ['PagarmeService', '$ionicPopup', '$ionicModal', '$scope', 'ViewModelUtilsService', 'FoneclubeService', 'MainComponents', 'MainUtils', 'UtilsService'];
        //     function CustomersController(PagarmeService, $ionicPopup, $ionicModal, $scope, ViewModelUtilsService, FoneclubeService, MainComponents, MainUtils, UtilsService) {
        //         var vm = this;
        //         vm.onTapCustomer = onTapCustomer;
        //         vm.showLoader = true;
        //         vm.clearDocumentField = clearDocumentField;
        //         vm.documentClear = '';

        //         console.log('=== Customers Controller Controller ===');
        // >>>>>>> release-branch
        vm.removeCaracteres = function () {  // no need of this filter as added replace in ignoreAccents filter below
            if (!vm.search)
                return;
            //alert(vm.search);
            //return vm.search;
            //return vm.search.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~\s]/g, '');
            return vm.search.replace(/[-!#$%&'()*+,\/:;?\[\]\\\_`{|}~]/g, '');
        }

        vm.ignoreAccents = function (item) {
            //alert(item.Name);     
            if (!vm.search)
                return true;
            //alert(vm.showall);
            if (!vm.showall) {
                var text = removeAccents(item.Name.toLowerCase());
                //alert(text);
                var search = removeAccents(vm.search.toLowerCase()).replace(/[-!#$%&'()*+,\/:;?\[\]\\\_`{|}~]/g, '');
                return text.indexOf(search) > -1;
            }
            else {
                var objects = [];
                var jsonstr = JSON.stringify(item);
                var parsejson = JSON.parse(jsonstr);
                var searchterm = vm.search.replace(/\)\s/g,'').replace(/[-!#$%&'()*+,\/:;?\[\]\\\_`{|}~]/g, '');
                objects = getKeys(parsejson, searchterm);
                return objects.length > 0;
            }
        };

        //return an array of keys that match on a certain value
        function getKeys(obj, val) {
            var objects = [];
            for (var i in obj) {
                if (!obj.hasOwnProperty(i)) continue;
                if (typeof obj[i] == 'object') {
                    objects = objects.concat(getKeys(obj[i], val));
                } else if (obj[i] != null) {
                    //console.log(obj[i].toString().toLowerCase());
                    if (removeAccents(obj[i].toString().toLowerCase()).indexOf(removeAccents(val.toLowerCase())) > -1) {
                        objects.push(i);
                    }
                }
            }
            return objects;
        }

        //return an array of values that match on a certain key
        function getValues(obj, key) {
            var objects = [];
            for (var i in obj) {
                if (!obj.hasOwnProperty(i)) continue;
                if (typeof obj[i] == 'object') {
                    objects = objects.concat(getValues(obj[i], key));
                } else if (i == key) {
                    objects.push(obj[i]);
                }
            }
            return objects;
        }

        //return an array of objects according to key, value, or key and value matching
        function getObjects(obj, key, val) {
            var objects = [];
            for (var i in obj) {
                if (!obj.hasOwnProperty(i)) continue;
                if (typeof obj[i] == 'object') {
                    objects = objects.concat(getObjects(obj[i], key, val));
                } else
                    //if key matches and value matches or if key matches and value is not passed (eliminating the case where key matches but passed value does not)
                    if (i == key && obj[i] == val || i == key && val == '') { //
                        objects.push(obj);
                    } else if (obj[i] == val && key == '') {
                        //only add if the object is not already in the array
                        if (objects.lastIndexOf(obj) == -1) {
                            objects.push(obj);
                        }
                    }
            }
            return objects;
        }

        var getCustomers = $scope.$watch(function () {

            $scope.sortType = 'Nome';
            $scope.sortReverse = false;
            if (vm.data.customers !== undefined && $scope.clientList==undefined) {
                init();
            }
            $scope.clientList = vm.data.customers;

            return $scope.clientList;
        }, function (data) {
            if (data && data.length > 0) {
                vm.showLoader = false;
                getCustomers();
                if (vm.data.customersCache) {
                    vm.data.customers = angular.copy(vm.data.customersCache);
                    $scope.clientList = angular.copy(vm.data.customersCache);
                }
            }
        })
        $scope.sortType = 'Nome';
        $scope.sortReverse = false;
        $scope.clientList = vm.data.customers;




        console.log('=== Customers Controller Controller ===');
        // FoneclubeService.getCustomers().then(function(result){
        //     vm.showLoader = false;
        //     // vm.customers = result;
        //     vm.customers = result.map(function(user) {
        //         user.Phones = user.Phones.map(function(phone) {
        //             phone.phoneFull = phone.DDD.concat(phone.Number);
        //             return phone;
        //         })
        //         return user;
        //     })
        //     console.log('getCustomers')
        //     console.log(result)
        //     //post realizado com sucesso
        // })
        // .catch(function(error){
        //     console.log('catch error');
        //     console.log(error);
        //     console.log(error.statusText); // mensagem de erro para tela, caso precise
        // });

        function onTapCustomerEdit(customer, index) {
            FlowManagerService.changeEdicaoView(customer);
        }

        function onTapCustomer(customer, index) {
            console.log('customer')
            console.log(customer)
            ViewModelUtilsService.showModalCustomer(customer, index);
        }

        function clearDocumentField(documentNumber) {
            vm.documentClear = UtilsService.clearDocumentNumber(documentNumber);
        }

        function onTapNewCardPayment(customer) {
            console.log('onTapNewCardPayment');
            ViewModelUtilsService.showModalNewCardPayment(customer);
        }



        function onTapBoletoPayment(customer) {
            console.log('onTapBoleto')
            ViewModelUtilsService.showModalBoletoPayment(customer);
        }

        function onTapBoleto(customer) {
            console.log('onTapBoleto')
            ViewModelUtilsService.showModalBoleto(customer);
        }
        function onTapRepeatLastCharge(customer) {
            debugger;
            console.log('onTapRepeatLastCharge')
            FoneclubeService.getLastPaymentType(customer).then(function (result) {
                console.log(result);
                debugger;
                if (result["intIdPaymentType"] == 1) {
                    debugger;
                    /*ViewModelUtilsService.showModalRepeatBoleto(result,customer);*/
                    ViewModelUtilsService.showModalRepeatCard(result, customer);
                }
                /*else if(result["intIdPaymentType"]==1){
                    ViewModelUtilsService.showModalRepeatCard(result,customer);
                }
                else if(result["intIdPaymentType"]==3)
                    {
                        
                    }*/
            })
                .catch(function (error) {
                    console.log('catch error');
                    console.log(error);
                });
        }

        function onTapExcluir(customer) {
            var personCheckout = {
                'DocumentNumber': customer.DocumentNumber
            };
            DialogFactory.dialogConfirm({ mensagem: 'Atenção essa ação irá excluir o cliente da base foneclube, após exclusão não terá volta, deseja proseguir?' })
                .then(function (value) {
                    if (value) {
                        FoneclubeService.postDeletePerson(personCheckout).then(function (result) {
                            console.log(result);
                            if (result) {
                                DialogFactory.showMessageDialog({ message: 'Usuário foi removido com sucesso, no próximo carregamento da lista ele não será mais exibido' });
                                closeThisDialog(0);
                            }
                            else
                                DialogFactory.showMessageDialog({ message: 'Usuário não foi removido, guarde o documento dele: ' + customer.DocumentNumber });
                        })
                            .catch(function (error) {
                                console.log('catch error');
                                console.log(error);
                            });
                    }
                })
        }

        function CustomerAsc(type) {
            if (type == 'Nome') {
                $scope.sortType = 'Name';
                $scope.sortReverse = false;
                $scope.clientList = vm.data.customers;
            } else if (type == 'Hist') {
                $scope.sortType = 'LastChargeDate';
                $scope.sortReverse = false;
                $scope.clientList = vm.data.customers.filter(x => x.LastChargeDate != null);
            } else {
                $scope.sortType = 'Register';
                $scope.sortReverse = false;
                $scope.clientList = vm.data.customers.filter(x => x.Register != null);
            }
            FoneclubeService.getPlans().then(function (result) {
                vm.plans = result;
            });
        }

        function CustomerDesc(type) {
            if (type == 'Nome') {
                $scope.sortType = '-Name';
                $scope.sortReverse = false;
                $scope.clientList = vm.data.customers;
            } else if (type == 'Hist') {
                $scope.sortType = '-LastChargeDate';
                $scope.sortReverse = false;
                $scope.clientList = vm.data.customers.filter(x => x.LastChargeDate != null);
            } else {
                $scope.sortType = '-Register';
                $scope.sortReverse = false;
                $scope.clientList = vm.data.customers.filter(x => x.Register != null);
            }
        }

        function init() {
            for(var i =0;i<vm.data.customers.length;i++){
                var customer = vm.data.customers[i];
                FoneclubeService.getHistoryPayment(customer.Id).then(function (result) {
                    console.log('FoneclubeService.getHistoryPayment');
                    console.log(result);
                    vm.histories = result;
                    var date = "sfsfsdf" ;
                    for (var i in vm.histories) {
                        var history = vm.histories[i];
                        
                    }
                    customer.datapgt = date;

                })
                    .catch(function (error) {
                        console.log('catch error');
                        console.log(error);
                    });
    
            }
        }

        
    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('HomeController', HomeController);

    HomeController.inject =
    [
        '$scope',
        '$cordovaCamera',
        '$cordovaFile',
        '$ionicLoading',
        'FileListUtil',
        'MainUtils',
        'FoneclubeService',
        '$q',
        '$rootScope'
    ];

    function HomeController($scope, $cordovaCamera, $cordovaFile, $ionicLoading, FileListUtil, MainUtils, FoneclubeService, $q, $rootScope) {
        var vm = this;
        console.log('=== HomeController Controller ===');
        vm.images = [];
        vm.fotos = [];
        vm.addCheckout = addCheckout;
        vm.addPhoto = addPhoto;
        vm.urlForImage = urlForImage;
        vm.testeData = testeData;        

        var imageUploader = new ImageUploader();
        vm.result = {};
        vm.uploadGaleria = uploadGaleria;

        function addCheckout(){

            console.log('addCheckout');

            //esse ´o objeto checkout que vamos montar a partir do form
            //se o document number for repetido não funciona ( ver catch )
           var personCheckout = {
                    'DocumentNumber': '12345678946',
                    'Name': 'Teste de pessoa',
                    'Email': 'teste@teste.com.br',
                    'Born': '08/11/1988',
                    'Gender': 1,
                    'IdPagarme': 100,
                    'IdPlanOption': 4,
                    'IdContactParent': 999999999, //tem usuáro cadastrado pra teste com esse numero pra ser indicador, é o número da pessoa que indicou
                    'Adresses': [
                    {
                    'Street': 'sample string 1',
                    'Complement': 'sample string 2',
                    'StreetNumber': '100',
                    'Neighborhood': 'sample string 4',
                    'City': 'sample string 5',
                    'State': 'sample string 6',
                    'Cep': 'sample string 7'
                    }
                ],
                "Images": [
                    "sample string 1", //aqui vão os guids
                    "sample string 2"
                ],
                'Phones': [
                    {
                    'Id': 1,
                    'DDD': '21',
                    'Number': '22222222'
                    }
                ]
                };


            FoneclubeService.postCheckout(personCheckout).then(function(result){
                console.log(result);
                //post realizado com sucesso
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
                console.log(error.statusText); // mensagem de erro para tela, caso precise
            });
        }

        //TODO MainUtils.guid()
        // colocar nome das imagens id de usuario mais guid
        // remover imagens caso de troca

        function urlForImage(imageName) {

            var name = imageName.substr(imageName.lastIndexOf('/') + 1);
            var trueOrigin = cordova.file.dataDirectory + name;

            console.log("get correct path for image " + imageName);
            console.log("origin " + trueOrigin);
            return trueOrigin;
        }

        function addPhoto() {

            console.log('addPhoto')
            // 2
            var options = {
                destinationType : Camera.DestinationType.FILE_URI,
                sourceType : Camera.PictureSourceType.CAMERA, // Camera.PictureSourceType.PHOTOLIBRARY
                allowEdit : false,
                encodingType: Camera.EncodingType.JPEG,
                popoverOptions: CameraPopoverOptions,
            };

            // 3
            $cordovaCamera.getPicture(options).then(function(imageData) {

                console.log('cordovaCamera.getPicture')
                console.log(imageData)
                // 4
                onImageSuccess(imageData);

                function onImageSuccess(fileURI) {
                    createFileEntry(fileURI);
                }

                function createFileEntry(fileURI) {
                    window.resolveLocalFileSystemURL(fileURI, copyFile, fail);
                }

                // 5
                function copyFile(fileEntry) {
                    var newName = MainUtils.guid() + '.jpg'; //todo fazer tratamento pra nome jpg /png

                    window.resolveLocalFileSystemURL(cordova.file.dataDirectory, function(fileSystem2) {
                        fileEntry.copyTo(
                            fileSystem2,
                            newName,
                            onCopySuccess,
                            fail
                        );
                    },
                    fail);
                }

                // 6
                function onCopySuccess(entry) {
                    console.log('onCopySuccess ' );
                    console.log(entry.nativeURL);
                    vm.fotos.push(entry.nativeURL);


                    $scope.$apply(function () {
                        vm.images.push(entry.nativeURL);
                    });
                }

                function fail(error) {
                    console.log("fail: " + error.code);
                }

                function makeid() {
                    var text = "";
                    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

                    for (var i=0; i < 5; i++) {
                        text += possible.charAt(Math.floor(Math.random() * possible.length));
                    }
                    return text;
                }

            }, function(err) {
                console.log(err);
            });


        }


        ////////////////////////////
        function uploadGaleria(param) {
            var file = FileListUtil.get();
            uploadFile(file);
        };

        function testeData(){
            if(vm.fotos.length > 0)
            {
                startListUpload(vm.fotos);
            }
            else
            {
                alert('não tem foto tirada')
            }
        }

        function startListUpload(photos){

            $ionicLoading.show({
                template: 'Uploading...'
            });

            if(photos.length > 0)
            {
                var lastItemIndex = photos[photos.length - 1];
                uploadImagePath(lastItemIndex).then(function(result){
                    if(result)
                        continueListUpload(vm.fotos);

                });
            }
            else
            {
                $ionicLoading.hide();
            }
        }

        function continueListUpload(photos){
            photos.pop();
            startListUpload(vm.fotos);
        }

        function uploadImagePath(path){

            var q = $q.defer();

            var guidName = MainUtils.guid();

            MainUtils.pathToDataURI(path, function(dataUri) {

                var blob = MainUtils.dataURIToBlob(dataUri);
                blob.name = guidName.concat('.jpg');

                MainUtils.uploadFile(blob).then(function(result){
                    q.resolve(true);
                }).catch(function(result){
                    q.resolve(false);
                });
            });

            return q.promise;
        }

        function uploadFile(file){

            console.log('upload file')
            console.log(file)

            $ionicLoading.show({
                template: 'Carregando...'
            });

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                console.debug('Upload complete. Data:', data);
                $ionicLoading.hide();
                $scope.$digest();
            })
            .catch((err) => {
                console.error(err);
                $ionicLoading.hide();
            });
        }

      window.location.href = "#/tab/customers";

        ////////////////////////////

    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CheckoutCustomerModalController', CheckoutCustomerModalController);

    CheckoutCustomerModalController.inject = ['ViewModelUtilsService', 'PagarmeService'];
    function CheckoutCustomerModalController(ViewModelUtilsService, PagarmeService) {
        var vm = this;
        var customer = ViewModelUtilsService.modalData;
        vm.onTapCard = onTapCard;
        vm.onTapPagar = onTapPagar;
        vm.cancelarPagamento = etapaEscolhaCartao;        
        initCardList();
        etapaEscolhaCartao();

        function initCardList(){
            console.log(customer.id)
            PagarmeService.getCard(customer.id)
            .then(function(result){
                vm.cards = result;
                console.log(result)
            })
            .catch(function(error){
                console.log(error);
                vm.message = 'falha ao recuperar cartão';
            });

        }

        function onTapCard(card){

            vm.card = card;
            etapaQuantia();

        }

        function onTapPagar(){

            vm.message = 'Transação iniciada';
            var customer;

            if(!vm.customer.address || !vm.customer.phone || !vm.customer.email || !vm.customer.document_number || !vm.customer.name)
            {
                customer = {
                    'name' : vm.customer.name,
                    'document_number' : vm.customer.document_number,
                    'email' : vm.customer.email
                    ,
                    'address' : {
                        'street' : 'empty',
                        'street_number' : '10',
                        'neighborhood' : 'empty',
                        'zipcode' : '01452000'
                    },
                    'phone' : {
                        'ddd' : '00',
                        'number' : '000000000'
                    }
                }
                //vm.message = 'Usuário incompleto';
            }

            console.log('on tap pagar');
            console.log(vm.card.id);
            console.log(vm.customer);
            console.log(vm.amount);
            console.log(customer);

             PagarmeService.postTransactionExistentCard(vm.amount, vm.card.id, customer)
             .then(function(result){
                console.log('nova transac ' + result);
                vm.message = 'Transação efetuada';
                PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){

                        vm.message = 'Transação concluída';
                    })
                    .catch(function(error){
                        try{
                            vm.message = 'Erro na captura da transação' + error.status;
                        }
                        catch(erro){
                            vm.message = 'Erro na captura da transação'
                        }
                        console.log(error);

                    });
             })


            console.log(customer)


        }

        function etapaEscolhaCartao(){
            vm.etapaEscolhaCartao = true;
            vm.etapaQuantia = false;
            vm.amount = '';
        }

        function etapaQuantia(){
            vm.etapaEscolhaCartao = false;
            vm.etapaQuantia = true;
        }
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CustomerListController', CustomerListController);

    CustomerListController.inject = ['PagarmeService', '$ionicPopup', '$ionicModal', '$scope', 'ViewModelUtilsService'];
    function CustomerListController(PagarmeService, $ionicPopup, $ionicModal, $scope, ViewModelUtilsService) {
        var vm = this;
        vm.onTapCustomer = onTapCustomer;
        vm.showLoader = true;
        
        console.log('=== CustomerListController Controller ===');    

        PagarmeService.getCustomers()
        .then(function(result){
            console.log(result);
            vm.showLoader = false;
            vm.customers = result;            
        })
        .catch(function(error){
            console.log(error);
        });

        function onTapCustomer(customer){
            console.log('onTapCustomer')
            console.log(customer);
             ViewModelUtilsService.showModal(customer);
        }



        /**$ionicModal.fromTemplateUrl('templates/modal.html', {
    scope: $scope
  }).then(function(modal) {
    $scope.modal = modal;
  }); */

/*
        $ionicModal.fromTemplateUrl('modules/lista-customer/modal.html', {
            scope: $scope
        }).then(function(modal) {
            $scope.modal = modal;
        });*/







        /*

        //get cards ok
        PagarmeService.getCards()
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //get customers ok
        PagarmeService.getCustomers()
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //get card ok 145059
        PagarmeService.getCard(145059)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        //post boleto
        PagarmeService.postBoleto(6000)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });

        */




        /*
        var cardData = {
            cardHolderName:'Desenv C Teste',
            cardExpirationMonth:11,
            cardExpirationYear:17,
            cardNumber:'4716329201322757',
            cardCVV:'162'
        }

        PagarmeService.generateCardHash(cardData).then(function(cardHash){
            console.log(cardHash);
            /*
            PagarmeService.postTransactionCard(7000, cardHash)
            .then(function(result){
                console.log(result);
            })
            .catch(function(error){
                console.log(error);
        });


        })
        .catch(function(error){
            //mensagem erro ao inserir dados
            console.log(error);
        });
        */





/*
        PagarmeService.postTransactionCard(7000, cardHash)
        .then(function(result){
            console.log(result);
        })
        .catch(function(error){
            console.log(error);
        });
        */
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('LoginController', LoginController);

    LoginController.inject = ['FlowManagerService', '$scope', 'FireBaseManagerUtil', 'MainUtils', 'DialogFactory'];
    function LoginController(FlowManagerService, $scope, FireBaseManagerUtil, MainUtils, DialogFactory) {
        var vm = this;
        vm.login = login;

        function validaLogin(){

            var users = FireBaseManagerUtil.getUsers();

            for(var i in users){
                var user = users[i];
                if(user.user == vm.user && user.password == vm.password)
                {
                    MainUtils.setAgent(user.user);
                    return true;
                }

            }

            return false;
        }

        function login(){            
            if(validaLogin())
            {
                FlowManagerService.changeHomeView();
            }
            else
            {
                DialogFactory.showMessageDialog({mensagem: 'Usuário ou senha incorretos', titulo: 'Alerta'});                
            }            
        }

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('MassChargingController', MassChargingController);

    MassChargingController.inject = ['$scope', 'FoneclubeService', 'PagarmeService', '$q', 'UtilsService', '$timeout'];

    function MassChargingController($scope, FoneclubeService, PagarmeService, $q, UtilsService, $timeout) {
        var vm = this;
        vm.searchMassCharging = searchMassCharging
        vm.viewName = "Cobrança em massa";
        vm.doMassCharge = doMassCharge;
        //vm.loading = true;

        vm.checkedAll = false;
        vm.checkAllCustomers = checkAllCustomers;
        vm.hasOneChecked = hasOneChecked;

        vm.chargeCustomer = chargeCustomer;
        vm.plans = [];
        vm.year = new Date().getFullYear();
        vm.month = new Date().getMonth() + 1;

        init();
        function init() {
            vm.loading = true;
            vm.paymentMethod = [
                { id:'boletoBS', description: 'Boleto BS' },
                { id:'boletoPG', description: 'Boleto PG' },
                { id:'cartao', description: 'Cartão de Crédito' }
            ]
            // FoneclubeService.getPlans().then(function(result){
            //     console.log(result);
            //     vm.plans = result;
            // });
            FoneclubeService.getChargingClients({month: vm.month, year: vm.year}).then(function(result) {
                // for (var i in result) {
                //     result[i].Ammount = 0;
                //     for (var x in result[i].Phones) {
                //         result[i].Ammount = parseFloat(result[i].Phones[x].Ammount) + parseFloat(result[i].Ammount);
                //     }
                // }
                console.log(result);
                vm.lista = result;
                vm.loading = false;
            }).catch(function (error) {
                vm.lista = [];
                vm.loading = false;
                console.log(error);
            });
        }

        function searchMassCharging() {
            init()
        }

        function chargeCustomer(customer) {

            //Realizar Cobrança;
            if (!customer.statusOnCharging) {
                customer.statusOnCharging = 1;
                return;
            }

            //Confirmar Cobrança;
            if (customer.statusOnCharging == 1) {
                if (!validationsCustomer(customer)) {
                    delete customer.statusOnCharging;
                    return;
                }
                if (!validateOperation(customer)) {
                    delete customer.statusOnCharging;
                    return;
                }
                customer.statusOnCharging = 2;
                processCharging(customer);
                return;
            }

            //Envia mensagem de Erro;
            if (customer.statusOnCharging == 4) {
                showSimpleToast(customer.errorMsg);
            }
        }

        function processCharging(customer) {
            if (customer.typeCharging == 'boletoBS') {
                chargeBoletoBS(customer).then(function (result) {
                    if (result.result == 'sucesso') {
                        customer.statusOnCharging = 3;
                    } else {
                        customer.statusOnCharging = 4;
                        customer.checked = false;
                        customer.errorMsg = error;
                        showSimpleToast(error);
                    }
                }).catch(function (error) {
                    customer.statusOnCharging = 4;
                    customer.checked = false;
                    customer.errorMsg = error;
                    showSimpleToast(error);
                })
            } else if (customer.typeCharging == 'boletoPG') {
                if (!customer.IdPagarme) {
                    showSimpleToast('Não há conta pagar-me para o cliente: ' + customer.Name + ", CPF: " + customer.DocumentNumber);
                    delete customer.statusOnCharging;
                    return;
                }
                chargeBoletoPG(customer).then(function (result) {
                    if (result.result == 'sucesso') {
                        customer.statusOnCharging = 3;
                    } else {
                        showSimpleToast(reject.msg);
                        customer.errorMsg = reject.msg;
                        customer.checked = false;
                        if (reject.block) {
                            customer.statusOnCharging = 4;
                        } else {
                            delete customer.statusOnCharging;
                        }
                    }
                }).catch(function (error) {
                    customer.statusOnCharging = 4;
                    customer.checked = false;
                    showSimpleToast(error);
                });
            } else if (customer.typeCharging == 'cartao') {
                if (!customer.IdPagarme) {
                    showSimpleToast('Não há conta pagar-me para o cliente: ' + customer.Name + ", CPF: " + customer.DocumentNumber);
                    delete customer.statusOnCharging;
                    return;
                }
                chargeCreditCart(customer).then(function (result) {
                    if (result.result == 'sucesso') {
                        customer.statusOnCharging = 3;
                    } else {
                        showSimpleToast(reject.msg);
                        customer.errorMsg = reject.msg;
                        customer.checked = false;
                        if (reject.block) {
                            customer.statusOnCharging = 4;
                        } else {
                            delete customer.statusOnCharging;
                        }
                    }
                }).catch(function (error) {
                    customer.statusOnCharging = 4;
                    customer.checked = false;
                    showSimpleToast(error);
                });
            }
        }

        function getAPIParansClient(customer, PaymentType) {
            return {
                "ClientId" : customer.Id,
                "Ammount": customer.Charging.Ammount.replace('.', ''),
                "Comment": customer.commentBoleto || '',
                "ChargingComment": customer.Charging.ChargingComment || '',
                "PaymentType": PaymentType
            }
        }
        

        function chargeBoletoBS(customer) {
            var defer = $q.defer();
            var param = getAPIParansClient(customer, 3);
            FoneclubeService.postChargingClient(vm.year, vm.month, param).then(function (result) {
                defer.resolve({result: 'sucesso', customerId: customer.Id});
            }).catch(function (error) {
                defer.resolve({result: 'fail', errorMsg: error.data.Message, customerId: customer.Id});
            });
            return defer.promise; 
        }

        function chargeBoletoPG(customer) {
            var defer = $q.defer();
            var foneclubeCustomer = getAPIParansClient(customer, 2);
            var pagarmeCustomer = {
                'name' : customer.Name,
                'document_number' : customer.DocumentNumber,
                'email' : customer.Email,
                'address' : getAddress(customer),
                'phone' : getContactPhone(customer)
            }
            var instructions = 'FoneClub - 2017'

            FoneclubeService.postChargingClient(vm.year, vm.month, foneclubeCustomer).then(function (result) {
                customer.transactionId = result;
                PagarmeService.postBoleto(foneclubeCustomer.Ammount, instructions, pagarmeCustomer).then(function(result) {
                    PagarmeService.postCaptureTransaction(result.token, foneclubeCustomer.Ammount).then(function(resultCapture) {
                        try{
                            PagarmeService.notifyCustomerBoleto(resultCapture.id, pagarmeCustomer.email).then(function(resultNotify) {
                                console.log('Boleto gerado com sucesso');
                            }).catch(function(error) {
                                console.log('Produção funciona');
                            });
                        } catch(erro){
                            console.log(erro);
                            console.log('Produção funciona');
                        }
                        //saveHistoryPayment(resultCapture.id, resultCapture.acquirer_id);
                        //CONFIRMAR COM CARDOZO O LOCAL DESSA PROXIMA CHAMADA;
                        var confirmCharge = {
                            'ClientId': customer.Id,
                            'PaymentStatus': foneclubeCustomer.PaymentType,
                            'TransactionComment': "OK",
                            'BoletoId': resultCapture.id,
                            'AcquireId': resultCapture.acquirer_id
                        }
                        FoneclubeService.postChargingClientCommitCard(vm.year, vm.month, customer.transactionId, confirmCharge).then(function (result) {
                            console.log(result);
                            defer.resolve({result: 'sucesso', customerId: customer.Id});
                        }).catch(function (error) {
                            defer.resolve({result: 'sucesso', customerId: customer.Id});
                            console.log(error);
                            console.log("Houve erro mas a cobrança foi realizada");//Falar com Cardozo;
                        });
                    }).catch(function(error) {
                        defer.resolve({result: 'fail', block: true , msg: 'Erro na captura da transação ' + error.status, customerId: customer.Id});
                    });
                }, function (error) {
                    defer.resolve({result: 'fail', block: true , msg: 'Erro ao realizar transação, Cliente: ' + customer.Name + ", CPF: " + customer.DocumentNumber + 'Msg Pagarme: ' + error.data.errors[0].message, customerId: customer.Id});
                }).catch(function (error) {
                    defer.resolve({result: 'fail', block: true , msg: 'Erro ao realizar transação, Cliente: ' + customer.Name + ", CPF: " + customer.DocumentNumber + 'Msg Pagarme: ' + error.data.errors[0].message, customerId: customer.Id});
                });
            }).catch(function() {
                defer.resolve({result: 'fail', block: true , msg: error, customerId: customer.Id});
            });
            return defer.promise;
        }

        function chargeCreditCart(customer) {
            var defer = $q.defer();
            var foneclubeCustomer = getAPIParansClient(customer, 1);
            var pagarmeCustomer = {
                'name' : customer.Name,
                'document_number' : customer.DocumentNumber,
                'email' : customer.Email,
                'address' : getAddress(customer),
                'phone' : getContactPhone(customer)
            }

            var card = null;
            PagarmeService.getCard(customer.IdPagarme).then(function(result) {
                if (result.length == 0) {
                    defer.resolve({result: 'fail', block: true, msg:'Não há cartão de crédito cadastrado para o cliente: ' + customer.Name + ", CPF: " + customer.DocumentNumber, customerId: customer.Id});
                } else {
                    card = result[0];
                    FoneclubeService.postChargingClient(vm.year, vm.month, foneclubeCustomer).then(function (result) {
                        console.log(result);
                        customer.transactionId = result;
                        PagarmeService.postTransactionExistentCard(foneclubeCustomer.Ammount, card.id, pagarmeCustomer).then(function(result) {
                            PagarmeService.postCaptureTransaction(result.token, foneclubeCustomer.Ammount).then(function(result) {
                                //saveHistoryPayment();
                                var confirmCharge = {
                                    'ClientId': customer.Id,
                                    'PaymentStatus': 2,
                                    'TransactionComment': "OK"
                                }
                                FoneclubeService.postChargingClientCommitCard(vm.year, vm.month, customer.transactionId, confirmCharge).then(function (result) {
                                    console.log(result);
                                    defer.resolve({result: 'sucesso', customerId: customer.Id});
                                }).catch(function (error) {
                                    defer.resolve({result: 'sucesso', customerId: customer.Id});
                                    console.log(error);
                                    console.log("Houve erro mas a cobrança foi realizada");//Falar com Cardozo;
                                });
                            }).catch(function(error){
                                try{
                                    defer.resolve({result: 'fail', block: true , msg: 'Erro na captura da transação' + error.status, customerId: customer.Id});
                                } catch(erro) {
                                    defer.resolve({result: 'fail', block: true , msg: 'Erro na captura da transação', customerId: customer.Id});
                                }
                            });
                        }).catch(function (error) {
                            defer.resolve({result: 'fail', block: true , msg: 'Erro ao realizar transação, Cliente: ' + customer.Name + ", CPF: " + customer.DocumentNumber + 'Msg Pagarme: ' + error.data.errors[0].message, customerId: customer.Id});
                        });
                    }).catch(function (error) {
                        defer.resolve({result: 'fail', block: true , msg: error, customerId: customer.Id});
                    });
                }
            }).catch(function(error){
                defer.resolve({result: 'fail', block: false, msg:'falha ao recuperar cartão do cliente: ' + customer.Name + ", CPF: " + customer.DocumentNumber, customerId: customer.Id});
            });
            return defer.promise;
        }

        // Utils =====================================================================================================
        function validationsCustomer(customer) {
            if (!getAddress(customer) || !getContactPhone(customer)) {
                return false;
            }
            if (!customer.Email) {
                showSimpleToast("O Cliente: " + customer.Name +", deve ter cadastrado o E-mail.");
                return false;
            }
            return true;
        }
        function validateOperation(customer) {
            if (!customer.typeCharging || customer.typeCharging.length == 0) {
                showSimpleToast("Selecione uma forma de pagamento para o cliente: " + customer.Name + ".");
                return false;
            }
            if (customer.typeCharging != 'cartao' && !customer.commentBoleto && customer.commentBoleto.length == 0) {
                showSimpleToast("Para cobranças por boleto é necessário informar o 'Comentário Boleto'.");
                return false;
            }
            if (!customer.Charging.Ammount || customer.Charging.Ammount == 0) {
                showSimpleToast("Obrigátio informar a quantia para cobrança. Cliente: " + customer.Name + ".");
                return false;
            }
            return true;
        }
        function getAddress(customer) {
            var address = customer.Adresses;
            if (!address || address.length == 0) {
                console.log('É necessário cadastrar um Endereço para este cliente: ' + customer.Name + ", CPF: " + customer.DocumentNumber);
                showSimpleToast('É necessário cadastrar um Endereço para este cliente: ' + customer.Name + ", CPF: " + customer.DocumentNumber);
                return null;
            } else {
                return {
                    'street' : address[0].Street,
                    'street_number' : address[0].StreetNumber,
                    'neighborhood' : address[0].Neighborhood,
                    'zipcode' : address[0].Cep,
                    'city': address[0].City,
                    'uf': address[0].State
                }
            }
        }
        function getContactPhone(customer){
            var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
            if (!contacts || contacts.length == 0 || contacts[0].DDD == '' || contacts[0].Number == '') {
                console.log('É necessário cadastrar Telefone de Contato para este cliente: ' + customer.Name + ", CPF: " + customer.DocumentNumber);
                showSimpleToast('É necessário cadastrar Telefone de Contato para este cliente: ' + customer.Name + ", CPF: " + customer.DocumentNumber);
                return null;
            } else {
                return {
                    'ddd' : contacts[0].DDD.toString(),
                    'number' : contacts[0].Number.toString()
                }
            }
        }
        function getOperator(id) {
            return vm.plans.find(function (element) {
                return element.id == id;
            });
        }

        vm.toastShow = false;
        vm.toastTimeOut = null;
        vm.toastMsg = ""
        function showSimpleToast(msg) {
            $timeout.cancel(vm.toastTimeOut);
            vm.toastMsg = msg;
            vm.toastShow = true;
            vm.toastTimeOut = $timeout(function () {
                vm.toastMsg = "";
                vm.toastShow = false;
            }, 3000);
        }






































        // OLD



        // function validationPhone(phone) {
        //     if (!phone.typeCharging) {
        //         showSimpleToast("É obrigatório informar o tipo de cobrança. Linha: " + phone.NickName);
        //         return false;
        //     } else if ((phone.typeCharging == 'boletoBS' || phone.typeCharging == 'boletoPG') && (!phone.commentBoleto || phone.commentBoleto.length == 0 )) {
        //         showSimpleToast("É obrigatório informar comentário para cobrança por boleto. Linha: " + phone.NickName);
        //         return false;
        //     } else if (!phone.Chargings[0].Ammount) {
        //         showSimpleToast("É obrigatório informar a quantia para cobrança. Linha: " + phone.NickName);
        //         return false;
        //     }
        //     return true;
        // }













        




        //326405 pagarme
        //postChargingClientCommitCard

        // 1 = confirmação;
        // 2 = processando;
        // 3 = sucesso;
        // 4 = erro;

        function checkAllCustomers() {
            vm.checkedAll = !vm.checkedAll;
            for (var i in vm.lista) {
                if (!vm.lista[i].statusOnCharging && !vm.lista[i].Charging.Charged) {
                    vm.lista[i].checked = vm.checkedAll;
                }
            }
        }

        function hasOneChecked() {
            for (var x in vm.lista) {
                if (vm.lista[x].checked) {
                    return true;
                    break
                }
            }
            return false;
        }

        function doMassCharge() {
            vm.resquenting = true;
            var lista = angular.copy(vm.lista)

            var toChargeList = lista.filter(function (element) {
                return element.checked == true && element.Charging.Charged != true;
            });

            if (toChargeList.length == 0) {
                showSimpleToast("Selecione ao menos uma linha.");
                vm.resquenting = false;
                return;
            }

            for (var i in toChargeList) {
                if (!validationsCustomer(toChargeList[i])) {
                    vm.resquenting = false;
                    return;
                }
            }

            var promises = [];
            angular.forEach(toChargeList , function(customer) {
                var promise = null
                if (customer.typeCharging == 'boletoBS') {
                    promise = chargeBoletoBS(customer);
                } else if (customer.typeCharging == 'boletoPG') {
                    promise = chargeBoletoPG(customer);
                } else if (customer.typeCharging == 'cartao') {
                    promise = chargeCreditCart(customer);
                }
                promises.push(promise);
            });
                
            $q.all(promises).then(function (promisesResult) {
                for(var i in promisesResult) {
                    if (promisesResult[i].result == 'sucesso') {
                        var customer = vm.lista.find(function (customerRaiz) {
                            return promisesResult[i].customerId == customerRaiz.Id;
                        });
                        customer.statusOnCharging = 3;
                        customer.checked = false;
                    } else {
                        var customer = vm.lista.find(function (element) {
                            return promisesResult[i].customerId == element.Id;
                        });
                        customer.errorMsg = promisesResult[i].msg;
                        customer.checked = false;
                        if (promisesResult[i].block) {
                            customer.statusOnCharging = 4;
                        } else {
                            delete customer.statusOnCharging;
                        }
                    }
                }
                vm.resquenting = false;
            }).catch(function (promisesResult) {
                var customer = vm.lista.find(function (element) {
                    return promisesResult.customerId == element.Id;
                });
                customer.errorMsg = promisesResult.msg;
                customer.checked = false;
                if (promisesResult.block) {
                    customer.statusOnCharging = 4;
                } else {
                    delete customer.statusOnCharging;
                }
                vm.resquenting = false;
            });
        }

        // function chargeWholeCustomer(customer, phones) {
        //      if (!customer.statusOnCharging) {
        //         customer.Ammount = getTotalAmmountCustomer(phones);
        //         if (customer.Ammount == 0) {
        //             showSimpleToast('Não há cobranças a serem realizadas para este cliente.');
        //             return;
        //         }
        //         customer.statusOnCharging = 11
        //     } else if (customer.statusOnCharging == 11) {
        //         customer.statusOnCharging = 1
        //     } else if (customer.statusOnCharging == 1) {
        //         customer.statusOnCharging = 2
        //         if (!validationsCustomer(customer)) {
        //             customer.statusOnCharging = 11
        //             return;
        //         }
        //         if (!customer.typeCharging) {
        //             showSimpleToast("É obrigatório informar o tipo de cobrança.");
        //             customer.statusOnCharging = 11
        //             return;
        //         } else if ((customer.typeCharging == 'boletoBS' || customer.typeCharging == 'boletoPG') && (!customer.commentBoleto || customer.commentBoleto.length == 0 )) {
        //             showSimpleToast("É obrigatório informar comentário para cobrança por boleto.");
        //             customer.statusOnCharging = 11
        //             return;
        //         } else if (!customer.Ammount) {
        //             showSimpleToast("É obrigatório informar a quantia para cobrança.");
        //             customer.statusOnCharging = 11
        //             return;
        //         }
        //         if (customer.typeCharging == 'boletoBS') {
        //             chargeBoletoBS(customer, { Chargings: [{Ammount: customer.Ammount}], commentBoleto: customer.commentBoleto}).then(function (result) {
        //                 customer.statusOnCharging = 3;
        //             }).catch(function (error) {
        //                 customer.statusOnCharging = 4;
        //                 customer.errorMsg = error;
        //                 showSimpleToast(error);
        //             })
        //         } else if (customer.typeCharging == 'boletoPG') {
        //             chargeBoletoPG(customer, { Chargings: [{Amount: customer.Ammount}], commentBoleto: customer.commentBoleto}).then(function (result) {
        //                 customer.statusOnCharging = 3;
        //             }, function (reject) {
        //                 showSimpleToast(reject.msg);
        //                 customer.errorMsg = reject.msg;
        //                 if (reject.block) {
        //                     customer.statusOnCharging = 4;
        //                 } else {
        //                     delete customer.statusOnCharging;
        //                 }
        //             }).catch(function (error) {
        //                 customer.statusOnCharging = 4;
        //                 showSimpleToast(error);
        //             });
        //         } else if (customer.typeCharging == 'cartao') {
        //             chargeCreditCart(customer, { Chargings: [{Amount: customer.Ammount}], commentBoleto: customer.commentBoleto}).then(function (result) {
        //                 customer.statusOnCharging = 3;
        //             }, function (reject) {
        //                 showSimpleToast(reject.msg);
        //                 customer.errorMsg = reject.msg;
        //                 if (reject.block) {
        //                     customer.statusOnCharging = 4;
        //                 } else {
        //                     delete customer.statusOnCharging;
        //                 }
        //             }).catch(function (error) {
        //                 customer.statusOnCharging = 4;
        //                 showSimpleToast(error);
        //             });
        //         }
        //      } else if (customer.statusOnCharging == 4) {
        //         showSimpleToast(customer.errorMsg);
        //     }
        // }

        // function getTotalAmmountCustomer(phones) {
        //     var total = 0;
        //     for (var i in phones) {
        //         if (!phones[i].Chargings[0].Charged) {
        //             total = total + phones[i].Chargings[0].Ammount;
        //         }
        //     }
        //     return total;
        // }
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('FlowManagerService', FlowManagerService);

    FlowManagerService.inject = ['LocationService', 'FireBaseManagerUtil', '$window', 'localStorageService', '$rootScope'];
    function FlowManagerService(LocationService, FireBaseManagerUtil, $window, localStorageService, $rootScope) {

        this.changeLoginView = changeLoginView;
        this.changeHomeView = changeHomeView;
        this.changeCheckoutView = changeCheckoutView;
        this.changeEdicaoView = changeEdicaoView;
        this.changeCustomersView = changeCustomersView;
        this.changeOrdemServicoView = changeOrdemServicoView;
        this.changeListCustomer = changeListCustomer;
        this.changeCadastro = changeCadastro;
        this.changeMassChargingView = changeMassChargingView;
        this.changeStatusChargingView = changeStatusChargingView;
        this.changeAllPhoneLinesView = changeAllPhoneLinesView;
        this.goBack = goBack;

        function changeLoginView(){
            LocationService.change('login');                        
        }

        function changeCheckoutView(){
            LocationService.change('tabs.checkout-view');
        }

        function changeHomeView(){
            localStorageService.set('menuItemActive', 'home');
            LocationService.change('tabs.home');
            $rootScope.$broadcast('changeMenuItem', 'home');
        }
        
        function changeEdicaoView(param) {
            LocationService.change('tabs.edicao', param);
        }
        
        function changeCustomersView(){
            LocationService.change('tabs.customers');
            $rootScope.$broadcast('changeMenuItem', 'customers');
        }
        
        function changeOrdemServicoView(param){
            LocationService.change('tabs.ordemservico', param);
        }

        function changeListCustomer(param) {
            LocationService.change('tabs.list-customer', param);
            $rootScope.$broadcast('changeMenuItem', 'list-customer');
        }

        function changeCadastro(param) {
            LocationService.change('tabs.cadastro', param);
            $rootScope.$broadcast('changeMenuItem', 'cadastro');
        }

        function changeMassChargingView(param) {
            LocationService.change('tabs.mass-charging', param);
            $rootScope.$broadcast('changeMenuItem', 'mass-charging');
        }

        function changeStatusChargingView(param){
            console.log('changeStatusChargingView')
            LocationService.change('tabs.status-charging', param);
            $rootScope.$broadcast('changeMenuItem', 'status-charging');
        }

        function changeAllPhoneLinesView(param){
            LocationService.change('tabs.allphone-lines', param);
            $rootScope.$broadcast('changeMenuItem', 'allphone-lines');
        }

        
        function goBack() {
            $window.history.back();
        }
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('MasterController', MasterController);

    MasterController.inject = ['FlowManagerService', 'MainUtils'];
    function MasterController(FlowManagerService, MainUtils) {
        var vm = this;
        console.log('--- Master controller --- ' + FlowManagerService);
        FlowManagerService.changeLoginView();

        // vm.viewName = 'Cadastro Foneclube';
        ////////
        //MainUtils.setAgent('Cardozo');
        //FlowManagerService.changeHomeView();
        ////////

    }

})();
(function() {
    'use strict';
    angular.module('foneClub')
    .controller('MenuController', menuController);

    menuController.$inject = ['$scope', '$window', '$state', 'localStorageService', 'FlowManagerService', '$rootScope'];

    function menuController($scope, $window, $state, localStorageService, FlowManagerService, $rootScope) {
        var vm = this;     
        vm.compress = false; 
        vm.compressMobile = false; 
        vm.mobile = false;              
        vm.menuItemActive = localStorageService.get('menuItemActive');        
        function init() {
            vm.mobile = $window.innerWidth <= 767;
        }
        init();
        vm.menuCompress = function() {
            if ($window.innerWidth >= 767) {
                vm.compress = !vm.compress;                 
            } else if ($window.innerWidth <= 767) {
                vm.compressMobile = !vm.compressMobile;
            }
        }                   
        
        $rootScope.$on('changeMenuItem', function(event, args) {
            saveMenu(args);
        });

        $rootScope.$on('menu-hamburguer', function() {
            vm.menuCompress();
        })
/*-----------------------------------*/



        vm.setMenuItemActive = function(screen) {
            saveMenu(screen)
            
            if(screen == 'home') {
                FlowManagerService.changeHomeView();
            } else if (screen == 'cadastro') {
                FlowManagerService.changeCadastro();
            } else if (screen == 'list-customer') {
                FlowManagerService.changeListCustomer();
            } else if (screen == 'customers') {
                FlowManagerService.changeCustomersView();
            } else if (screen == 'mass-charging') {
                FlowManagerService.changeMassChargingView();
            } else if(screen =='status-charging'){
                FlowManagerService.changeStatusChargingView();
            } else if(screen == 'allphone-lines'){
                FlowManagerService.changeAllPhoneLinesView();
            } else {
                
            }
        }
        
        angular.element($window).bind('resize', function(){            
            if ($window.innerWidth <= 767 && !vm.mobile) {               
                vm.compress = false;
                vm.mobile = true;
                $scope.$apply();
            } else if ($window.innerWidth >= 767 && vm.mobile) { 
                vm.mobile = false;
                vm.compressmobile = false;
                $scope.$apply();
            }                                    
        });

        function saveMenu(screen) {
            vm.menuItemActive = screen;
            localStorageService.set('menuItemActive', screen);
        }
    }
})();
(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('StatusChargingController', StatusChargingController);
    
        StatusChargingController.inject = ['FlowManagerService', 'MainUtils', 'FoneclubeService', 'PagarmeService', '$interval'];
        function StatusChargingController(FlowManagerService, MainUtils, FoneclubeService, PagarmeService, $interval) {
            var vm = this;
            
            console.log('--- StatusChargingController --- ' );

            vm.totalCharged = '...';
            vm.totalReceived = '...';
            vm.searchStatusCharging = searchStatusCharging;
            vm.formatAmmout = formatAmmout
            
            var totalRecebidoBoleto = 0;
            var interval;

            vm.loading = false;
            vm.loadingMessage = 'Carregando...';


            function searchStatusCharging(){
                // console.log('searchStatusCharging')
                // console.log( vm.month + ' ' + vm.year);
                vm.loading = true;
                vm.totalReceivedReady = false;

                interval = $interval(checkFullLoad, 500);

                FoneclubeService.getStatusCharging(vm.month,vm.year).then(function (result) {
                    console.log('getStatusCharging')
                    console.log(result)
                    vm.customers = result;
                    handleData(vm.customers);
                    vm.loading = false;
                    loadPaymentHistory();
                })
            }

            function checkFullLoad(){
                // console.log('------------------------ ' + allStatusLoaded())
                if(allStatusLoaded())
                {
                    $interval.cancel(interval);
                    
                    
                    if(!vm.totalReceivedReady){
                        vm.totalReceived = parseFloat(vm.totalReceived / 100).toString().replace('.',',');
                        vm.totalReceivedReady = true;
                    }
                }
                
            }

            function allStatusLoaded(){
                for (var index in vm.customers) {
                    
                    for(var i in vm.customers[index].ChargingValidity)
                    {
                        // console.log(vm.customers[index].ChargingValidity[i].StatusDescription)
                        if( vm.customers[index].ChargingValidity[i].StatusDescription == 'CARREGANDO')
                        {
                            return false;
                        }
                        
                    }
                    
                }

                return true;
            }

            function handleData(customers){
                

                // .toISOString().split('T')[0].replace('-','/').replace('-','/');

                vm.callbackCount = 0;
                vm.totalBoletoCharges = 0;
                vm.totalReceived = 0;
                vm.totalCharged = 0;
                vm.totalCustomers = customers.length;
                vm.totalCustomersCharged = customers.filter(v => v.Charged == true).length;
                vm.totalCustomersNotCharged = customers.filter(v => v.Charged == false).length;

                try{
                    vm.totalBoletoCharges = customers[0].TotalBoletoCharges;
                }
                catch(erro)
                {
                    //sem clientes
                }

                for (var index in customers) {
                    var customer = customers[index];
                        
                    try{
                        customer.phone = customer.Phones[0].DDD  + customer.Phones[0].Number;
                        var operadora = customer.Phones[0].IdOperator == 1 ? 'Claro': 'Vivo'
                        customer.phoneDetail = operadora + ' - ' + customer.Phones[0].PlanDescription;
                    }
                    catch(erro){}

                    if(customer.Charged)
                    {
                        customer.status = customer.ChargingValidity[0].PaymentType == 1 ? 'PAGO' : 'CARREGANDO';
                            customer.registerPayd = false;
                            for(var i in customer.ChargingValidity)
                            {
                                var charge = customer.ChargingValidity[i];

                                if(charge.PaymentType == 2 && charge.BoletoId != 0)
                                {
                                    PagarmeService.getStatusBoletoRecursivo(charge.BoletoId, customer, vm, index, i).then(function (result) {
                                        
                                        // debugger;
                                        if(result[0].status == "waiting_payment")
                                        {
                                            charge.StatusDescription = 'PENDENTE';

                                            // debugger;
                                            result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PENDENTE'

                                            if(!result[0].elemento.registerPayd){
                                                result[0].elemento.status = charge.StatusDescription;
                                            }
                                        }
                                        else if(result[0].status == "paid"){
                                            
                                            charge.StatusDescription = 'PAGO';
                                            result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].StatusDescription = 'PAGO'
                                            try{
                                                
                                            }
                                            catch(erro){}
                                            

                                            result[0].elemento.registerPayd = true;
                                            result[0].elemento.status = charge.StatusDescription;
                                            // debugger
                                            console.log('Adicionando ' + parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount,10))
                                            console.log('Adicionando ' + totalRecebidoBoleto)
                                            totalRecebidoBoleto += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount,10)
                                            result[0].vm.totalReceived += parseInt(result[0].vm.customers[result[0].indexCustomer].ChargingValidity[result[0].indexCharge].Ammount,10)
                                        }
                                        else{
                                            // debugger;
                                        }

                                        result[0].vm.callbackCount++;

                                        if(result[0].vm.callbackCount == result[0].vm.totalBoletoCharges)
                                        {
                                            console.log('Completou todos boletos');
                                            result[0].vm.totalReceived = parseFloat(result[0].vm.totalReceived / 100).toString().replace('.',',');
                                            vm.totalReceivedReady = true;
                                        }
        
                                    })
                                }
                                else if(charge.BoletoId == 0){
                                    if(vm.customers[index].ChargingValidity[i].StatusDescription == 'CARREGANDO')
                                    {
                                        vm.customers[index].ChargingValidity[i].StatusDescription = 'INVÁLIDO'
                                    }
                                    
                                }
                            }
                            
                        vm.totalCharged += parseInt(customer.ChargingValidity[0].Ammount);

                        if(customer.ChargingValidity[0].Payd == true)
                        {
                            vm.totalReceived += parseInt(customer.ChargingValidity[0].Ammount)
                        }

                        customer.ammout = parseFloat(parseInt(customer.ChargingValidity[0].Ammount) / 100).toString().replace('.',',')
                        
                    }    
                    else  
                    {
                        customer.status = 'NÃO COBRADO'; 
                    }
                         
                }
                
                vm.totalCharged = parseFloat(vm.totalCharged / 100).toString().replace('.',',');
                // vm.totalReceived = parseFloat(vm.totalReceived / 100).toString().replace('.',',');

            }

            function loadPaymentHistory(){
                
                for (var index in vm.customers) {
                   
                    FoneclubeService.getChargeAndServiceOrderHistoryDinamic(vm.customers[index].Id, index).then(function (result) {
                        console.log('FoneclubeService.getChargeAndServiceOrderHistoryDinamic');
                        // console.log(result);

                        if(result.length == 0){
                            //zerado
                            
                            
                        }
                        else{

                            // TODO TEMPORARIO
                            var dataCobranca;
                            try{
                                
                                // dataCobranca = result[0].Charges.PaymentDate.substring(0,10).replace('-','/').replace('-','/');
                                dataCobranca = result[0].Charges.PaymentDate;
                            }
                            catch(erro){
                                
                                // dataCobranca = result[0].CreatedDate.substring(0,10).replace('-','/').replace('-','/')
                                dataCobranca = result[0].CreatedDate
                            }
                            
                            var dataConvertida = new Date(dataCobranca).toISOString().split('T')[0].replace('-','/').replace('-','/');
                            var mes = dataConvertida.substring(5,7);
                            var ano = dataConvertida.substring(0,4);
                            console.log('-------------------')
                            console.log(mes)
                            console.log(ano)

                            var selecionado = new Date( vm.year.toString() + '/' + vm.month.toString()).toISOString().split('T')[0].replace('-','/').replace('-','/');
                            var mesSelecionado = selecionado.substring(5,7);
                            var anoSelecionado = selecionado.substring(0,4);

                            if(mesSelecionado == mes && anoSelecionado == ano)
                            {    
                                vm.customers[result.indexLista].dataIgual = true;
                            }

                            vm.customers[result.indexLista].chargingDate = dataConvertida
                            
                                
                             
                        }
                        
                    });

                }
            }

            function formatAmmout(value){
                return  parseFloat(parseInt(value) / 100).toString().replace('.',',')
            }
            
            
            
            ////////
            //MainUtils.setAgent('Cardozo');
            //FlowManagerService.changeHomeView();
            ////////
    
        }
    
    })();
(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('BoletoModalController', BoletoModalController);
    
    // <<<<<<< HEAD
        BoletoModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService'];
        function BoletoModalController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService) {
    // =======
    //     BoletoModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainComponents', 'MainUtils', 'FoneclubeService', 'UtilsService'];
    //     function BoletoModalController(ViewModelUtilsService, PagarmeService, MainComponents, MainUtils, FoneclubeService, UtilsService) {
    // >>>>>>> release-branch
    
            var vm = this;
            vm.date = new Date();
            var customer = ViewModelUtilsService.modalBoletoData;
            vm.customer = customer;
            var newCustomer;
            vm.etapaDados = true;
            vm.cobrancaRealizada = false;
            vm.amount = vm.customer.CacheIn ? vm.customer.CacheIn : '';
            vm.comment = '';
            console.log('BoletoModalController');
            vm.onTapPagar = onTapPagar;
            vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
            vm.onTapCancel = onTapCancel;
            vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
            vm.enviaEmail = true;

            vm.years = [2018,2017,2016,2015,2014,2013,2012,2011,2010];
            vm.months = [1,2,3,4,5,6,7,8,9,10,11,12];
            
            vm.year = new Date().getFullYear().toString();
            vm.month = (new Date().getMonth() + 1).toString();
    
            var existentCustomer = {
                        'name' : customer.Name,
                        'document_number' : customer.DocumentNumber,
                        'email' : customer.Email,
                        'address' : getAddress(customer),
                        'phone' : getContactPhone(customer)
    
            }

          var CARTAO = 1;
          var BOLETO = 2;
          init();

          function init() {
            FoneclubeService.getHistoryPayment(customer.Id).then(function (result) {
              vm.histories = result;
              console.log(vm.histories);
              for (var i in vm.histories) {
                var history = vm.histories[i];
                history.descriptionType = (history.PaymentType == CARTAO) ? 'Cartão de crédito' : 'Boleto';
                if (i == 0) {
                  vm.commentBoleto
                  vm.comment = history.Comment;
                  vm.amount = history.Ammount / 100;
                }
                if (history.PaymentType == BOLETO) {
                  PagarmeService.getStatusBoleto(history.BoletoId).then(function (result) {
                    if (result.length > 0) {
                      history.StatusPayment = result[0].status;
                    }
                  })
                }
              }
              customer.histories = vm.histories;
            })
              .catch(function (error) {

              });

          }
    
            function onTapConfirmarPagamento() {
                if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                    return;
                }
                vm.etapaDados = false;
                vm.etapaConfirmacao = true;
            }
            
            function onTapCancel(number){
                vm.etapaDados = true;
                vm.etapaConfirmacao = false;
                if (number == 1){
                    vm.amount = 0;
                    vm.comment = '';
                    vm.cobrancaRealizada = false;   
                }
            }
            
            function onTapPagar(){
    
                console.log('tap pagar boleto')
                console.log(parseInt(vm.amount))
              var em = vm.amount.toString().split(".");
              console.log(em[0]);
              if (em[1] != undefined) {
                vm.amount = vm.amount.toString().replace(".", "")

              }
              if (parseInt(vm.amount) < 100) {
                DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Não é permitido cobranças a baixo de 1 Real' });
                return;
              }
    
                vm.disableTapPay = true;
                vm.message = 'Iniciando transação';
                vm.instructions = 'FoneClub - 2017'
                debugger;
                // PagarmeService.postBoleto(vm.amount, vm.commentBoleto, existentCustomer)
                //  .then(function(result){
                //     console.log(result);

                if(!vm.expirationDateField)
                {
                    vm.expirationDateField = 5; 
                }
                else{
                   if(vm.expirationDateField <= 0)
                   {
                    vm.expirationDateField = 5; 
                   } 
                }

                     PagarmeService.postBoletoDirect(vm.amount, vm.commentBoleto, existentCustomer, addExpirationDays(vm.expirationDateField)).then(function(resultCapture){
    
                            debugger;
                            if(vm.enviaEmail)
                            {
                                debugger;
                                var emailObject = {
                                    'To': existentCustomer.email, //existentCustomer.email
                                    'TargetName' : existentCustomer.name,
                                    'TargetTextBlue': resultCapture.boleto_url,
                                    'TargetSecondaryText' : vm.commentBoleto,
                                    'TemplateType' : 2
                                }
        
                                FoneclubeService.postSendEmail(emailObject).then(function(result){
                                    console.log('FoneclubeService.postHistoryPayment');
                                    console.log(result);
                                })
                                .catch(function(error){
                                    console.log('catch error');
                                    console.log(error);
                                });
                            }
                            
    
                            try{
    
                                PagarmeService.notifyCustomerBoleto(resultCapture.id, existentCustomer.email).then(function(resultNotify){
                                vm.message = 'Boleto gerado com sucesso'
                                vm.cobrancaRealizada = true;
                                vm.disableTapPay = false;
                                    })
                                    .catch(function(error){
                                    try{
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;                                    
                                    }
                                    catch(erro){
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;                                    
                                    }
                                    console.log(error);
    
                                });
    
                            }
                            catch(erro){
    
                            }
    
    
                        saveHistoryPayment(resultCapture.id, resultCapture.acquirer_id);
    
                            vm.message = 'Boleto gerado com sucesso'
                        })
                        .catch(function(error){
                            try{
                                DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação' + error.status});                             
                            }
                            catch(erro){
                                DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação'});                             
                            }
                            console.log(error);
                        });
                // }, function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // }).catch(function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // });
    
            }
    
            function saveHistoryPayment(idBoleto, acquirer_id){
                
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: BOLETO,
                        BoletoId: idBoleto,
                        AcquireId: acquirer_id,
                        AnoVingencia:vm.year,
                        MesVingencia:vm.month
                    }
                }
    
                FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                    console.log('FoneclubeService.postHistoryPayment');
                    console.log(result);
                })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });
    
    
            }
    
    
            function getContactPhone(customer){
                var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
                if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                    return null;
                } else {
                    return {
                        'ddd' : contacts[0].DDD.toString(),
                        'number' : contacts[0].Number.toString()
                    }
                }
            }
            
            function getAddress(customer) {
                var address = customer.Adresses;
                if (!address || address.length == 0) {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                    return null;
                } else {
                    return {
                        'street' : address[0].Street,
                        'street_number' : address[0].StreetNumber,
                        'neighborhood' : address[0].Neighborhood,
                        'zipcode' : address[0].Cep,
                        'city': address[0].City,
                        'uf': address[0].State
                    }
                }
            }
            
            function onTapPaymentHistoryDetail(history) {
                ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
            }

            
            function addExpirationDays(days) {
                var dat = new Date();
                dat.setDate(dat.getDate() + days);
                return dat.toISOString();
              }
    
        }
    })();

(function () {
    'use strict';

    angular
        .module('foneClub')
        .controller('CustomerModalController', CustomerModalController);

    CustomerModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'FoneclubeService', 'FlowManagerService', 'DialogFactory'];
    function CustomerModalController(ViewModelUtilsService, PagarmeService, FoneclubeService, FlowManagerService, DialogFactory) {
        var vm = this;
        vm.onTapNewCardPayment = onTapNewCardPayment;
        vm.onTapBoleto = onTapBoleto;
        vm.onTapCard = onTapCard;
        vm.onTapEditar = onTapEditar;
        vm.onTapExcluir = onTapExcluir;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
        vm.onTapOrdemServico = onTapOrdemServico;
        vm.cancelarPagamento = etapaEscolhaCartao;
        vm.onTapComment = onTapComment
        var customer = ViewModelUtilsService.modalCustomerData;
        vm.customer = customer;
        var CARTAO = 1;
        var BOLETO = 2;
        console.log('customer modal controller')
        console.log(customer);

        init();

        function init() {
            debugger
            if (!customer.IdPagarme) {

                PagarmeService.getCustomer(customer.DocumentNumber)
                    .then(function (result) {
                        console.log('- get customer')
                        console.log(result)


                        try {
                            var pagarmeID = result[0].id;
                            updatePagarmeId(pagarmeID);
                            initCardList(pagarmeID);
                            etapaEscolhaCartao();
                        }
                        catch (erro) {
                            console.log('cliente sem id pagarme ainda')
                        }
                        /*
                        var pagarmeID = result[0].id;
                        updatePagarmeId(pagarmeID);
                        initCardList(pagarmeID);
                        etapaEscolhaCartao();
                        */

                    })
                    .catch(function (error) {
                        console.log(error);

                    });


            }
            else {
                etapaEscolhaCartao();
                initCardList(customer.IdPagarme);
            }

            FoneclubeService.getChargeAndServiceOrderHistory(customer.Id).then(function (result) {
                console.log('FoneclubeService.getChargeAndServiceOrderHistory');
                console.log(result);
                vm.chargesAndOrders = result;
                for (var i in vm.chargesAndOrders) {
                    var data = vm.chargesAndOrders[i];
                    if (data.IsCharge) {
                        data.Charges.descriptionType = (data.Charges.PaymentType == CARTAO) ? 'Cartão de crédito' : 'Boleto';

                        if (data.Charges.PaymentType == BOLETO) {
                            setStatusBoleto(data.Charges);
                        }
                    }
                }
                customer.chargesAndOrders = vm.chargesAndOrders;
            });

            FoneclubeService.getHistoryPayment(customer.Id).then(function (result) {
                console.log('FoneclubeService.getHistoryPayment');
                console.log(result);
                vm.histories = result;
                for (var i in vm.histories) {
                    var history = vm.histories[i];
                    history.descriptionType = (history.PaymentType == CARTAO) ? 'Cartão de crédito' : 'Boleto';

                    if (history.PaymentType == BOLETO) {
                        setStatusBoleto(history);
                    }
                }
                customer.histories = vm.histories;
            })
                .catch(function (error) {
                    console.log('catch error');
                    console.log(error);
                });

            FoneclubeService.getTblServiceOrders(customer.Id)
                .then(function (result) {
                    console.log('FoneclubeService.getTblServiceOrders');
                    console.log(result);
                    vm.orders = result;
                })
                .catch(function (error) {
                    console.log('catch error');
                    console.log(error);
                });
        }

        function onTapExcluir() {
            var personCheckout = {
                'DocumentNumber': customer.DocumentNumber
            };
            DialogFactory.dialogConfirm({ mensagem: 'Atenção essa ação irá excluir o cliente da base foneclube, após exclusão não terá volta, deseja proseguir?' })
                .then(function (value) {
                    if (value) {
                        FoneclubeService.postDeletePerson(personCheckout).then(function (result) {
                            console.log(result);
                            if (result) {
                                DialogFactory.showMessageDialog({ message: 'Usuário foi removido com sucesso, no próximo carregamento da lista ele não será mais exibido' });
                                closeThisDialog(0);
                            }
                            else
                                DialogFactory.showMessageDialog({ message: 'Usuário não foi removido, guarde o documento dele: ' + customer.DocumentNumber });
                        })
                            .catch(function (error) {
                                console.log('catch error');
                                console.log(error);
                            });
                    }
                })
        }

        function setStatusBoleto(history) {
            console.log('setStatusBoleto')
            console.log(history)
            PagarmeService.getStatusBoleto(history.BoletoId).then(function (result) {
                history.StatusPayment = result[0].status;
            })
        }

        function updatePagarmeId(pagarmeID) {
            var personCheckout = {
                'DocumentNumber': customer.DocumentNumber,
                'IdPagarme': pagarmeID
            };

            FoneclubeService.postUpdatePerson(personCheckout).then(function (result) {
                console.log(result);
                initCardList(pagarmeID);
            })
                .catch(function (error) {
                    console.log('catch error');
                    console.log(error);
                });
        }

        function onTapNewCardPayment() {
            console.log('onTapNewCardPayment');
            ViewModelUtilsService.showModalNewCardPayment(customer);
        }


        function onTapComment() {
            console.log('onTapComment');
            ViewModelUtilsService.showModalComment(customer);

        }



        function initCardList(customerId) {


            PagarmeService.getCard(customerId)
                .then(function (result) {
                    vm.cards = result;
                    console.log('-- cards --')
                    console.log(result)
                })
                .catch(function (error) {
                    console.log(error);
                    vm.message = 'falha ao recuperar cartão';
                });


        }

        function onTapCard(card) {

            //vm.card = card;
            //etapaQuantia();
            console.log('onTapCard')
            ViewModelUtilsService.showModalExistentCardPayment(customer, card);

        }

        function onTapBoleto(card) {
            console.log('onTapBoleto')
            ViewModelUtilsService.showModalBoleto(customer);

        }

        function onTapPagar() {

            vm.message = 'Transação iniciada';
            var customer;

            if (!vm.customer.address || !vm.customer.phone || !vm.customer.email || !vm.customer.document_number || !vm.customer.name) {
                customer = {
                    'name': vm.customer.name,
                    'document_number': vm.customer.document_number,
                    'email': vm.customer.email
                    ,
                    'address': {
                        'street': 'empty',
                        'street_number': '10',
                        'neighborhood': 'empty',
                        'zipcode': '01452000'
                    },
                    'phone': {
                        'ddd': '00',
                        'number': '000000000'
                    }
                }
                //vm.message = 'Usuário incompleto';
            }

            console.log('on tap pagar');
            console.log(vm.card.id);
            console.log(vm.customer);
            console.log(vm.amount);
            console.log(customer);

            PagarmeService.postTransactionExistentCard(vm.amount, vm.card.id, customer)
                .then(function (result) {
                    console.log('nova transac ' + result);
                    vm.message = 'Transação efetuada';
                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function (result) {

                        vm.message = 'Transação concluída';
                    })
                        .catch(function (error) {
                            try {
                                vm.message = 'Erro na captura da transação' + error.status;
                            }
                            catch (erro) {
                                vm.message = 'Erro na captura da transação'
                            }
                            console.log(error);

                        });
                })


            console.log(customer)


        }

        function etapaEscolhaCartao() {
            vm.amount = '';
            vm.etapaEscolhaCartao = true;
            vm.etapaQuantia = false;
        }

        function etapaQuantia() {
            vm.etapaEscolhaCartao = false;
            vm.etapaQuantia = true;
        }

        function onTapEditar() {
            FlowManagerService.changeEdicaoView(customer);
        }


        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer)
        }

        function onTapOrdemServico() {
            FlowManagerService.changeOrdemServicoView(customer);
        }

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('CommentController', CommentController);
    CommentController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService'];
    function CommentController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService) {

        var vm = this;
        debugger;
        vm.onTapAddComment = onTapAddComment;
          var customer = ViewModelUtilsService.modalCommentData;
       
        
        function onTapAddComment(data){        
            debugger;
            data.intIdPerson=customer.Id;
            
            FoneclubeService.postCustomerComment(data).then(function(result){
                debugger;
                console.log(result);    
                if(result){
                            DialogFactory.showAlertDialog({message: 'Inserido com sucesso'});
                        }                       
                        else
                            DialogFactory.showAlertDialog({message: 'Inserido falhou'}); 
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            });
            
        }      


    }
})();
(function () {
  'use strict';

  angular
    .module('foneClub')
    .controller('EdicaoController', EdicaoController)
    .directive('ngPrism', function () {
      return {
        restrict: 'A',
        link: function (scope, element, attrs) {
          element.ready(function () {
            Prism.highlightElement(element[0]);
          });
        }
      };
    });


  EdicaoController.inject = ['$scope', 'DataFactory', 'ViewModelUtilsService', 'FoneclubeService', 'MainUtils', '$stateParams', 'FlowManagerService', '$timeout', 'HubDevService', '$q', '$ionicScrollDelegate', 'UtilsService', 'DialogFactory', 'ngDialog', '$http', '$sce', '$rootScope'];
  function EdicaoController($scope, DataFactory, ViewModelUtilsService, FoneclubeService, MainUtils, $stateParams, FlowManagerService, $timeout, HubDevService, $q, $ionicScrollDelegate, UtilsService, DialogFactory, ngDialog, $http, $sce, $rootScope) {
    var vm = this;
    vm.showLoader = false;
    vm.data = DataFactory;
    vm.onTapSendUser = onTapSendUser;
    vm.onTapRemoveNewNumber = onTapRemoveNewNumber;
    vm.onTapNewPhoneNumber = onTapNewPhoneNumber;
    vm.validarCEP = validarCEP;
    vm.validarCPF = validarCPF;
    vm.validatePhoneNumber = validatePhoneNumber;
    // vm.getContactParentName = getContactParentName;
    vm.showAddNewPhone = showAddNewPhone;
    vm.goBack = goBack;
    vm.cpf = $stateParams.data ? $stateParams.data.DocumentNumber : '';
    var index = $stateParams.data ? $stateParams.data.index : '';
    vm.singlePriceLocal = 0;
    vm.allOperatorOptions = MainUtils.operatorOptions();
    vm.requesting = true;
    vm.onCheckCNPJ = onCheckCNPJ
    vm.CNPJField = false;
    vm.CPFField = true;
    vm.opemEmailpopup = opemEmailpopup;

    vm.search = "";
    vm.showall = false;
    vm.linhaAtiva = false;
    vm.claro = true;
    vm.vivo = true;
    vm.history = [];
    vm.sp = 1;

    function opemEmailpopup(emailstatus, phone, email, operator) {
      ViewModelUtilsService.showModalEmailDetail(emailstatus, phone, email, operator);
    }

    function onCheckCNPJ() {
      console.log("andando " + vm.checkboxCNPJ)

      if (vm.checkboxCNPJ) {
        onShowCNPJField();
      }
      else {
        onShowCPFField();
      }

    }

    function onShowCPFField() {
      vm.CNPJField = false;
      vm.CPFField = true;
    }

    function onShowCNPJField() {
      vm.CNPJField = true;
      vm.CPFField = false;
    }




    init();
    function init() {
      if (!vm.cpf) {
        FlowManagerService.changeCustomersView();
        return;
      }
      var showDialog = DialogFactory.showLoader('Carregando dados...');
      FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function (result) {
        vm.DocumentNumberFreeze = angular.copy(result.DocumentNumber);
        vm.customer = result;


        getPersonParent(vm.customer.IdParent);
        vm.singlePriceLocal = vm.customer.SinglePrice ? vm.customer.SinglePrice : 0; //single place formatado;
        if (vm.customer.Adresses) {
          for (var i = 0; i < vm.customer.Adresses.length; i++) {
            vm.customer.Adresses[i].StreetNumber = parseInt(vm.customer.Adresses[i].StreetNumber); //deve ser int por causa da mascara
          }
        }

        FoneclubeService.getPlans().then(function (result) {
          vm.plans = result;
          debugger;
          var listaPlanosUsados = [];

          for (var number in vm.customer.Phones) {
            vm.customer.Phones[number].key = Math.random();

            vm.customer.Phones[number].StatusOperator = { 'background-color': 'grey' }
            vm.customer.Phones[number].StatusDescription = 'C'

            debugger
            // if(number % 2)
            // {
            //     vm.customer.Phones[number].StatusOperator = {'background-color':'green'}
            //     vm.customer.Phones[number].StatusDescription = 'A' 
            // }
            // else
            // {
            //     vm.customer.Phones[number].StatusOperator = {'background-color':'red'}
            //     vm.customer.Phones[number].StatusDescription = 'B'
            // }

            //vm.customer.Phones[number].IdOperator = vm.customer.Phones[number].IdOperator.toString(); //deve ser string por causa do ng-options
            //vm.customer.Phones[number].IdPlanOption = vm.customer.Phones[number].IdPlanOption.toString(); //deve ser string por causa do ng-options
            if (vm.customer.Phones[number].Portability) {
              vm.customer.Phones[number].Portability = 'true';
            } else {
              vm.customer.Phones[number].Portability = 'false';
            }
            vm.customer.Phones[number].NovoFormatoNumero = getNumberString(vm.customer.Phones[number]); //popula o novo campo vm.<telefone>
            for (var plan in vm.plans) {

              listaPlanosUsados.push(vm.customer.Phones[number].IdPlanOption);

              if (vm.plans[plan].Id == vm.customer.Phones[number].IdPlanOption) {
                if (vm.plans[plan].Description.endsWith('VIVO')) {
                  vm.customer.Phones[number].operadora = '1'; //seta a operadora local

                  vm.customer.Phones[number].StatusOperator = { 'background-color': 'green' }
                  vm.customer.Phones[number].StatusDescription = 'A'
                } else {
                  vm.customer.Phones[number].operadora = '2'; //seta a operadora local

                  console.log('tentando coletar')
                  FoneclubeService.getStatusBlockedClaro(vm.customer.Phones[number].DDD, vm.customer.Phones[number].Number).then(function (result) {
                    console.log('retorno ' + result)
                    if (!result) {
                      vm.customer.Phones[number].StatusOperator = { 'background-color': 'green' }
                      vm.customer.Phones[number].StatusDescription = 'A'
                    }
                    else {
                      vm.customer.Phones[number].StatusOperator = { 'background-color': 'red' }
                      vm.customer.Phones[number].StatusDescription = 'B'
                    }

                  });

                }
              }
            }



          }

          listaPlanosUsados = listaPlanosUsados.filter(vm.onlyUnique)
          for (var i in listaPlanosUsados) {
            debugger
            var teste = listaPlanosUsados[i];
          }

          console.info(vm.customer);

          populaPai(vm.customer)
          showDialog.close();
          // Fix caso não exista numero de telefone -- É necessário manter esse fix por causa de clientes que tenham esse array vazio
          var dontHaveContact = vm.customer.Phones.filter(function (element, index, array) {
            return element.IsFoneclube == null || element.IsFoneclube == false;
          });
          if (dontHaveContact.length == 0) {
            vm.customer.Phones.push({
              'Id': null,
              'DDD': '',
              'Number': '',
              'IsFoneclube': null,
              'IdOperator': 0,
              'Portability': 'false',
              'NickName': '',
              'IdPlanOption': 0,
              'Inative': false,
              'Delete': false,
              'NovoFormatoNumero': '',
              'operadora': '1',
              'key': Math.random()
            });
          }

          // Fix caso não exista endereço -- É necessário manter esse fix por causa de clientes que tenham esse array vazio
          if (vm.customer.Adresses.length == 0) {
            vm.customer.Adresses.push({
              Cep: '',
              Street: '',
              StreetNumber: '',
              Complement: '',
              Neighborhood: '',
              City: '',
              State: ''
            });
          }

          $timeout(function () {
            vm.requesting = false;
          }, 2000)

          $timeout(function () {
            document.getElementById('cpf').focus();
          }, 200);

          vm.pricelist = [];
          for (var i = 0; i < vm.customer.Phones.length; i++) {
            var phoneNumber = vm.customer.Phones[i];
            if (phoneNumber.IdPlanOption == '') {
              vm.pricelist.push(0);
            } else {
              vm.pricelist.push(vm.plans.find(x => x.Id == phoneNumber.IdPlanOption).Value / 100);
            }
          }

          vm.tempPhones = angular.copy(vm.customer.Phones);

          vm.sp = 1;
          addHistory();
        });

      });
    };


    vm.loading = false;
    vm.autoCompleteOptions = {
      minimumChars: 1,
      //selectedTextAttr: 'PhoneParent',
      data: function (searchTerm) {
        return FoneclubeService.getAllParents()
          .then(function (response) {
            vm.loading = true;
            console.log(response);
            // ideally filtering should be done on server
            searchTerm = searchTerm.toUpperCase();


            return _.filter(response, function (info) {
              if (info.NameParent != null)
                //return info.NameParent.startsWith(searchTerm);
                return removeAccents(info.NameParent.toString().toLowerCase()).indexOf(removeAccents(searchTerm.toLowerCase())) > -1;
            });

            // var match = _.filter(response, function (info) {                                
            //     //alert(info.NameParent);
            //     if(info.NameParent != null)
            //         //return info.NameParent.startsWith(searchTerm);
            //         return removeAccents(info.NameParent.toString().toLowerCase()).indexOf(removeAccents(searchTerm.toLowerCase())) > -1;
            // });

            // vm.loading = false;
            // return _.pluck(match, 'NameParent');
          }).catch(function (error) {
            console.log('error: ' + error);
          });
      },
      renderItem: function (item) {
        return {
          value: item.NameParent,
          label: $sce.trustAsHtml(
            "<p class='auto-complete' style='margin-bottom:0px;'>"
            + item.NameParent +
            "</p>")
        };
      },
      itemSelected: function (e) {
        //vm.contactParent="(21) 98156-7560";
        //alert(JSON.stringify(e));
        var contactNo = "(" + e.item.DDDParent + ") " + e.item.PhoneParent.toString().substring(0, 5) + "-" + e.item.PhoneParent.toString().substring(5, 9);
        vm.contactParent = contactNo;
      }
    }

    vm.getParentDataByPhone = getParentDataByPhone;

    function getParentDataByPhone(phoneparent, personid) {
      //alert(phoneparent+ " "+personid);
      if (phoneparent && personid) {
        phoneparent = phoneparent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(2, 11);
        FoneclubeService.getCustomerParentByPhone(phoneparent, personid).then(function (result) {
          console.log(result);
          //alert(phoneparent);
          //alert(personid);
          vm.customer.NameContactParent = result.NameParent;
        }).catch(function (error) {
          console.log('error: ' + error);
        });
      }
    };

    function populaPai(customer) {

      vm.customer.NameContactParent = customer.NameParent;

      if (customer.PhoneDDDParent != null && customer.PhoneNumberParent != null)
        vm.contactParent = customer.PhoneDDDParent + customer.PhoneNumberParent;

    }

    function getPersonParent(id) {
      if (id) {
        FoneclubeService.getCustomerById(id).then(function (result) {
          if (result.Phones.length > 0) {
            vm.contactParent = result.Phones[0].DDD.concat(result.Phones[0].Number);
          }
        }).catch(function (error) {
          console.log('error: ' + error);
        });
      }
    }

    function getFormatedDate(param) {
      var date = new Date(param);
      var day = date.getDate();
      var month = date.getMonth() + 1;
      var year = date.getFullYear();
      if (day < 10) { day = "0" + day; }
      if (month < 10) { month = "0" + month; }
      return day + '/' + month + '/' + year;
    }

    function onTapSendUser(customer) {

      debugger;
      if (vm.requesting == true) return;
      vm.requesting = true;

      //debugger;
      //return;

      //TODO
      //colocar breakpoint nos metodos localhost API, validar se novos atributos chegam--Putting breakpoint the methods localhost API, validate the new assets come.
      //revisar todos nomes entidade .net apos refact de nomes atributos -- Revisar of names or. net apos refact of attributes.
      var customerSend = {
        "Id": customer.Id,
        "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
        "Register": customer.Register,
        "Name": customer.Name,
        "NickName": customer.NickName,
        "Email": customer.Email,
        "Born": customer.Born,
        "Gender": customer.Gender,
        "IdPlanOption": customer.IdPlanOption,
        "IdPagarme": customer.IdPagarme,
        "IdRole": customer.IdRole,
        "Adresses": customer.Adresses,
        "Phones": customer.Phones,
        "Photos": customer.Photos,
        "IdParent": customer.IdParent,
        "NameContactParent": customer.NameContactParent,
        "IdCommissionLevel": customer.IdCommissionLevel,
        "SinglePrice": vm.singlePriceLocal,
        "DescriptionSinglePrice": customer.DescriptionSinglePrice
      }
      var totalPriceValidade = 0;
      for (var i in vm.customer.Phones) {
        vm.plans.find(function (element, index, array) {
          if (element.Id == vm.customer.Phones[i].IdPlanOption) {
            totalPriceValidade = totalPriceValidade + element.Value / 100;
          }
        });
      }
      if (vm.singlePriceLocal) {
        if ((vm.singlePriceLocal / 100) > totalPriceValidade) {
          DialogFactory.showMessageDialog({ mensagem: 'Preço único não pode ser maior do que o preço de todos os planos somados.' });
          //showLoader.close();
          vm.requesting = false;
          return;
        }
      }


      var digitosMinimosTelefone = 11
      //Regra: o telefone não pode ser incompleto, mass pode estar em branco
      for (var item in customerSend.Phones) {
        if (customerSend.Phones[item].NovoFormatoNumero.length < digitosMinimosTelefone && customerSend.Phones[item].NovoFormatoNumero.length > 0) {
          debugger;
          DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'O telefone: '.concat(customerSend.Phones[item].NovoFormatoNumero).concat(', não pode ficar incompleto, mas pode ficar em branco.') });
          //showLoader.close();
          vm.requesting = false;
          return;
        } else {
          
          customerSend.Phones[item].DDD = UtilsService.getPhoneNumberFromStringToJson(customerSend.Phones[item].NovoFormatoNumero).DDD;
          customerSend.Phones[item].Number = UtilsService.getPhoneNumberFromStringToJson(customerSend.Phones[item].NovoFormatoNumero).Number;
        }
      }

      var arrayFiltered = customerSend.Phones.filter(function (number) {
        return number.IsFoneclube == true && number.DDD.length == 2 && number.Number.length >= 8 && number.Delete == null && number.LinhaAtiva;
      });

      //Fix se o usuario não add CEP o array deve estar vazio;
      for (var i in customerSend.Adresses) {
        if (customerSend.Adresses[i].Cep == '')
          customerSend.Adresses.splice(i, 1);
      }
      var showLoader = DialogFactory.showLoader('Enviando Dados...');
      if (arrayFiltered.length == 0) {
        runPostUpdateCustomer(customerSend);
      } else {
        validadeNumbers(arrayFiltered).then(function (result) {
          var right = true;
          for (var item in result) {
            if (result[item].DocumentNumber && result[item].DocumentNumber != UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)) {
              
              debugger;
              var msg = 'Você não pode cadastrar o mesmo telefone para dois clientes.</br>O número <strong>'
                .concat(arrayFiltered[item].NovoFormatoNumero).concat('</strong>, pertence ao cliente ')
                .concat(result[item].DocumentNumber).concat(', ').concat(result[item].Name).concat('.');
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: msg });
              right = false;
              vm.requesting = false;
              showLoader.close();
            }
          }
          for (var x in arrayFiltered) {
            //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
            var twiceNumber = arrayFiltered.filter(function (element, index, array) {
              return element.DDD == arrayFiltered[x].DDD && element.Number == arrayFiltered[x].Number;
            });
            if (twiceNumber.length > 1) {
              DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.' });
              right = false;
              vm.requesting = false;
              showLoader.close();
              break;
            }
          }
          if (right) {
            runPostUpdateCustomer(customerSend);
          }
        });
      }

      function runPostUpdateCustomer(customerSend) {
        debugger;
        UtilsService.sendImageToUpload(vm.imageSelf, vm.imageFrente, vm.imageVerso).then(function (result) {
          for (var i in result) {
            customerSend.Photos = customerSend.Photos.filter(function (element) {
              return element.Tipo != result[i].tipo;
            });
            // for (var x in customerSend.Photos) {
            //     if (result[i].tipo == customerSend.Photos[x].Tipo) {
            //         debugger;
            //         customerSend.Photos.splice(x, 1);
            //     }
            // }
            customerSend.Photos.push({ Name: result[i].filename, Tipo: result[i].tipo });
          }

          var parentDDD = vm.contactParent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(0, 2);
          var parentNumber = vm.contactParent.replace('(', '').replace(')', '').replace('-', '').replace(' ', '').trim().substring(2, 11);
          var parentName = vm.customer.NameContactParent;
          // debugger;


          var customerObj = {
            'NameParent': vm.customer.NameContactParent,
            'Id': customerSend.Id,
            'PhoneDDDParent': parentDDD,
            'PhoneNumberParent': parentNumber
          }
          debugger;
          FoneclubeService.postCustomerParent(customerObj).then(function (result) {
            // debugger;
            if (result)
              FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucess).catch(postUpdateCustomerError);
            else {
              DialogFactory.dialogConfirm({ title: 'Andamento editar', mensagem: 'Não foi possível atualizar dados do pai da linha, deseja salvaro restante ( reomendável que sim ):', btn1: 'sim', btn2: 'não' })
                .then(function (result) {
                  if (result) {
                    FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucess).catch(postUpdateCustomerError);
                  } else {
                    return;
                  }
                })
            }
          }).catch(function (erro) {

            DialogFactory.dialogConfirm({ title: 'Andamento editar', mensagem: 'Não foi possível atualizar dados do pai da linha, deseja salvaro restante ( reomendável que sim ):', btn1: 'sim', btn2: 'não' })
              .then(function (result) {
                if (result) {
                  FoneclubeService.postUpdateCustomer(customerSend).then(postUpdateCustomerSucess).catch(postUpdateCustomerError);
                } else {
                  return;
                }
              })

          });






        })

      }

      function postUpdateCustomerSucess(result) {
        if (result) {
          DialogFactory.dialogConfirm({ title: 'Edição Realizada', mensagem: 'Todos os dados pessoais enviados, edição Foneclube feita com sucesso.', btn1: 'Ir para Home', btn2: 'Visualizar Cliente' })
            .then(function (result) {
              if (result) {
                FlowManagerService.changeCustomersView();
                FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.cpf)).then(function (result) {
                  vm.data.customers.splice(index, 1, result);
                  ViewModelUtilsService.showModalCustomer(result);
                });
              } else {
                FlowManagerService.changeHomeView();
              }
            })
        }
        vm.requesting = false;
        showLoader.close();
      }

      function postUpdateCustomerError(error) {
        DialogFactory.showMessageDialog({ mensagem: error.statusText });
        vm.requesting = false;
        showLoader.close();
      }
    };

    function setPlansList(operadora) {
      vm.selectedPlansList = [];
      for (var item in vm.plans) {
        if (operadora == 1 && vm.plans[item].Description.endsWith('VIVO')) {
          vm.selectedPlansList.push(vm.plans[item]);
        } else if (operadora == 2 && vm.plans[item].Description.endsWith('CLARO')) {
          vm.selectedPlansList.push(vm.plans[item]);
        }
      }
    }

    function validarCEP(index) {
      if (vm.customer.Adresses[index].Cep.length < 9) return;
      var showLoader = DialogFactory.showLoader('Tentando preencher dados...');
      HubDevService.validaCEP(vm.customer.Adresses[index].Cep.replace(/[-.]/g, '')).then(function (result) {
        if (!result.erro) {
          vm.customer.Adresses[index].Street = result.logradouro;
          vm.customer.Adresses[index].Neighborhood = result.bairro;
          vm.customer.Adresses[index].City = result.localidade;
          vm.customer.Adresses[index].State = result.uf;
        } else {
          DialogFactory.showMessageDialog({ mensagem: "CEP incorreto." });
        }
        showLoader.close();
      }, function (error) {
        showLoader.close();
      });
    }

    function validarCPF() {
      if (vm.customer.DocumentNumber.length < 11) { return }
      FoneclubeService.getCustomerByCPF(UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)).then(function (existentClient) {
        if (existentClient.Id == 0) {
          HubDevService.validaCPF(UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)).then(function (result) {
            if (result.status) {
              vm.name = result.nome;
            }
          }, function (error) { });
        } else if (existentClient.DocumentNumber != vm.DocumentNumberFreeze) {
          DialogFactory.showMessageConfirm({ titulo: 'CPF já cadastrado', mensagem: 'Você não pode cadastrar um cpf repetido.' })
            .then(function (param) {
              var cpf = angular.copy(vm.DocumentNumberFreeze);
              vm.customer.DocumentNumber = cpf.substr(0, 3) + '.' + cpf.substr(3, 3) + '.' + cpf.substr(6, 3) + '-' + cpf.substr(9)
            })
        }
      }, function (result) {
        FlowManagerService.changeHomeView();
      }).catch(function (error) {
        FlowManagerService.changeHomeView();
      });
    }

    // function getContactParentName() {
    //     if (vm.contactParent.length < 13) { 
    //         vm.customer.IdParent = "";
    //         return
    //     }
    //     var param = {
    //         ddd: clearPhoneNumber(vm.contactParent).substring(0, 2),
    //         numero: clearPhoneNumber(vm.contactParent).substring(2)
    //     }
    //     FoneclubeService.getCustomerByPhoneNumber(param).then(function(result) {
    //         vm.customer.IdParent = result.Id;
    //         vm.customer.NameContactParent = result.Name;
    //     })
    // }

    function onTapNewPhoneNumber() {
      vm.customer.Phones.push(
        {
          'Id': null,
          'DDD': '',
          'Number': '',
          'IsFoneclube': true,
          'IdOperator': 0,
          'Portability': 'false',
          'NickName': '',
          'IdPlanOption': 0,
          'Inative': false,
          'Delete': null,
          'NovoFormatoNumero': '',
          'operadora': '1',
          'key': Math.random(),
          'LinhaAtiva': true
        }
      );
      resizeScroll();
    }

    function onTapRemoveNewNumber(position) {
      DialogFactory.dialogConfirm({ titulo: 'Excluir Número', mensagem: 'Deseja realmente remover este número?' })
        .then(function (res) {
          if (res) {
            if (vm.customer.Phones[position].Id !== null) {
              vm.customer.Phones[position].Delete = true;
            } else {
              vm.customer.Phones.splice(position, 1);
            }

          }
        })
    }

    function validadeNumbers(numbers) {
      var promises = numbers.map(function (number) {
        return FoneclubeService.getCustomerByPhoneNumber({
          ddd: clearPhoneNumber(number.DDD),
          numero: clearPhoneNumber(number.Number)
        });
      });
      return $q.all(promises);
    }

    function validatePhoneNumber(position) {
      if (vm.requesting || vm.customer.Phones[position].NovoFormatoNumero.length < 14) return;
      var number = {
        ddd: UtilsService.getPhoneNumberFromStringToJson(vm.customer.Phones[position].NovoFormatoNumero).DDD,
        numero: UtilsService.getPhoneNumberFromStringToJson(vm.customer.Phones[position].NovoFormatoNumero).Number
      }
      //nao deixa add o mesmo numero duas vezes para o mesmo cliente;
      var twiceNumber = vm.customer.Phones.filter(function (element, index, array) {
        return element.NovoFormatoNumero == vm.customer.Phones[position].NovoFormatoNumero
          && element.IsFoneclube == true
          && element.Delete == null;
      });
      if (twiceNumber.length > 1) {
        DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Você não pode cadastrar o mesmo telefone duas vezes para o cliente.' });
        return;
      }
      FoneclubeService.getCustomerByPhoneNumber(number).then(function (res) {
        if (res.DocumentNumber && res.DocumentNumber != UtilsService.clearDocumentNumber(vm.customer.DocumentNumber)) {
          DialogFactory.showMessageDialog({ titulo: 'Aviso', mensagem: 'Este telefone já pertence a um cliente.' });
        }
      });
    }

    function getNumberString(param) {
      return param.DDD.concat(param.Number);
    }

    function clearPhoneNumber(number) {
      return number ? number.replace('-', '').replace(' ', '').replace('(', '').replace(')', '') : '';
    }

    function showAddNewPhone() {
      function filterPhones(number) {
        return number.IsFoneclube == true;
      }
      return vm.customer.Phones.filter(filterPhones);
    }

    function goBack() {
      FlowManagerService.goBack();
      FoneclubeService.getCustomerByCPF(vm.cpf).then(function (result) {
        ViewModelUtilsService.showModalCustomer(result);
      });
    }

    function resizeScroll() {
      $ionicScrollDelegate.resize();
    }

    vm.imageSelf;
    vm.base64Self;
    vm.imageFrente;
    vm.base64Frente;
    vm.imageVerso;
    vm.base64Verso;
    vm.uploadImg = uploadImg;
    vm.viewImg = viewImg;
    function viewImg(img) {
      ngDialog.open({
        template: '<div class="popup-lista-imagens ngdialog-close"><img ng-src="{{img}}"/></div>',
        controller: ['$scope', 'DataFactory', function ($scope, DataFactory) {
          $scope.img = $scope.ngDialogData.img;
        }],
        className: 'ngDialog-custom-width popup-lista-imagens',
        plain: true,
        closeByDocument: true,
        data: {
          img: img
        }
      });
    }
    function uploadImg(param) {
      document.getElementById(param).click();
    }
    vm.getImageOftype = getImageOftype;
    function getImageOftype(type) {
      function base64img(tipo) {
        if (tipo == 1) {
          return vm.base64Self;
        } else if (tipo == 2) {
          return vm.base64Frente;
        } else if (tipo == 3) {
          return vm.base64Verso;
        }
        return null;
      }
      if (base64img(type)) {
        return base64img(type);
      }
      var img = vm.customer.Photos.filter(function (element) {
        return element.Tipo == type;
      });
      if (img[0]) {
        return 'https://s3-sa-east-1.amazonaws.com/fone-clube-bucket/' + img[0].Name;
      }
      return '../../content/img/upload-cloud.png';
    }

    vm.onlyUnique = onlyUnique;

    function onlyUnique(value, index, self) {
      return self.indexOf(value) === index;
    }

    vm.getPrice = getPrice;
    function getPrice(id) {
      console.log(id);
      if (id == '')
        return 0;
      return vm.plans.find(x => x.Id == id).Value / 100;
    }

    vm.changedPlano = changedPlano;
    function changedPlano(position, id) {

      if (id == '' || id == null)
        vm.pricelist[position] = 0;
      else
        vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
      addHistory();
      autmaticSum();
    }

    vm.onSendUser = onSendUser;
    function onSendUser(customer) {

        var customerSend = {
            "Id": customer.Id,
            "DocumentNumber": UtilsService.clearDocumentNumber(customer.DocumentNumber),
            "Register": customer.Register,
            "Name": customer.Name,
            "NickName": customer.NickName,
            "Email": customer.Email,
            "Born": customer.Born,
            "Gender": customer.Gender,
            "IdPlanOption": customer.IdPlanOption,
            "IdPagarme": customer.IdPagarme,
            "IdRole": customer.IdRole,
            "Adresses": customer.Adresses,
            "Phones": customer.Phones,
            "Photos": customer.Photos,
            "IdParent": customer.IdParent,
            "NameContactParent": customer.NameContactParent,
            "IdCommissionLevel": customer.IdCommissionLevel,
            "SinglePrice": customer.SinglePrice,
            "DescriptionSinglePrice": customer.DescriptionSinglePrice
        }

        FoneclubeService.postUpdateCustomer(customerSend).then(function(result){
            vm.showLoader = false;
        })
    };

    vm.onchecked = onchecked;
    function onchecked(position) {
      vm.customer.Phones[position] = angular.copy(vm.tempPhones[position]);
      vm.showLoader = true;
      onSendUser(vm.customer);
    }

    vm.onfocusPreco = onfocusPreco;
    function onfocusPreco(position){
        vm.tempPrice = vm.pricelist[position];
    }

    vm.onBlurPreco = onBlurPreco;
    function onBlurPreco(position){
        if(vm.tempPrice != vm.pricelist[position]){
            addHistory();
        }
    }

    vm.onunchecked = onunchecked;
    function onunchecked(position) {
      vm.tempPhones[position] = angular.copy(vm.customer.Phones[position]);
      var id = vm.tempPhones[position].IdPlanOption;
      if (id == '' || id == null)
        vm.pricelist[position] = 0;
      else
        vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
    }

    vm.onallchecked = onallchecked;
    function onallchecked() {
      vm.customer.Phones = angular.copy(vm.tempPhones);
      vm.showLoader = true;
      onSendUser(vm.customer);
    }

    vm.onallunchecked = onallunchecked;
    function onallunchecked() {
      vm.tempPhones = angular.copy(vm.customer.Phones);
      for (var position = 0; position < vm.tempPhones.length; position++) {
        var id = vm.tempPhones[position].IdPlanOption;
        if (id == '' || id == null)
          vm.pricelist[position] = 0;
        else
          vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
      }
    }

    vm.onedit = onedit;
    function onedit() {
      ViewModelUtilsService.showModalCustomer(vm.customer, -1);
    }

    vm.ignoreAccents = function (item) {
      if (vm.showall) {
        return true;
      } else {
        var text = removeAccents(item.NovoFormatoNumero.toLowerCase());
        //alert(text);
        var search_text = removeAccents(vm.search.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~]/g, ''));
        var flag1 = text.indexOf(search_text) > -1;
        var flag2 = true;
        if (vm.linhaAtiva && !item.LinhaAtiva) {
          flag2 = false;
        }
        var flag3 = true;
        if (!vm.claro) {
          var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
          if (!itm) {
            flag3 = false;
          } else {
            text = removeAccents(itm.Description.toLowerCase());
            flag3 = !(text.indexOf('claro') > -1);
          }
        }
        var flag4 = true;
        if (!vm.vivo) {
          var itm = vm.plans.find(x => x.Id == item.IdPlanOption);
          if (!itm) {
            flag4 = false;
          } else {
            text = removeAccents(itm.Description.toLowerCase());
            flag4 = !(text.indexOf('vivo') > -1);
          }
        }

        return flag1 && flag2 && flag3 && flag4;

      }
    };

    vm.changedFilterAll = changedFilterAll;
    function changedFilterAll() {
      if (vm.showall) {
        vm.search = "";
        vm.linhaAtiva = false;
        vm.claro = true;
        vm.vivo = true;
      }
    }

    vm.onUndo = onUndo;
    function onUndo() {
      vm.sp--;
      var tmp = angular.copy(vm.history[vm.sp - 1]);
      vm.tempPhones = tmp.phones;
      vm.pricelist = tmp.pricelist;
      for (var position = 0; position < vm.tempPhones.length; position++) {
        var id = vm.tempPhones[position].IdPlanOption;
 /*       if (id == '' || id == null)
          vm.pricelist[position] = 0;
        else
          vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
          */
      }
    }

    vm.onRedo = onRedo;
    function onRedo() {
      vm.sp++;
      var tmp = angular.copy(vm.history[vm.sp - 1]);
      vm.tempPhones = tmp.phones;
      vm.pricelist = tmp.pricelist;
      for (var position = 0; position < vm.tempPhones.length; position++) {
        var id = vm.tempPhones[position].IdPlanOption;
/*        if (id == '' || id == null)
          vm.pricelist[position] = 0;
        else
          vm.pricelist[position] = vm.plans.find(x => x.Id == id).Value / 100;
          */
      }
    }

    vm.addHistory = addHistory;
    function addHistory() {
      if (vm.history.length > vm.sp) {
        vm.history.splice(vm.sp, vm.history.length - vm.sp);
      }
      var tmpPhones = angular.copy(vm.tempPhones);
      var tmpPricelist = angular.copy(vm.pricelist);
      vm.history.push({ 'phones': tmpPhones, 'pricelist': tmpPricelist });
      vm.sp = vm.history.length;
    }

    vm.telephonechanged = telephonechanged;
    function telephonechanged($index) {
      //    addHistory();
    }

    vm.activechanged = activechanged;
    function activechanged($index) {
      addHistory();
    }


    vm.pricechanged = pricechanged;
    function pricechanged($index) {
      autmaticSum();
    }

    vm.nicknamechanged = nicknamechanged;
    function nicknamechanged($index) {
      addHistory();
    }

    vm.changedAutoSum = changedAutoSum;
    function changedAutoSum() {
      if (vm.autoSum) {
        autmaticSum();
      }
    }

    function autmaticSum() {
      if (vm.autoSum) {
        vm.singlePriceLocal = 0;
        for (var i = 0; i < vm.pricelist.length; i++) {
          vm.singlePriceLocal += vm.pricelist[i] ;
        }
     //   vm.singlePriceLocal = vm.singlePriceLocal / 100;
     vm.singlePriceLocal = vm.singlePriceLocal.toFixed(2);
      }
    }

  }
})();

(function () {
  'use strict';

  angular
    .module('foneClub')
    .controller('EmailDetailController', EmailDetailController);

  EmailDetailController.inject = ['ViewModelUtilsService', 'MainUtils', '$scope','FoneclubeService'];
  function EmailDetailController(ViewModelUtilsService, MainUtils, $scope, FoneclubeService) {
    debugger;
    var vm = this;
    vm.sendemail = sendemail;
    vm.emailstatus = ViewModelUtilsService.modalEmailDetailemailstatus;
    vm.phone = ViewModelUtilsService.modalEmailDetailphone;
    vm.operator = ViewModelUtilsService.modalEmailDetailoperator;
    vm.from = 'marcio.franco@gmail.com';
    vm.bcc = "";

    if (vm.operator == "1") {
      if (vm.emailstatus == "1" || vm.emailstatus == "2") {
        vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
        vm.subject = 'Solicitação de bloqueio de linha por perda/roubo';
        vm.cc = 'suporte@foneclube.com.br';
        vm.body = "Emprsa: Freenetcom Soluções em TI EIRELI" +
          " CNPJ: 08.453.543 / 0001 - 76" +
          " Gostaria de solicitar o bloqueio por perda / roubo temporário da(s) seguinte(s) linha(s):" + vm.phone + ""+
        "Caso alguma linha ja esteja suspensa, favor manter a suspensão e nos informar a data que foi efetivada o bloqueio." +
          "At" +
          "Marcio Guiamaraes Franco" +
          "Gestor";
      }
      else if (vm.emailstatus == "4") {
        vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
        vm.subject = 'Solicitação de bloqueio voluntario 4 meses (anatel)';
        vm.cc = 'suporte@foneclube.com.br';
        vm.body = "Emprsa: Freenetcom Soluções em TI EIRELI" +
          " CNPJ: 08.453.543 / 0001 - 76" +
          " Gostaria de solicitar o suspensão voluntaria de 4 meses da(s) seguinte(s) linha(s):" + vm.phone + ""+
        " Caso alguma linha ja esteja suspensa, favor manter a suspensão e nos informar a data que foi efetivada o bloqueio." +
          "At" +
          " Marcio Guimarães Franco" +
          " Gestor";
      }

      else if (vm.emailstatus == "3") {
        vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
        vm.subject = 'Solicitação de Desbloqueio e ativação de linhas';
        vm.cc = 'suporte@foneclube.com.br';
        vm.body = "Emprsa: Freenetcom Soluções em TI EIRELI" +
          "CNPJ: 08.453.543 / 0001 - 76" +
          "Gostaria de solicitar reversão de qualquer bloqueio ou suspensão e ativação e liberação de usdo de todos os serviços(dados e chamadas) da(s) seguinte(s) linha(s):" +
          vm.phone + " Caso alguma linha ja esteja suspensa, favor manter a suspensão e nos informar a data que foi efetivada o bloqueio." +
          "At" +
          "Marcio Guimarães Franco" +
          "Gestor";
      }

      else if (vm.emailstatus == "5") {
        vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
        vm.subject = 'Solicitação de Desbloqueio e ativação de linhas';
        vm.cc = 'suporte@foneclube.com.br';
        vm.body = "Emprsa: Freenetcom Soluções em TI EIRELI" +
          "CNPJ: 08.453.543 / 0001 - 76" +
          "Gostaria de solicitar reversão de qualquer bloqueio ou suspensão e ativação e liberação de usdo de todos os serviços(dados e chamadas) da(s) seguinte(s) linha(s):" +
          vm.phone + " Caso alguma linha ja esteja suspensa, favor manter a suspensão e nos informar a data que foi efetivada o bloqueio." +
          "At" +
          "Marcio Guimarães Franco" +
          "Gestor";
      }

      else if (vm.emailstatus == "6") {
        vm.email = ViewModelUtilsService.modalEmailDetailemail + ',relacionamentoPJ1_LD2.br@telefonica.com'
        vm.subject = 'Pedido de alteraços de serviços – Contrato Único';
        vm.cc = 'suporte@foneclube.com.br';
        vm.body = "Segue em anexo Formulário de Pedido (Contrato Unico) com alterações requisitadas." +
          "​Emprsa: Freenetcom Soluções em TI EIRELI"
        "CNPJ: 08.453.543 / 0001 - 76" +

          "Estes pedidos tem em anexo os seguintes documentos para verificação:" +

          "1) Contrato Unico" +
          "2) Ultima alteração contratual da Freenetcom Soluções em TI EIRELI" +
          "3) Formulario de pedido de Contrato Unico" +

          "At" +
          "Marcio Guiamaraes Franco" +
          "Gestor";
      }
      else {
        vm.subject = '';
        vm.cc = '';
        vm.body = '';
        vm.bcc = '';

      }

    }
    else {

      if (vm.emailstatus == "1" || vm.emailstatus == "2") {
        vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br'
        vm.subject = 'Solicitação de bloqueio de linha por perda/roubo';
        vm.cc = 'suporte@foneclube.com.br';
        vm.body = "Segue solicitações de alterações e as linhas de referencia para cada pacote:" +
          "Empresa: Freenetcom Soluções em TI EIRELI" +
          "CNPJ: 08.453.543 / 0001 - 76" +
          "Nº do Cliente: 939144068" +
          "Nº da Conta: 100387217" +

          "Mudanças: Bloqueio por perda / roubo das seguintes linha:"

        "At" +
          "Marcio Guiamaraes Franco"
        "Gestor";
      }
      else if (vm.emailstatus == "4") {
        vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
        vm.subject = 'Solicitação de bloqueio voluntario 4 meses (anatel)';
        vm.cc = 'suporte@foneclube.com.br';
        vm.body = "Emprsa: Freenetcom Soluções em TI EIRELI"
        "CNPJ: 08.453.543 / 0001 - 76" +
          "Gostaria de solicitar o suspensão voluntaria de 4 meses da(s) seguinte(s) linha(s):" + vm.phone + ""+

        "Caso alguma linha ja esteja suspensa, favor manter a suspensão e nos informar a data que foi efetivada o bloqueio." +
          "At" +
          "Marcio Guimarães Franco" +
          "Gestor";
      }

      else if (vm.emailstatus == "3") {
        vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
        vm.subject = 'Solicitação de Desbloqueio e ativação de linhas';
        vm.cc = 'suporte@foneclube.com.br';
        vm.body = "Emprsa: Freenetcom Soluções em TI EIRELI" +
          "CNPJ: 08.453.543 / 0001 - 76" +
          "Gostaria de solicitar reversão de qualquer bloqueio ou suspensão e ativação e liberação de usdo de todos os serviços(dados e chamadas) da(s) seguinte(s) linha(s):" +
          vm.phone + " Caso alguma linha ja esteja suspensa, favor manter a suspensão e nos informar a data que foi efetivada o bloqueio." +
          "At" +
          "Marcio Guimarães Franco" +
          "Gestor";
      }

      else if (vm.emailstatus == "5") {
        vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
        vm.subject = 'Solicitação de Desbloqueio e ativação de linhas';
        vm.cc = 'suporte@foneclube.com.br';
        vm.body = "Emprsa: Freenetcom Soluções em TI EIRELI" +
          "CNPJ: 08.453.543 / 0001 - 76" +
          "Gostaria de solicitar reversão de qualquer bloqueio ou suspensão e ativação e liberação de usdo de todos os serviços(dados e chamadas) da(s) seguinte(s) linha(s):" + vm.phone + ""+

        "Caso alguma linha ja esteja suspensa, favor manter a suspensão e nos informar a data que foi efetivada o bloqueio." +
          "At" +
          "Marcio Guimarães Franco" +
          "Gestor";
      }

      else if (vm.emailstatus == "6") {
        vm.email = ViewModelUtilsService.modalEmailDetailemail + ',GSINC@claro.com.br';
        vm.subject = 'Solicitação de troca de planos';
        vm.cc = 'suporte@foneclube.com.br';
        vm.body = "Segue solicitações de alterações e as linhas de referencia para cada pacote:" +
          " Empresa: Freenetcom Soluções em TI EIRELI" +
          " CNPJ: 08.453.543 / 0001 - 76" +
          " Nº do Cliente: 939144068" +
          " Nº da Conta: 100387217" +

          "Mudanças:" +

          " Linha Referencia:" +
          "100mb R$9, 90(21) 96620 9299" +
          "3GB MAX R$34, 90(21) 99339 0000" +
          "6gb - 3GB em Dobro R$49, 90(21) 96409 8283" +
          "10GB - 5GB em Dobro R$64, 60(21) 99103 0000" +
          "20GB - 10gb em Dobro R$74, 90(21) 97555 7325" +

          "At" +
          "Marcio Guimarães Franco" +
          "+Gestor";
      }
      else {
        vm.subject = '';
        vm.cc = '';
        vm.body = '';
        vm.bcc = '';

      }
    }

    function sendemail(vm) {
     
      FoneclubeService.SendEmailStatus(vm).then(function (result) {
        alert('Email sent successfully');
        //debugger;
        //if (result["intIdPaymentType"] == 1) {
        //  debugger;
        //  /*ViewModelUtilsService.showModalRepeatBoleto(result,customer);*/
        //  ViewModelUtilsService.showModalRepeatCard(result, customer);
        //}
        ///*else if(result["intIdPaymentType"]==1){
        //    ViewModelUtilsService.showModalRepeatCard(result,customer);
        //}
        //else if(result["intIdPaymentType"]==3)
        //    {
                
        //    }*/
      })
        .catch(function (error) {
          console.log('catch error');
          console.log(error);
        });
      //FoneclubeService.SendEmailStatus(vm).then(function (result) {
      //  //console.log(result);
        
      //}).catch(function (error) {
      //  console.log('error: ' + error);
      //});
    }



  }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('ExistentCardPaymentModalController', ExistentCardPaymentModalController);

    ExistentCardPaymentModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainComponents', 'FoneclubeService', 'MainUtils', 'UtilsService', '$scope', 'DialogFactory', '$filter'];
    function ExistentCardPaymentModalController(ViewModelUtilsService, PagarmeService, MainComponents, FoneclubeService, MainUtils, UtilsService, $scope, DialogFactory, $filter) {

        var vm = this;
        vm.etapaDados = true;
        var customer = ViewModelUtilsService.modalExistentCardPaymentData;
        var card = ViewModelUtilsService.modalExistentCardData;
        vm.customer = customer;
        vm.card = card;
        console.log(vm.card)
        var newCustomer;
        var cardData;
        var CARTAO = 1;
        vm.amount = '';
        vm.comment = '';
        vm.cobrancaRealizada = false;
        console.log('ExistentCardPaymentModalController');
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
        vm.onTapCancel = onTapCancel;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;

        vm.years = [2018,2017,2016,2015,2014,2013,2012,2011,2010];
        vm.months = [1,2,3,4,5,6,7,8,9,10,11,12];
        
        vm.year = new Date().getFullYear().toString();
        vm.month = (new Date().getMonth() + 1).toString();

        if (vm.customer.CacheIn) {
            vm.amount = vm.customer.CacheIn;
        }
        
        var existentCustomer = {
            'name' : customer.Name,
            'document_number' : customer.DocumentNumber,
            'email' : customer.Email,
            'address' : getAddress(customer),
            'phone' : getContactPhone(customer)
        }

        vm.existentCustomer = existentCustomer;

        function onTapConfirmarPagamento() {
            if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                return;
            }
            vm.etapaDados = false;
            vm.etapaConfirmacao = true;
        }
        
        function onTapCancel(number){
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }

        function onTapPagar(){
            console.log('tap pagar existente')
            console.log(parseInt(vm.amount))
            console.log(card.id)
            if(parseInt(vm.amount) < 100)
            {
                MainComponents.showSimpleToast('Não é permitido cobranças a baixo de 1 Real', 'Aviso');
                return;
            }

            vm.disableTapPay = true;
            vm.message = 'Iniciando transação';
            PagarmeService.postTransactionExistentCard(vm.amount, card.id, existentCustomer).then(function(result){
                vm.message = 'Transação efetuada';
                debugger;
                PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){
                        vm.message = 'Transação concluída';

                        var emailObject = {
                            'To': vm.existentCustomer.email, //vm.existentCustomer
                            'TargetName' : vm.existentCustomer.name,
                            'TargetTextBlue' : $filter('currency')(vm.amount / 100, ""),
                            // 'TargetSecondaryText' : vm.commentBoleto,
                            'TemplateType' : 1
                        }

                        FoneclubeService.postSendEmail(emailObject).then(function(result){
                            console.log('FoneclubeService.postHistoryPayment');
                            console.log(result);
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);
                        });

                        saveHistoryPayment();
                        vm.disableTapPay = false;
                        vm.cobrancaRealizada = true;                        
                    })
                    .catch(function(error){
                        vm.disableTapPay = false;
                        try{
                            vm.message = 'Erro na captura da transação' + error.status;
                        }
                        catch(erro){
                            vm.message = 'Erro na captura da transação'
                        }
                        console.log(error);
                    });
             }, function(error) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                vm.disableTapPay = false;
            }).catch(function (error) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                vm.disableTapPay = false;
            });
        }

        function saveHistoryPayment(){
            console.log('saveHistoryPayment');
            console.log(MainUtils.getAgent());
            console.log(vm.comment);
           
            var customerCharging = {
                Id: vm.customer.Id,
                Charging:{
                    Comment:vm.comment,
                    Ammount: vm.amount,
                    CollectorName: MainUtils.getAgent(),
                    PaymentType: CARTAO,
                    AnoVingencia:vm.year,
                    MesVingencia:vm.month
                }
            }
            FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                console.log('FoneclubeService.postHistoryPayment');
                console.log(result);
            })
            .catch(function(error){
                console.log('catch error');
                console.log(error);
            });

        }

        function getContactPhone(customer){
            var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
            if (!contacts || contacts.length == 0 || contacts[0].DDD == '' || contacts[0].Number == '') {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                return null;
            } else {
                return {
                    'ddd' : contacts[0].DDD.toString(),
                    'number' : contacts[0].Number.toString()
                }
            }
        }
        
        function getAddress(customer) {
            var address = customer.Adresses;
            if (!address || address.length == 0) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                return null;
            } else {
                return {
                    'street' : address[0].Street,
                    'street_number' : address[0].StreetNumber,
                    'neighborhood' : address[0].Neighborhood,
                    'zipcode' : address[0].Cep,
                    'city': address[0].City,
                    'uf': address[0].State
                }
            }
        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('NewCardPaymentModalController', NewCardPaymentModalController);

// <<<<<<< HEAD
    NewCardPaymentModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter'];
    function NewCardPaymentModalController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter) {
// =======
//     NewCardPaymentModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainComponents', 'MainUtils', 'FoneclubeService', 'UtilsService'];
//     function NewCardPaymentModalController(ViewModelUtilsService, PagarmeService, MainComponents, MainUtils, FoneclubeService, UtilsService) {
// >>>>>>> release-branch

        var vm = this;
        var customer = ViewModelUtilsService.modalNewCardPaymentData;
        vm.customer = customer;
        var newCustomer;
        var cardData;
        var CARTAO = 1;
        
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
        vm.onTapCancel = onTapCancel;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;

        vm.years = [2018,2017,2016,2015,2014,2013,2012,2011,2010];
        vm.months = [1,2,3,4,5,6,7,8,9,10,11,12];
        
        vm.year = new Date().getFullYear().toString();
        vm.month = (new Date().getMonth() + 1).toString();

        vm.etapaDados = true;
        

        function onTapConfirmarPagamento() {
            debugger
            if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                return;
            }
            vm.etapaDados = false;
            vm.etapaConfirmacao = true;
        }
        
        function onTapCancel(number){
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }
        
        vm.cardHolderName = '';
        vm.cardNumber = '';
        vm.cardExpirationMonth = '';
        vm.cardExpirationYear = '';
        vm.cardCVV = '';
        vm.amount = '';
        vm.statusTransaction = ''
        vm.comment = '';
        vm.cobrancaRealizada = false;
        if (vm.customer.CacheIn) {
            vm.amount = vm.customer.CacheIn;
        }

        console.log('NewCardPaymentModalController');

        newCustomer = {
                    'name' : customer.Name,
                    'document_number' : customer.DocumentNumber,
                    'email' : customer.Email,
                    'address' : getAddress(customer),
                    'phone' : getContactPhone(customer)
        }

        vm.newCustomer = newCustomer;


        if(!customer.IdPagarme)
        {
            console.log('não tem conta no pagarme >>>');
            //não tem conta no pagarme ainda
        }
        else
        {
            //tem conta no pagarme
            //customer.IdPagarme
        }

        function onTapPagar(){
            debugger
            cardData = getCardData();

             console.log("-----------------------")
             console.log(newCustomer)
             console.log(cardData)
             console.log(vm.amount);

            if(parseInt(vm.amount) < 100)
            {
                DialogFactory.showMessageDialog({mensagem:'Não é permitido cobranças a baixo de 1 Real', titulo: 'Aviso'});                            
                return;
            }

            paymentNewCustomer();
        }

        function getContactPhone(customer){
            var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
            if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                return null;
            } else {
                return {
                    'ddd' : contacts[0].DDD.toString(),
                    'number' : contacts[0].Number.toString()
                }
            }
        }
        
        function getAddress(customer) {
            var address = customer.Adresses;
            if (!address || address.length == 0 ) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                return null;
            } else {
                return {
                    'street' : address[0].Street,
                    'street_number' : address[0].StreetNumber,
                    'neighborhood' : address[0].Neighborhood,
                    'zipcode' : address[0].Cep,
                    'city': address[0].City,
                    'uf': address[0].State
                }
            }
        }

        function getCardData(){
            var expirationMonth = vm.cardExpirationMonth;

            return {
                cardHolderName: vm.cardHolderName.toUpperCase(),
                cardExpirationMonth: expirationMonth,
                cardExpirationYear: vm.cardExpirationYear,
                cardNumber: vm.cardNumber,
                cardCVV:vm.cardCVV
            }
        }

        function paymentNewCustomer(){

            debugger;
            vm.disableTapPay = true;

            PagarmeService.generateCardHash(cardData).then(function(cardHash){

                vm.statusTransaction = 'Criptografando dados cartão';
                debugger;
                PagarmeService.postTransactionCard(vm.amount, cardHash, newCustomer)
                .then(function(result){

                    debugger;
                    vm.statusTransaction = 'Transação em andamento';


                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){
                        debugger;

                        var customCustomer = {
                            Id:vm.customer.Id,
                            IdPagarme:result.customer.id
                        }

                        var emailObject = {
                            'To': vm.newCustomer.email, //vm.newCustomer.email
                            'TargetName' : vm.newCustomer.name,
                            'TargetTextBlue' : $filter('currency')(vm.amount / 100, ""),
                            // 'TargetSecondaryText' : vm.commentBoleto,
                            'TemplateType' : 1
                        }

                        FoneclubeService.postSendEmail(emailObject).then(function(result){
                            console.log('FoneclubeService.postHistoryPayment');
                            console.log(result);
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);
                        });
                        
                        FoneclubeService.postUpdatePagarmeID(customCustomer).then(function(result){
                            console.log('FoneclubeService.postUpdatePagarmeID');
                            console.log(result);

                            vm.statusTransaction = 'Transação concluída';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true;  
                            saveHistoryPayment();
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);

                            vm.statusTransaction = 'Transação concluída sem associar ID pagarme, guarde o ID: result.customer.id , e informe o desenvolvimento';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true; 
                            saveHistoryPayment();
                            
                        });
                        // result.customer.id


                        
                    })
                    .catch(function(error){
                        try{        
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação' + error.status, titulo: 'Aviso'});                                                  

                        }
                        catch(erro){  
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação', titulo: 'Aviso'});                                                        
                        }
                        console.log(error);

                    });


                })
                .catch(function(error){
                    try{
                        console.log(error.data.errors)
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        error.data.errors.forEach(function(erro) {
                            DialogFactory.showMessageDialog({mensagem:'Erro na transação: ' + erro.message, titulo: 'Aviso'});                              
                        }, this);

                    }
                    catch(erro){
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        DialogFactory.showMessageDialog({mensagem:'Erro na transação', titulo: 'Aviso'});                                                      
                    }

                    console.log(error);
                });


            })
            .catch(function(error){
                var erro;
                for(var i in error)
                {

                    erro = error[i];
                }
                vm.etapaDados = true;
                vm.disableTapPay = false;
                vm.etapaConfirmacao = false;
                DialogFactory.showMessageDialog({mensagem:'Erro na transação '+ erro, titulo: 'Aviso'});                 

            });
        }

        function saveHistoryPayment(){

            try
            {
                console.log('saveHistoryPayment');
                console.log(MainUtils.getAgent());
                console.log(vm.comment);
                //vm.comment
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: CARTAO,
                        AnoVingencia:vm.year,
                        MesVingencia:vm.month
                    }
                }


                FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                    console.log('FoneclubeService.postHistoryPayment');
                    console.log(result);
                })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });

            }
            catch(erro){

            }


        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }


    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('OrdemServico', OrdemServico);

    OrdemServico.inject = ['$scope', 'ViewModelUtilsService', 'FoneclubeService', 'MainUtils', '$stateParams', 'FlowManagerService'];
    function OrdemServico($scope, ViewModelUtilsService, FoneclubeService, MainUtils, $stateParams, FlowManagerService) {
        var vm = this;
        vm.cpf = $stateParams.data ? $stateParams.data.DocumentNumber : '';
        vm.requesting = true;
        vm.onTapSendOS = onTapSendOS;
        vm.goBack = goBack;
        
        init();
        function init() {
            if (!vm.cpf) {
                FlowManagerService.changeCustomersView();
                return;
            }
            vm.data = {
                warn: true,
                text: ''
            };
            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                vm.customer = result;
                vm.requesting = false;
            });
        }
        
        function onTapSendOS() {
            MainUtils.setAgent('Cardozo');
            var order = {
                "Id": vm.customer.Id,
                "ServiceOrder": {
                    "AgentName": MainUtils.getAgent(),
                    "AgentId": 1,
                    "PendingInteraction": vm.data.warn,
                    "Description": vm.data.text
                }
            }
            FoneclubeService.postOrderServicePerson(order).then(function(data){
                vm.requesting = false;
                if(result) {
                    FlowManagerService.changeCustomersView();                    
                    DialogFactory.showMessageConfirm({titulo:'Aviso', mensagem:'Ordem de serviço adicionada com sucesso.'})
                    .then(function(result) {
                        if(result) {
                            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                                ViewModelUtilsService.showModalCustomer(result);
                            });
                        }
                    })                    
                }
            }).catch(function(error) {
                FlowManagerService.changeCustomersView();                   
                DialogFactory.showMessageDialog({mensagem:'Houve um erro.', titulo: 'Aviso'});                                           
            });
        }
        
        function goBack() {
            FlowManagerService.goBack();
            FoneclubeService.getCustomerByCPF(vm.cpf).then(function(result){
                ViewModelUtilsService.showModalCustomer(result);
            });
        }
    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('PaymentDetailController', PaymentDetailController);

    PaymentDetailController.inject = ['ViewModelUtilsService', 'MainUtils'];
    function PaymentDetailController(ViewModelUtilsService, MainUtils) {
        var vm = this;
        vm.customer = ViewModelUtilsService.modalPaymentDetailCustomer;
        vm.history = ViewModelUtilsService.modalPaymentDetailHistory;

    }
})();
(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .controller('RepeatBoletoModalController', RepeatBoletoModalController);
    
    // <<<<<<< HEAD
        RepeatBoletoModalController.inject = ['ViewModelUtilsService', '$scope','PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService'];
        function RepeatBoletoModalController(ViewModelUtilsService, $scope,PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService) {
    // =======
    //     BoletoModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainComponents', 'MainUtils', 'FoneclubeService', 'UtilsService'];
    //     function BoletoModalController(ViewModelUtilsService, PagarmeService, MainComponents, MainUtils, FoneclubeService, UtilsService) {
    // >>>>>>> release-branch
    
            var vm = this;
            debugger;
            var customer = ViewModelUtilsService.modalBoletoData;
            var payment = ViewModelUtilsService.modalRepeatBoletoData;
           
            
            vm.customer = customer;
            vm.payment=payment;
             
            var newCustomer;
            var BOLETO = 2;
            
            
            vm.etapaDados = true;
            vm.cobrancaRealizada = false;
            //vm.amount = vm.customer.CacheIn ? vm.customer.CacheIn : '';
            vm.comment = '';
            console.log('RepeatBoletoModalController');
            vm.onTapPagar = onTapPagar;
            vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
            vm.onTapCancel = onTapCancel;
            vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;
            vm.enviaEmail = true;
            
            vm.amount=vm.payment.txtAmmountPayment/100;
            vm.commentBoleto='cobrando boleto de '+ (vm.payment.txtAmmountPayment/100);
            vm.comment='cobrando boleto de '+ (vm.payment.txtAmmountPayment/100);
            var existentCustomer = {
                        'name' : customer.Name,
                        'document_number' : customer.DocumentNumber,
                        'email' : customer.Email,
                        'address' : getAddress(customer),
                        'phone' : getContactPhone(customer)
    
                 }
            /*function RepeatBoletoModalController($scope) {
                debugger;
                $scope.vm.amount = 121;
                $scope.vm.commentBoleto="0123";
                $scope.vm.comment="123";
            }*/
    
            function onTapConfirmarPagamento() {
                if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                    return;
                }
                vm.etapaDados = false;
                vm.etapaConfirmacao = true;
            }
            
            function onTapCancel(number){
                vm.etapaDados = true;
                vm.etapaConfirmacao = false;
                if (number == 1){
                    vm.amount = 0;
                    vm.comment = '';
                    vm.cobrancaRealizada = false;   
                }
            }
            
            function onTapPagar(){
    debugger;
                console.log('tap pagar boleto')
                console.log(parseInt(vm.amount))
                if(parseInt(vm.amount) < 100)
                {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Não é permitido cobranças a baixo de 1 Real'});                
                    return;
                }
    
                vm.disableTapPay = true;
                vm.message = 'Iniciando transação';
                vm.instructions = 'FoneClub - 2017'
                debugger;
                // PagarmeService.postBoleto(vm.amount, vm.commentBoleto, existentCustomer)
                //  .then(function(result){
                //     console.log(result);

                if(!vm.expirationDateField)
                {
                    vm.expirationDateField = 5; 
                }
                else{
                   if(vm.expirationDateField <= 0)
                   {
                    vm.expirationDateField = 5; 
                   } 
                }

                     PagarmeService.postBoletoDirect(vm.amount, vm.commentBoleto, existentCustomer, addExpirationDays(vm.expirationDateField)).then(function(resultCapture){
    
                            debugger;
                            if(vm.enviaEmail)
                            {
                                debugger;
                                var emailObject = {
                                    'To': existentCustomer.email, //existentCustomer.email
                                    'TargetName' : existentCustomer.name,
                                    'TargetTextBlue': resultCapture.boleto_url,
                                    'TargetSecondaryText' : vm.commentBoleto,
                                    'TemplateType' : 2
                                }
        
                                FoneclubeService.postSendEmail(emailObject).then(function(result){
                                    console.log('FoneclubeService.postHistoryPayment');
                                    console.log(result);
                                })
                                .catch(function(error){
                                    console.log('catch error');
                                    console.log(error);
                                });
                            }
                            
    
                            try{
    
                                PagarmeService.notifyCustomerBoleto(resultCapture.id, existentCustomer.email).then(function(resultNotify){
                                vm.message = 'Boleto gerado com sucesso'
                                vm.cobrancaRealizada = true;
                                vm.disableTapPay = false;
                                    })
                                    .catch(function(error){
                                    try{
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;                                    
                                    }
                                    catch(erro){
                                        vm.message = 'Boleto gerado com sucesso. Sem envio de notificação'
                                        vm.cobrancaRealizada = true;
                                        vm.disableTapPay = false;                                    
                                    }
                                    console.log(error);
    
                                });
    
                            }
                            catch(erro){
    
                            }
    
    
                        saveHistoryPayment(resultCapture.id, resultCapture.acquirer_id);
    
                            vm.message = 'Boleto gerado com sucesso'
                        })
                        .catch(function(error){
                            try{
                                DialogFactory.showMessageDialog({mensagem: 'Erro na captura da transação' + error.status});                             
                            }
                            catch(erro){
                                DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação'});                             
                            }
                            console.log(error);
                        });
                // }, function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // }).catch(function (error) {
                //     DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'Erro ao realizar transação, verifique os dados do cliente. ' + "(" + error.data.errors[0].message + ")"});
                //     vm.disableTapPay = false;
                // });
    
            }
    
            function saveHistoryPayment(idBoleto, acquirer_id){
    
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: BOLETO,
                        BoletoId: idBoleto,
                        AcquireId: acquirer_id
                    }
                }
    
                FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                    console.log('FoneclubeService.postHistoryPayment');
                    console.log(result);
                })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });
    
    
            }
    
    
            function getContactPhone(customer){
                var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
                if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                    return null;
                } else {
                    return {
                        'ddd' : contacts[0].DDD.toString(),
                        'number' : contacts[0].Number.toString()
                    }
                }
            }
            
            function getAddress(customer) {
                var address = customer.Adresses;
                if (!address || address.length == 0) {
                    DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                    return null;
                } else {
                    return {
                        'street' : address[0].Street,
                        'street_number' : address[0].StreetNumber,
                        'neighborhood' : address[0].Neighborhood,
                        'zipcode' : address[0].Cep,
                        'city': address[0].City,
                        'uf': address[0].State
                    }
                }
            }
            
            function onTapPaymentHistoryDetail(history) {
                ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
            }

            function addExpirationDays(days) {
                var dat = new Date();
                dat.setDate(dat.getDate() + days);
                return dat.toISOString();
              }
    
        }
    })();
(function() {
'use strict';

    angular
        .module('foneClub')
        .controller('RepeatCardController', RepeatCardController);

// <<<<<<< HEAD
    RepeatCardController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainUtils', 'FoneclubeService', 'DialogFactory', 'UtilsService', '$filter'];
    function RepeatCardController(ViewModelUtilsService, PagarmeService, MainUtils, FoneclubeService, DialogFactory, UtilsService, $filter) {
// =======
//     NewCardPaymentModalController.inject = ['ViewModelUtilsService', 'PagarmeService', 'MainComponents', 'MainUtils', 'FoneclubeService', 'UtilsService'];
//     function NewCardPaymentModalController(ViewModelUtilsService, PagarmeService, MainComponents, MainUtils, FoneclubeService, UtilsService) {
// >>>>>>> release-branch        
        
        var vm = this;
        var customer = ViewModelUtilsService.modalCardData;  
        vm.customer = customer;
        var payment=ViewModelUtilsService.modalRepeatCardData;
        var newCustomer;
        var cardData;
        var CARTAO = 1;
        
        vm.onTapPagar = onTapPagar;
        vm.onTapConfirmarPagamento = onTapConfirmarPagamento;
        vm.onTapCancel = onTapCancel;
        vm.onTapPaymentHistoryDetail = onTapPaymentHistoryDetail;

        vm.years = [2018,2017,2016,2015,2014,2013,2012,2011,2010];
        vm.months = [1,2,3,4,5,6,7,8,9,10,11,12];
        
        vm.year = new Date().getFullYear().toString();
        vm.month = (new Date().getMonth() + 1).toString();

        vm.etapaDados = true;
        

        function onTapConfirmarPagamento() {
            debugger
            if (!getAddress(vm.customer) || !getContactPhone(vm.customer)) {
                return;
            }
            vm.etapaDados = false;
            vm.etapaConfirmacao = true;
        }
        
        function onTapCancel(number){
            vm.etapaDados = true;
            vm.etapaConfirmacao = false;
            if (number == 1){
                vm.amount = 0;
                vm.comment = '';
                vm.cobrancaRealizada = false;   
            }
        }
        
        vm.cardHolderName = '';
        vm.cardNumber = '';
        vm.cardExpirationMonth = '';
        vm.cardExpirationYear = '';
        vm.cardCVV = '';
        vm.amount = '';
        vm.statusTransaction = ''
        vm.comment = '';
        vm.cobrancaRealizada = false;
        if (vm.customer.CacheIn) {
            vm.amount = vm.customer.CacheIn;
        }

        console.log('RepeatCardController');

        newCustomer = {
                    'name' : customer.Name,
                    'document_number' : customer.DocumentNumber,
                    'email' : customer.Email,
                    'address' : getAddress(customer),
                    'phone' : getContactPhone(customer)
        }

        vm.newCustomer = newCustomer;


        if(!customer.IdPagarme)
        {
            console.log('não tem conta no pagarme >>>');
            //não tem conta no pagarme ainda
        }
        else
        {
            //tem conta no pagarme
            //customer.IdPagarme
        }

        function onTapPagar(){
            debugger
            cardData = getCardData();

             console.log("-----------------------")
             console.log(newCustomer)
             console.log(cardData)
             console.log(vm.amount);

            if(parseInt(vm.amount) < 100)
            {
                DialogFactory.showMessageDialog({mensagem:'Não é permitido cobranças a baixo de 1 Real', titulo: 'Aviso'});                            
                return;
            }

            paymentNewCustomer();
        }

        function getContactPhone(customer){
            var contacts = UtilsService.getContactPhoneFromPhones(customer.Phones);
            if (!contacts || contacts.length == 0  || contacts[0].DDD == '' || contacts[0].Number == '') {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar Telefone de Contato para este cliente.'});
                return null;
            } else {
                return {
                    'ddd' : contacts[0].DDD.toString(),
                    'number' : contacts[0].Number.toString()
                }
            }
        }
        
        function getAddress(customer) {
            var address = customer.Adresses;
            if (!address || address.length == 0 ) {
                DialogFactory.showMessageDialog({titulo: 'Aviso', mensagem: 'É necessário cadastrar um Endereço para este cliente.'});
                return null;
            } else {
                return {
                    'street' : address[0].Street,
                    'street_number' : address[0].StreetNumber,
                    'neighborhood' : address[0].Neighborhood,
                    'zipcode' : address[0].Cep,
                    'city': address[0].City,
                    'uf': address[0].State
                }
            }
        }

        function getCardData(){
            var expirationMonth = vm.cardExpirationMonth;

            return {
                cardHolderName: vm.cardHolderName.toUpperCase(),
                cardExpirationMonth: expirationMonth,
                cardExpirationYear: vm.cardExpirationYear,
                cardNumber: vm.cardNumber,
                cardCVV:vm.cardCVV
            }
        }

        function paymentNewCustomer(){

            debugger;
            vm.disableTapPay = true;

            PagarmeService.generateCardHash(cardData).then(function(cardHash){

                vm.statusTransaction = 'Criptografando dados cartão';
                debugger;
                PagarmeService.postTransactionCard(vm.amount, cardHash, newCustomer)
                .then(function(result){

                    debugger;
                    vm.statusTransaction = 'Transação em andamento';


                    PagarmeService.postCaptureTransaction(result.token, vm.amount).then(function(result){
                        debugger;

                        var customCustomer = {
                            Id:vm.customer.Id,
                            IdPagarme:result.customer.id
                        }

                        var emailObject = {
                            'To': vm.newCustomer.email, //vm.newCustomer.email
                            'TargetName' : vm.newCustomer.name,
                            'TargetTextBlue' : $filter('currency')(vm.amount / 100, ""),
                            // 'TargetSecondaryText' : vm.commentBoleto,
                            'TemplateType' : 1
                        }

                        FoneclubeService.postSendEmail(emailObject).then(function(result){
                            console.log('FoneclubeService.postHistoryPayment');
                            console.log(result);
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);
                        });
                        
                        FoneclubeService.postUpdatePagarmeID(customCustomer).then(function(result){
                            console.log('FoneclubeService.postUpdatePagarmeID');
                            console.log(result);

                            vm.statusTransaction = 'Transação concluída';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true;  
                            saveHistoryPayment();
                        })
                        .catch(function(error){
                            console.log('catch error');
                            console.log(error);

                            vm.statusTransaction = 'Transação concluída sem associar ID pagarme, guarde o ID: result.customer.id , e informe o desenvolvimento';
                            vm.disableTapPay = false;
                            vm.cobrancaRealizada = true; 
                            saveHistoryPayment();
                            
                        });
                        // result.customer.id


                        
                    })
                    .catch(function(error){
                        try{        
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação' + error.status, titulo: 'Aviso'});                                                  

                        }
                        catch(erro){  
                            DialogFactory.showMessageDialog({mensagem:'Erro na captura da transação', titulo: 'Aviso'});                                                        
                        }
                        console.log(error);

                    });


                })
                .catch(function(error){
                    try{
                        console.log(error.data.errors)
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        error.data.errors.forEach(function(erro) {
                            DialogFactory.showMessageDialog({mensagem:'Erro na transação: ' + erro.message, titulo: 'Aviso'});                              
                        }, this);

                    }
                    catch(erro){
                        vm.etapaDados = true;
                        vm.disableTapPay = false;
                        vm.etapaConfirmacao = false;
                        DialogFactory.showMessageDialog({mensagem:'Erro na transação', titulo: 'Aviso'});                                                      
                    }

                    console.log(error);
                });


            })
            .catch(function(error){
                var erro;
                for(var i in error)
                {

                    erro = error[i];
                }
                vm.etapaDados = true;
                vm.disableTapPay = false;
                vm.etapaConfirmacao = false;
                DialogFactory.showMessageDialog({mensagem:'Erro na transação '+ erro, titulo: 'Aviso'});                 

            });
        }

        function saveHistoryPayment(){

            try
            {
                console.log('saveHistoryPayment');
                console.log(MainUtils.getAgent());
                console.log(vm.comment);
                //vm.comment
                var customerCharging = {
                    Id: vm.customer.Id,
                    Charging:{
                        Comment:vm.comment,
                        Ammount: vm.amount,
                        CollectorName: MainUtils.getAgent(),
                        PaymentType: CARTAO
                    }
                }


                FoneclubeService.postHistoryPayment(customerCharging).then(function(result){
                    console.log('FoneclubeService.postHistoryPayment');
                    console.log(result);
                })
                .catch(function(error){
                    console.log('catch error');
                    console.log(error);
                });

            }
            catch(erro){

            }


        }
        
        function onTapPaymentHistoryDetail(history) {
            ViewModelUtilsService.showModalPaymentHistoryDetail(history, vm.customer);
        }


    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('FoneclubeService', FoneclubeService);

    FoneclubeService.inject = ['$q','HTTPService'];
    function FoneclubeService($q,HTTPService) {

        // var urlApi = 'http://localhost:57078/api';

        //API HOMOL TEMP
        var urlApi = 'http://homol-api.p2badpmtjj.us-east-2.elasticbeanstalk.com/api';

        //API QUE VAI SER PROD
    //   var urlApi = 'http://default-environment.p2badpmtjj.us-east-2.elasticbeanstalk.com/api'

        this.postBasePerson = postBasePerson;
        this.postUpdatePerson = postUpdatePerson;
        this.postUpdatePersonAdress = postUpdatePersonAdress;
        this.postCheckout = postCheckout;
        this.postHistoryPayment = postHistoryPayment;
        this.postDeletePerson = postDeletePerson;
        this.postUpdateCustomer = postUpdateCustomer;
        this.postOrderServicePerson = postOrderServicePerson;
        this.postChargingClient = postChargingClient;
        this.postChargingClientCommitCard = postChargingClientCommitCard;
        this.postCustomerParent = postCustomerParent;
        this.postUpdatePagarmeID = postUpdatePagarmeID ;
        this.postSendEmail = postSendEmail;
        this.postGeraBoleto = postGeraBoleto
        this.postCustomerComment = postCustomerComment ;
        this.getPlans = getPlans;
        this.getCustomerPlans = getCustomerPlans;
        this.getOperators = getOperators;
        this.getCustomers = getCustomers;
        this.getCustomerByCPF = getCustomerByCPF;
        this.getHistoryPayment = getHistoryPayment;
        this.getCustomerByPhoneNumber = getCustomerByPhoneNumber;
        this.getCustomerById = getCustomerById;
        this.getChargingClients = getChargingClients;
        this.getTblServiceOrders=getTblServiceOrders;
        this.getCustomerParentByPhone=getCustomerParentByPhone;
        this.getAllParents=getAllParents;
        this.getLastPaymentType=getLastPaymentType
        this.getStatusBlockedClaro = getStatusBlockedClaro;
        this.getChargeAndServiceOrderHistory = getChargeAndServiceOrderHistory;
        this.getChargeAndServiceOrderHistoryDinamic = getChargeAndServiceOrderHistoryDinamic;
      this.getStatusCharging = getStatusCharging;
      this.SendEmailStatus = SendEmailStatus;
      
        
        function getLastPaymentType(customer){
            debugger;
            var q=$q.defer();
            HTTPService.get(urlApi.concat('/profile/getpaymentmethod?personID='.concat(customer.Id)))
            .then(function(result){
                debugger;
                q.resolve(result);
            })
            .catch(function(error){
                debugger;
                q.reject(error);
            });

            return q.promise; 
        }
        
        function getCustomerParentByPhone(phoneparent,personid){            
            
            var q=$q.defer();
            HTTPService.get(urlApi.concat('/profile/customer/GetParentbyPhone?phoneparent='+phoneparent+ '&personid='+personid))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise; 
            
        }

        function getAllParents(){
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/customer/GetParentAll'))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getStatusCharging(month, year){
            var q = $q.defer();
            
            HTTPService.get(urlApi.concat('/charging/cobranca/status/vingencia/mes/' + month + '/ano/' + year))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postCustomerComment(commentDetails){
            
            
            var q=$q.defer();
            HTTPService.post(urlApi.concat('/profile/comment'), commentDetails)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise; 
            
        }
        
        
        function postUpdatePerson(personCheckout){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/update'), personCheckout)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postDeletePerson(personCheckout){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/delete/customer'), personCheckout)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postUpdatePersonAdress(personCheckout){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/updateAdress'), personCheckout)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postBasePerson(personCheckout){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/insert'), personCheckout)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postCheckout(personCheckout){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/cadastro'), personCheckout)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function postHistoryPayment(personCharging){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/charging/insert'), personCharging)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function postUpdateCustomer(customer){
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/customer/update'), customer)
            .then(function(data){
                q.resolve(data);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function postOrderServicePerson(param) {
            var q = $q.defer();

            HTTPService.post(urlApi.concat('/profile/service/order'), param)
            .then(function(data){
                q.resolve(data);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }


        function postUpdatePagarmeID(customer){
            // customer/pagarme/id/insert
            var q = $q.defer();
            
                        HTTPService.post(urlApi.concat('/profile/customer/pagarme/id/insert'), customer)
                        .then(function(data){
                            q.resolve(data);
                        })
                        .catch(function(error){
                            q.reject(error);
                        });
            
                        return q.promise;
        }

        function postChargingClient(year, month, param) {
            var q = $q.defer();
            HTTPService.post(urlApi.concat('/charging/').concat(year).concat('/').concat(month).concat('/clients/').concat(param.ClientId).concat('/charging'), param)
            .then(function(data){
                q.resolve(data);
            })
            .catch(function(error){
                q.reject(error);
            });
            return q.promise;
        }

        function postChargingClientCommitCard(year, month, chargingId, param) {
            var q = $q.defer();
            HTTPService.post(urlApi.concat('/charging/').concat(year).concat('/').concat(month).concat('/clients/').concat(param.ClientId).concat('/charging/').concat(chargingId), param)
            .then(function(data){
                q.resolve(data);
            })
            .catch(function(error){
                q.reject(error);
            });
            return q.promise;
        }

        function postCustomerParent(param) {
            var q = $q.defer();
            HTTPService.post(urlApi.concat('/profile/customer/parent/insert'), param)
            .then(function(data){
                q.resolve(data);
            })
            .catch(function(error){
                q.reject(error);
            });
            return q.promise;
        }

        function postSendEmail(param) {
            var q = $q.defer();
            HTTPService.post(urlApi.concat('/email/send'), param)
            .then(function(data){
                q.resolve(data);
            })
            .catch(function(error){
                q.reject(error);
            });
            return q.promise;
        }

        function postGeraBoleto(){
            var q = $q.defer();
            HTTPService.post(urlApi.concat('/pagarme/boleto'), param)
            .then(function(data){
                q.resolve(data);
            })
            .catch(function(error){
                q.reject(error);
            });
            return q.promise;
        }

        function getPlans(){
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/account/plans'))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function getCustomerPlans(register){
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/customer/plans?documentNumber=').concat(register.toString()))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getOperators(){
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/account/operators'))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function getCustomerByCPF(param){

            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/cliente?documentRegister='.concat(param)))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getStatusBlockedClaro(ddd,numeroLinha){
            
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/manager/phones/claro/status/linha/ddd/'+ ddd + '/numeroLinha/'+numeroLinha))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        // api/manager/phones/claro/status/linha/ddd/{ddd}/numeroLinha/{numeroLinha}

        function getCustomers(){

            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/customers'))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getHistoryPayment(id){
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/charges?personID='.concat(id)))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function getTblServiceOrders(id)
        {
            var q = $q.defer();
            HTTPService.get(urlApi.concat('/profile/getorders?personID='.concat(id)))
            .then(function(result)
                  {
                q.resolve(result);
            })
            .catch(function(error)
                  {
                q.reject(error);
            });
            return q.promise;
        }

        function getChargeAndServiceOrderHistory(id)
        {
            var q = $q.defer();
            HTTPService.get(urlApi.concat('/profile/getChargeAndServiceOrderHistory?personID='.concat(id)))
            .then(function(result)
                  {
                q.resolve(result);
            })
            .catch(function(error)
                  {
                q.reject(error);
            });
            return q.promise;
        }

        function getChargeAndServiceOrderHistoryDinamic(id,index)
        {
            var q = $q.defer();
            HTTPService.get(urlApi.concat('/profile/getChargeAndServiceOrderHistory?personID='.concat(id)))
            .then(function(result)
            {
                result.indexLista = index
                q.resolve(result);
            })
            .catch(function(error)
                  {
                q.reject(error);
            });
            return q.promise;
        }


        function getCustomerByPhoneNumber(param) {
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/phoneOwner'), param)
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }
        
        function getCustomerById(id) {
            var q = $q.defer();

            HTTPService.get(urlApi.concat('/profile/cliente/id/'.concat(id)))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }

        function getChargingClients(param){
            var q = $q.defer();
            
            HTTPService.get(urlApi.concat('/charging/').concat(param.year).concat('/').concat(param.month).concat('/clients'))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }


      function SendEmailStatus(emaildetails) {
        var q = $q.defer();
        HTTPService.post(urlApi.concat('/email/sendemailstatus/emaildetails'), emaildetails)
          .then(function (result) {
            q.resolve(result);
          })
          .catch(function (error) {
            q.reject(error);
          });

        return q.promise;
      }

    }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .service('HubDevService', HubDevService);

    HubDevService.inject = ['$q','HTTPService'];

    function HubDevService($q, HTTPService) {

        //teste
        //var apiToken = '5ae973d7a997af13f0aaf2bf60e65803';

        //prod
        var apiToken = '74817fbeb42c87d0a61f20684d3309e3';

        this.validaCPF = validaCPF;
        this.validaCEP = validaCEP;

        function validaCPF(cpf, datanascimento){

            var q = $q.defer();
            var packageNumber = cpf.length > 11 ? 4 : 1;            
            //packages
            //1 CPF Básico 2 CPF Avançado 4 CNPJ Básico 7 CPF Personalizado 8 CPF Personalizado 
            ///{token}/{package}/{type}/{value}
            HTTPService.get('https://api.cpfcnpj.com.br/'.concat(apiToken).concat('/').concat(packageNumber).concat('/').concat('json').concat('/').concat(cpf).concat('/'))           
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }


        function validaCEP(cep){

            var q = $q.defer();

            HTTPService.get('http://viacep.com.br/ws/'.concat(cep).concat('/json/'))
            .then(function(result){
                q.resolve(result);
            })
            .catch(function(error){
                q.reject(error);
            });

            return q.promise;
        }


    }
})();
(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .service('PagarmeService', PagarmeService);
    
        PagarmeService.inject = ['$q','HTTPService'];
    
        function PagarmeService($q, HTTPService) {
    
            //live
            // var apiKey = 'ak_live_fP7ceLSpdBe8gCXGTywVRmC5VTkvN0'
            // var encriptionKey = 'ek_live_U52ijlxsDgB8mk0rzcJde7HYHzqWYl';
    
            //Testes
            var apiKey = 'ak_test_rIMnFMFbwNJR1A5RuTmSULl9xxDdoM';
            var encriptionKey = 'ek_test_5rLvyIU3tqMGHKAj94kpCuqSWT37Ps';
    
            this.getCards = getCards;
            this.getCustomers = getCustomers;
            this.getCustomer = getCustomer;
            this.getCard = getCard;
            this.getStatusBoleto = getStatusBoleto;
            this.getStatusBoletoRecursivo = getStatusBoletoRecursivo;
    
            this.postBoleto = postBoleto;
            this.postBoletoDirect = postBoletoDirect;
            this.postTransactionCard = postTransactionCard;
            this.postTransactionExistentCard = postTransactionExistentCard; //refact pra uma só func
            this.postCaptureTransaction = postCaptureTransaction;
            this.generateCardHash = generateCardHash;
            this.notifyCustomerBoleto = notifyCustomerBoleto;
    
    
    
            function getCards(){
    
                var q = $q.defer();
    
                HTTPService.get('https://api.pagar.me/1/cards?api_key='.concat(apiKey))
                .then(function(result){
                    q.resolve(result);
                })
                .catch(function(error){
                    q.reject(error);
                });
    
                return q.promise;
            }
    
            function getCustomers(){
    
                var q = $q.defer();
                console.log('getCustomers')
                HTTPService.get('https://api.pagar.me/1/customers/?count=10000&api_key='.concat(apiKey))
                .then(function(result){
                    console.log(result)
                    q.resolve(result);
                })
                .catch(function(error){
                    q.reject(error);
                });
    
                return q.promise;
            }
    
            function getCustomer(documentNumber){
    
                var q = $q.defer();
    
                HTTPService.get('https://api.pagar.me/1/customers/?api_key='.concat(apiKey).concat('&document_number=').concat(documentNumber))
                .then(function(result){
                    console.log(result)
                    q.resolve(result);
                })
                .catch(function(error){
                    q.reject(error);
                });
    
                return q.promise;
            }
    
            function getCard(customerId){
                var q = $q.defer();
    
                HTTPService.get('https://api.pagar.me/1/cards?api_key='.concat(apiKey).concat('&customer_id=').concat(customerId))
                .then(function(result){
                    q.resolve(result);
                })
                .catch(function(error){
                    q.reject(error);
                });
    
                return q.promise;
            }
    
            function postBoleto(amount, instructions, customer){
                var q = $q.defer();
    
                debugger;
                var parameters = {
                    'api_key':apiKey,
                    'encryption_key':encriptionKey,
                    'amount': amount,
                    'payment_method':'boleto',
                    'data-customer-data':true,
                    'customer':customer,
                    'boleto_instructions': instructions
                };
                
    
                HTTPService.post('https://api.pagar.me/1/transactions', parameters)
                .then(function(result){
                    console.log(result);
                    q.resolve(result);
                })
                .catch(function(error){
                    q.reject(error);
                });
    
                return q.promise;
            }

            function postBoletoDirect(amount, instructions, customer, expirationDate){
                var q = $q.defer();
                
                            debugger;
                            // var parameters = {
                            //     'api_key':apiKey,
                            //     // 'encryption_key':encriptionKey,
                            //     'amount': amount,
                            //     'payment_method':'boleto',
                            //     'boleto_instructions': instructions
                            // };

                            var parameters = {
                                'api_key':apiKey,
                                // 'encryption_key':encriptionKey,
                                'amount': amount,
                                'payment_method':'boleto',
                                'data-customer-data':true,
                                'customer':customer,
                                'boleto_instructions': instructions,
                                'boleto_expiration_date':expirationDate
                            };
                            
                
                            HTTPService.post('https://api.pagar.me/1/transactions', parameters)
                            .then(function(result){
                                console.log(result);
                                q.resolve(result);
                            })
                            .catch(function(error){
                                q.reject(error);
                            });
                
                            return q.promise;
            }
            
             function notifyCustomerBoleto(id, email){
                var q = $q.defer();
    
                // var parameters = {
                //     'email': email
                // };
    
                // HTTPService.post('https://api.pagar.me/1/transactions/'.concat(id).concat('/collect_payment?api_key=').concat(apiKey), parameters)
                // .then(function(result){
                //     console.log(result);
                //     q.resolve(result);
                // })
                // .catch(function(error){
                //     q.reject(error);
                // });
    
                q.resolve(true);
    
                return q.promise;
            }
    
            function postTransactionCard(amount, cardHash, customer){
                var q = $q.defer();
    
                var parameters = {
                    'api_key':apiKey,
                    'encryption_key':encriptionKey,
                    'amount': amount,
                    'card_hash': cardHash,
                    'data-customer-data':true,
                    'customer':customer
                };
    
                console.log('--- Transação com prametros:')
                console.log(parameters)
    
                HTTPService.post('https://api.pagar.me/1/transactions', parameters)
                .then(function(result){
                    q.resolve(result);
                })
                .catch(function(error){
                    q.reject(error);
                });
    
    
                return q.promise;
    
            }
    
             function postTransactionExistentCard(amount, cardId, customer){
                var q = $q.defer();
    
                var parameters = {
                    'api_key':apiKey,
                    'encryption_key':encriptionKey,
                    'amount': amount,
                    'card_id': cardId,
                    'customer':customer
                };
    
                console.log('--- Transação com prametros:')
                console.log(parameters)
    
                HTTPService.post('https://api.pagar.me/1/transactions', parameters)
                .then(function(result){
                    q.resolve(result);
                })
                .catch(function(error){
                    q.reject(error);
                });
    
    
                return q.promise;
    
            }
    
            function postCaptureTransaction(transactionId, amount){
                var q = $q.defer();
    
                var parameters = {
                    api_key:apiKey,
                    amount: amount
                };
    
                HTTPService.post('https://api.pagar.me/1/transactions/'.concat(transactionId).concat('/capture'), parameters)
                .then(function(result){
                    q.resolve(result);
                })
                .catch(function(error){
                    q.reject(error);
                });
    
                return q.promise;
            }
    
            function generateCardHash(cardData){
    
                var q = $q.defer();
                PagarMe.encryption_key = encriptionKey;
                var creditCard = new PagarMe.creditCard();
                creditCard.cardHolderName = cardData.cardHolderName;
                creditCard.cardExpirationMonth = cardData.cardExpirationMonth;
                creditCard.cardExpirationYear = cardData.cardExpirationYear;
                creditCard.cardNumber = cardData.cardNumber;
                creditCard.cardCVV = cardData.cardCVV;
    
                var fieldErrors = creditCard.fieldErrors();
                var hasErrors = false;
    
                for(var field in fieldErrors){
                    hasErrors = true; break;
                }
    
                if(hasErrors){
                    q.reject(fieldErrors);
                }
                else {
                    creditCard.generateHash(function(cardHash) {
                        q.resolve(cardHash);
                    });
                }
    
                return q.promise;
            }
    
            function getStatusBoleto(boletoId){
                var q = $q.defer();
    
                HTTPService.get('https://api.pagar.me/1/transactions?api_key='.concat(apiKey).concat('&id=').concat(boletoId))
                .then(function(result){
                    q.resolve(result);
                })
                .catch(function(error){
                    q.reject(error);
                });
    
                return q.promise;
            }

            function getStatusBoletoRecursivo(boletoId, elemento, viewModel,indexCustomerModel, indexChargeModel){
                var q = $q.defer();
    
                HTTPService.get('https://api.pagar.me/1/transactions?api_key='.concat(apiKey).concat('&id=').concat(boletoId))
                .then(function(result){
                    
                    try{
                        result[0].elemento = elemento;
                        result[0].vm = viewModel;
                        result[0].indexCustomer = indexCustomerModel
                        result[0].indexCharge = indexChargeModel
                    }
                    catch(erro){
                        // debugger
                    }
                    
                    
                    q.resolve(result);
                })
                .catch(function(error){
                    q.reject(error);
                });
    
                return q.promise;
            }
    
    
        }
    })();
(function() {
    'use strict';
    
        angular
            .module('foneClub')
            .filter('filterTelefone', filterTelefone);
    
            filterTelefone.inject = [];

        function filterTelefone() {
            return function(arr, input) {
                if (input == null || input == undefined || arr == null || arr == undefined || arr.length == 0 ) {
                    return arr;
                }
                var inputClean = input.replace(/[!#$%&'()*+,-./:;?@[\\\]_`{|}~a-zA-Z]/g, '');
                if (inputClean == null || input == undefined) {
                    return arr;
                }
                return arr.filter(function(param) {
                    return param.Phones.find(function(phone) {
                        return phone.DDD.concat(phone.Number).indexOf(inputClean) !== -1;
                        // return phone.Number.toString().substring(0, inputClean.length) == inputClean;
                    }) 
                })
            }
        }
    })();
(function () {

    'use strict';

    angular
        .module('foneClub')
        .factory('DataFactory', DataFactory);

    DataFactory.$inject = [];

    function DataFactory() {

        var data = {};

        return data;

    }

})();

(function() {

  'use strict';

  angular.module('foneClub')
    .service('FileListUtil', FileListUtil);

  function FileListUtil() {

    /* fields */
    this.data = undefined;

    this.set = set
    this.get = get

    function set(fileList){
        this.data = fileList;
    }

    function get(){
        return this.data;
    }

  }

})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('FireBaseManagerUtil', FireBaseManagerUtil);

    FireBaseManagerUtil.$inject = ['$firebaseArray'];
    function FireBaseManagerUtil($firebaseArray) {

        var ref = firebase.database().ref();
        var log = $firebaseArray(ref.child("log"));
        var users = $firebaseArray(ref.child("users"));

        this.initialize = initialize;
        this.addLog = addLog;
        this.addUser = addUser;
        this.getUsers = getUsers;

        function initialize(){

        }

        function addLog(value){
            log.$add({
             text: value
            });
        }

        // FireBaseManagerUtil.addUser({
        //     user:'Gustavo',
        //     password:'123gustavo'
        // });

        function addUser(user){
            users.$add(user);
        }

        function getUsers(){

            // var obj = $firebaseObject(ref);
            // obj.$loaded()
            // .then(function(data) {
            //     console.log(data === obj); // true
            // })
            // .catch(function(error) {
            //     console.error("Error:", error);
            // });

            return users;
        }

    }
})();
(function () {

  'use strict';

  angular.module('foneClub')
    .service('HTTPService', HTTPService);

  HTTPService.$inject = ['$http'];

  function HTTPService($http) {

    var vm = this;
    vm.get = get;
    vm.post = post;
    vm.postFile = postFile;
    vm.getStatus = getStatus;

    function get(path, params) {

      return $http.get(path, { params: params })
        .then(complete)
        .catch(error);

      function complete(data) {
        return data.data;
      }

      function error(message) {
        throw message;
      }
    }

    function getStatus(path, params) {

      return $http.get(path, { params: params })
        .then(complete)
        .catch(error);

      function complete(data) {
        return data.status;
      }

      function error(message) {
        throw message;
      }
    }

    function post(path, params) {

      return $http.post(path, params)
        .then(complete)
        .catch(error);

      function complete(data, status, headers, config) {
        return data.data;
      }

      function error(message) {
        throw message;
      }
    }
    function postFile(path, params) {
      debugger;
      return $http.post(path, params, {
        headers: { 'Content-Type': undefined }
      })
        .then(complete)
        .catch(error);

      function complete(data) {
        return data;
      }

      function error(message) {
        throw message;
      }
    }
  }
})();

(function() {
'use strict';

    angular
        .module('foneClub')
        .service('LocationService', LocationService);

    LocationService.inject = ['$state'];
    function LocationService($state) {

        this.change = change;

        function change(value, dataParameters) {
            $state.go(value, {
                data: dataParameters
            });
        }
    }
})();
(function() {

  'use strict';

  angular.module('foneClub')
    .service('MainUtils', MainUtils);

  MainUtils.inject = ['$q', '$cordovaFile', '$ionicLoading', '$ionicPopup'];
  function MainUtils($q, $cordovaFile, $ionicLoading, $ionicPopup) {

    this.guid = guid;
    this.pathToDataURI = pathToDataURI;
    this.dataURIToBlob = dataURIToBlob;
    this.uploadFile = uploadFile;
    this.operatorOptions = operatorOptions;

    this.agent = undefined;
    this.setAgent = setAgent
    this.getAgent = getAgent

    function setAgent(value){
        this.agent = value;
    }

    function getAgent(){
        return this.agent;
    }

      function guid() {

        function s4() {
          return Math.floor((1 + Math.random()) * 0x10000)
            .toString(16)
            .substring(1);
        }

        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
          s4() + '-' + s4() + s4() + s4();
      }

      function dataURIToBlob(dataURI) {
            // convert base64/URLEncoded data component to raw binary data held in a string
            var byteString;
            if (dataURI.split(',')[0].indexOf('base64') >= 0)
                byteString = atob(dataURI.split(',')[1]);
            else
                byteString = unescape(dataURI.split(',')[1]);

            // separate out the mime component
            var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];

            // write the bytes of the string to a typed array
            var ia = new Uint8Array(byteString.length);
            for (var i = 0; i < byteString.length; i++) {
                ia[i] = byteString.charCodeAt(i);
            }

            return new Blob([ia], {type:mimeString});
        }

        function pathToDataURI(url, callback) {
            var xhr = new XMLHttpRequest();
            var headers = {
              'Access-Control-Allow-Origin' : '*',
              'Access-Control-Allow-Methods' : 'POST, GET, OPTIONS, PUT',
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            };
            xhr.onload = function() {
                var reader = new FileReader();
                reader.onloadend = function() {
                callback(reader.result);
                }
                reader.readAsDataURL(xhr.response);
            };
            xhr.open('GET', url);
            xhr.headers = headers;
            xhr.responseType = 'blob';
            xhr.send();
        }

        function uploadFile(file){

            var q = $q.defer();

            var imageUploader = new ImageUploader();
            imageUploader.push(file)
            .then((data) => {
                //console.debug('Upload complete. Data:', data);
                q.resolve(data);
            })
            .catch((err) => {
                console.error(err);
                q.reject(err);
            });

            return q.promise;
        }

        function operatorOptions(){

            return [
                {'nome':'Claro', 'id':1},
                {'nome':'Vivo', 'id':2},
                {'nome':'Oi', 'id':3},
                {'nome':'Tim', 'id':4},
                {'nome':'Vivo', 'id':5},
                {'nome':'Outra', 'id':6},
            ];
        }

  }

})();
(function() {

    'use strict';

    angular.module('foneClub').service('UtilsService', UtilsService);

    UtilsService.inject = ['$q'];

    function UtilsService($q) {
        return {
            clearDocumentNumber: _clearDocumentNumber,
            getContactPhoneFromPhones: _getContactPhoneFromPhones,
            getDocumentNumerWithMask: _getDocumentNumerWithMask,
            getPhoneNumberFromStringToJson: _getPhoneNumberFromStringToJson,
            clearPhoneNumber: _clearPhoneNumber,
            sendImageToUpload: _sendImageToUpload
        }
        
        function _clearDocumentNumber(documentNumber){
            return documentNumber.replace(/[-.]/g, '').replace('/','');
        }
        
        function _getContactPhoneFromPhones(phones) {
            var contacts = phones.filter(function (element) {
                return !element.IsFoneclube;
            });
            return contacts;
        }
        
        function _getDocumentNumerWithMask(documentNumber) {
            return documentNumber.substr(0, 3) + '.' + documentNumber.substr(3, 3) + '.' + documentNumber.substr(6, 3) + '-' + documentNumber.substr(9)
        }

        function _getPhoneNumberFromStringToJson(param) {
            var number = {
                DDD: _clearPhoneNumber(param).substring(0, 2),
                Number: _clearPhoneNumber(param).substring(2)
            }
            return number;
        }

        function _clearPhoneNumber(number) {
            return number ? number.replace('-', '').replace(' ', '').replace('(', '').replace(')', '') : '';
        }

        function _sendImageToUpload(imageSelf, imageFrente, imageVerso) {
            var q = $q.defer();
            var toUpload = [];
            if (imageSelf) toUpload.push({img: imageSelf, tipo: 1});
            if (imageFrente) toUpload.push({img: imageFrente, tipo: 2});
            if (imageVerso) toUpload.push({img: imageVerso, tipo: 3});
            if (toUpload.length == 0) {
                q.resolve();
            }
            var promises = toUpload.map(function(image) {
                return uploadImage(image);
            });
            $q.all(promises).then(function (result){
                console.log(result);
                q.resolve(result);
            }, function (result){
                console.log(result);
                q.reject(result);
            });
            return q.promise;
        }

        function uploadImage(imagem) {
            var q = $q.defer();
            var holdId = imagem.tipo;
            function isInvalidName(str){
                return /\s/.test(str);
            }
            if(isInvalidName(imagem.img.name)){
                q.reject("Não foi possivel enviar sua imagem, por favor envie uma imagem sem espaço no nome do arquivo");
                return q.promise;
            }
            var imageUploader = new ImageUploader();
            imageUploader.push(imagem.img)
            .then((data) => {
                data.tipo = holdId;
                q.resolve(data);
            })
            .catch((err) => {
                q.reject('Não foi possível enviar imagens');
            });
            return q.promise;
        }

    }
})();
(function() {
'use strict';

    angular
        .module('foneClub')
        .service('ViewModelUtilsService', ViewModelUtilsService);

    ViewModelUtilsService.inject = ['$ionicModal', 'DialogFactory'];
    function ViewModelUtilsService($ionicModal, DialogFactory) {


        //todo colocar cria~ção na hora do show garantindo sempre limpeza ao abrir
        this.modalCustomerData = {};        
        this.showModalCustomer = showModalCustomer;
        this.showModalComment=showModalComment;

        this.modalNewCardPaymentData = {};
        this.showModalNewCardPayment = showModalNewCardPayment;

        this.modalExistentCardPaymentData = {};
        this.modalExistentCardData = {};
        this.showModalExistentCardPayment = showModalExistentCardPayment;
        this.showModalPaymentHistoryDetail = showModalPaymentHistoryDetail;

        this.modalData = {};
        this.showModal = showModal;

        this.modalBoletoData = {};
        this.modalRepeatBoletoData={};
        
        this.modalCardData={};
        this.modalRepeatCardData={};
      this.showModalBoleto = showModalBoleto;
      this.showModalBoletoPayment = showModalBoletoPayment;
      
        this.showModalRepeatBoleto=showModalRepeatBoleto;
      this.showModalRepeatCard = showModalRepeatCard
      this.showModalEmailDetail = showModalEmailDetail;
        

        function showModal(data){

            this.modalData = data;
            var service = this;

            DialogFactory.showTemplate('modules/lista-customer/checkout-customer-modal.html');           
        }

        function showModalCustomer(data, index){
            this.modalCustomerData = data;
            this.modalCustomerData.index = index;
            var service = this;
        
            DialogFactory.showTemplate('modules/customers/customers-modal/customer-modal.html');
        }

        function showModalNewCardPayment(data){
            this.modalNewCardPaymentData = data;
            var service = this;
           
            DialogFactory.showTemplate('modules/customers/new-card/new-card-payment.html');
        }
        function showModalComment(data){        
            this.modalCommentData = data;
            var service = this;          
            DialogFactory.showTemplate('modules/customers/comment/comment.html');
        }
        
        

        function showModalExistentCardPayment(data,card){
            this.modalExistentCardPaymentData = data;
            this.modalExistentCardData = card;
            var service = this;

            DialogFactory.showTemplate('modules/customers/existent-card/existent-card.html');
        }

       function showModalBoleto(data){
            this.modalBoletoData = data;           
            var service = this;           

            DialogFactory.showTemplate('modules/customers/boleto/boleto.html');
       }

      function showModalBoletoPayment(data) {
        this.modalBoletoData = data;
        var service = this;
        DialogFactory.showTemplate('modules/customers/boleto/boletopayment.html');
      }
        function showModalRepeatBoleto(payment,data){
            debugger;
            this.modalBoletoData = data;
            this.modalRepeatBoletoData = payment;
            var service = this;           
            DialogFactory.showTemplate('modules/customers/repeat-boleto/repeat-boleto.html');
        }
        function showModalRepeatCard(payment,data){
            debugger;
            this.modalCardData = data;
            this.modalRepeatCardData = payment;
            var service = this;           
            DialogFactory.showTemplate('modules/customers/repeat-card/repeat-card.html');
        }
        
        function showModalPaymentHistoryDetail(history, customer) {
            this.modalPaymentDetailHistory = history;
            this.modalPaymentDetailCustomer = customer;
            var service = this;
            DialogFactory.showTemplate('modules/customers/payment-detail/paymentdetail.html');
        }

      function showModalEmailDetail(emailstatus, phone, email, operator) {
        this.modalEmailDetailemailstatus = emailstatus;
        this.modalEmailDetailphone = phone;
        this.modalEmailDetailemail = email;
        this.modalEmailDetailoperator = operator;
        var service = this;
        DialogFactory.showTemplate('modules/customers/edicao/EmailTemplate.html');

      }

    }
})();

(function () {
    
        'use strict';
    
        angular
            .module('foneClub')
            .factory('DialogFactory', DialogFactory);
    
        DialogFactory.$inject = ['ngDialog', '$q'];
    
        function DialogFactory(ngDialog, $q) {

            function _dialogConfirm(param) {                
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Confirmação';
                }
                if(param.btn1 == undefined || !param.btn1) {
                    param.btn1 = 'Cancelar';
                }
                if(param.btn2 == undefined || !param.btn2) {
                    param.btn2 = 'Ok';
                }
                ngDialog.openConfirm({
                    template:'<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +                    
                    '<button type="button" class="btnCancelar" ng-click="closeThisDialog(0)"> '+ param.btn1 + ' </button>' +
                    '<button type="button" id="openConfirm-btn-confirm" class="btnConfirmar" ng-enter-all="confirm(1)" ng-click="confirm(1)"> ' + param.btn2 + ' </button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false                    
                }).then(function(param) {
                    defer.resolve(param);
                }, function(param) {
                    defer.resolve(param);
                })
                return defer.promise;
            }

            function _showMessageDialog(param) {
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Aviso';
                }
                ngDialog.open({
                    template: '<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +
                    '<button type="button" class="btnOk" ng-enter-all="closeThisDialog(0)" ng-click="closeThisDialog(0)">Ok' +
                    '</button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                })
                return defer.promise;
            }

            function _showAlertDialog(param) {
                debugger;
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Aviso';
                }
                ngDialog.open({
                    template: '<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.message +'</div>' +
                    '<div class="footer">' +
                    '<button type="button" class="btnOk" ng-enter-all="closeThisDialog(0)" ng-click="closeThisDialog(0)">Ok' +
                    '</button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                })
                return defer.promise;
            }
            
            function _showLoader(mensagem) {                               
                return ngDialog.open({
                    template: '<div class="mensagens-dialog"><div class="show-loader">'+                    
                    '<span>'+ mensagem +'</span></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                })                
            }

            function _showMessageConfirm(param) {
                var defer = $q.defer();
                if(param.titulo == undefined || !param.titulo) {
                    param.titulo = 'Aviso';
                }
                ngDialog.openConfirm({
                    template:'<div class="mensagens-dialog"><div class="mensagem-content"><div class="title-mensagem">'+
                    '<span>' + param.titulo +'</span><hr></div>' +
                    '<div class="corpo-mensagem">'+ param.mensagem +'</div>' +
                    '<div class="footer">' +                    
                    '<button type="button" class="btnOk" ng-enter-all="confirm(1)" ng-click="confirm(1)"> Ok </button></div></div></div>',
                    plain: true,
                    className: 'mensagens-dialog',
                    closeByDocument: false,
                    closeByEscape: false
                }).then(function(param) {
                    defer.resolve(param);
                }, function(param) {
                    defer.resolve(param);
                })
                return defer.promise;
            }

            function _showTemplate(template) {
                return ngDialog.open({                    
                    template: template,   
                    className: 'show-template',                        
                    closeByDocument: true,
                    closeByEscape: true,
                    showClose: false                    
                })
            }

            return {
                dialogConfirm: _dialogConfirm,
                showMessageDialog: _showMessageDialog,
                showMessageConfirm: _showMessageConfirm,
                showLoader: _showLoader,
                showTemplate: _showTemplate,
                showAlertDialog:_showAlertDialog
            }
    
        }
    
    })();
    

angular
.module('foneClub')
.directive('moneyInput', function($filter, $browser, $timeout) {
    return {
        require: 'ngModel',
        link: function($scope, $element, $attrs, ngModelCtrl) {
            var listener = function() {

                console.log($element.val());
                var value = $element.val().replace(/[^0-9]/g, '');
                $element.val($filter('currency')(value/100, "R$", 2));

            };


            // This runs when we update the text field
            ngModelCtrl.$parsers.push(function(viewValue) {
                return viewValue.replace(/[^0-9]/g, '')
            });

            // This runs when the model gets updated on the scope directly and keeps our view in sync
            ngModelCtrl.$render = function() {
                $element.val(ngModelCtrl.$viewValue);
            };

            $element.bind('change', listener);
            $element.bind('keydown', function(event) {
                $browser.defer(listener); // Have to do this or changes don't get picked up properly
            });
            $timeout(function(){
                $element.val($filter('currency')($element.val().replace(/[^0-9]/g, '')/100, "R$", 2));    
                $browser.defer(listener)
            },500);
            
        }

    };
});
angular.module('foneClub').directive('ngEnter', function () {
    return function(scope, element, attrs) {
        element.bind("keydown keypress", function(event) {
            if(event.which === 13) {
                scope.$apply(function(){
                    scope.$eval(attrs.ngEnter, {'event': event});
                });

                event.preventDefault();
            }
        });
    };
});

angular.module('foneClub').directive('ngEnterAll', function () {    
    return function (scope, element, attrs) {
        angular.element(document).find('body').bind("keydown", function (event) {            
            if(event.which === 13) {
                scope.$apply(function (){
                    scope.$eval(attrs.ngEnterAll);
                });
 
                event.preventDefault();
            }
        });

        
    };
});

angular.module('foneClub').directive('nextOnEnter', function () {
    return {
        restrict: 'A',
        link: function ($scope, selem, attrs) {
            selem.bind('keydown', function (e) {
                var code = e.keyCode || e.which;
                if (code === 13) {
                    e.preventDefault();
                    var pageElems = document.querySelectorAll('input, select, textarea'),
                        elem = e.srcElement || e.target,
                        focusNext = false,
                        len = pageElems.length;
                    for (var i = 0; i < len; i++) {
                        var pe = pageElems[i];
                        if (focusNext) {
                            if (pe.style.display !== 'none') {
                                document.getElementById(pe.id).focus();
                                break;
                            }
                        } else if (pe === elem) {
                            focusNext = true;
                        }
                    }
                }
            });
        }
    }
});
(function () {
    'use strict';
  
    angular
      .module('foneClub')
      .component('foneHeader', {
        templateUrl: '../components/header-page/header-page.html',
        bindings: {
          title: "@"
          },
          controller: headerController,
          controllerAs: 'vm'
      });        
  
    headerController.$inject = ['$rootScope'];
  
    function headerController($rootScope) {
      var vm = this;      
      vm.clickMenuHamburguer = function() {
        $rootScope.$broadcast('menu-hamburguer');
      }
    }

  })();
  
(function() {
'use strict';

    angular
        .module('foneClub')
        .directive('file', ['FileListUtil', function(FileListUtil) {
            return {
                restrict: 'AE',
                scope: {
                file: '@'
                },
                link: function(scope, el, attrs){

                    el.on('change', function(event){
                        var files = event.target.files;
                        var file = files[0];
                        if(file && typeof(file) !== undefined && file.size > 0){
                            scope.file = file;
                            scope.$parent.file = file;
                            FileListUtil.set(file);
                            event.currentTarget.value = "";
                        }
                        else {
                            scope.file = {};
                            scope.$parent.file = {};
                            FileListUtil.set(file);
                            event.currentTarget.value = "";
                        }
                        scope.$apply(); 
                    });


                }
            };
        }])


})();
(function () {

  'use strict';

  angular
    .module('foneClub')
    .service('MainComponents', MainComponents);

  MainComponents.$inject = ['$q', '$sce', '$ionicPopup', '$timeout', '$ionicLoading', '$cordovaNetwork', '$ionicBackdrop', '$ionicBody'];

  function MainComponents($q, $sce, $ionicPopup, $timeout, $ionicLoading, $cordovaNetwork, $ionicBackdrop, $ionicBody) {

    /* fields */
    var vm = this;
    vm.alert = alert;
    vm.show = show;
    vm.showSimpleToast = showSimpleToast;
    vm.infoAlert = infoAlert;
    vm.showLoader = showLoader;
    vm.hideLoader = hideLoader;

    function alert(params){

      if(!params.titulo)
        params.titulo = 'Aviso';

      closeAllPopups();

      var infoParams = {
        template: params.mensagem,
        title: params.titulo
      };

      return $ionicPopup.alert(infoParams).then(function (answer) {
        return answer;
      });

    }
      
    function show(params){
      closeAllPopups();
      return $ionicPopup.show(params);
    }

    function showLoader(mensagem){
      $ionicLoading.show({
                template: mensagem
      });
    }

    function hideLoader(){
      $ionicLoading.hide();
    }

    function infoAlert(params) {

      closeAllPopups();

      var infoParams = {
        template: params.mensagem,
        title: 'Info',
        cancelText: 'Cancelar'
      };

      return $ionicPopup.confirm(infoParams).then(function (answer) {
        return answer;
      });
    }

    function showLoading() {
      $ionicLoading.show({
        template: '<ion-spinner icon="bubbles" class="spinner-calm"></ion-spinner>'
      });
    }

    function hideLoading() {
      $ionicLoading.hide();
    }

    function isOnline() {
      if (window.cordova && window.cordova.plugins && navigator && navigator.connection && navigator.connection.type) {
          return (window.cordova && $cordovaNetwork.isOnline()) || (navigator.onLine);
      }else{
          return navigator.onLine;
      }
    }

    function showSimpleToast(toastMsg, title) {
      return $ionicPopup.alert({
        template: toastMsg,
        title: title
      });
    }

    function showConfirm(params) {

      var infoParams = {
        template: params.message || 'Mensagem',
        title: params.title || 'Título',
        cancelText: params.cancelText || 'Cancelar',
        okText: params.okText || 'Confirmar',
        okType: 'button-assertive'
      };

      return $ionicPopup.confirm(infoParams);
    }



    function _noConnectionMessage() {
      return showSimpleToast("Sem conexão com internet", "AVISO");
    }

    function closeAllPopups() {
        var noop = angular.noop;
        var elevated = false;
        var popupStack = $ionicPopup._popupStack;
        if (popupStack.length > 0) {
          popupStack.forEach(function(popup, index) {
            if (popup.isShown === true) {
              popup.remove();
              popupStack.pop();
            }
          });
        }

        $ionicBackdrop.release();
        //Remove popup-open & backdrop if this is last popup
        $timeout(function() {
          // wait to remove this due to a 300ms delay native
          // click which would trigging whatever was underneath this
          $ionicBody.removeClass('popup-open');
          // $ionicPopup._popupStack.pop();
        }, 400, false);
        ($ionicPopup._backButtonActionDone || noop)();
    }

  }
})();

